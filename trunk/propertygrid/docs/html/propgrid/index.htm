<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: wxPropertyGrid</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindexHL" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1><a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> </h1>
<p>
<h3 align="center">1 </h3><a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is a specialized two-column grid for editing properties such as strings, numbers, flagsets, fonts, and colours. wxPropertySheet used to do the very same thing, but it hasn't been updated for a while and it is currently deprecated.<p>
<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is modeled after .NET propertygrid (hence the name), and thus features are similar. However, inorder to keep the control lightweight, it does not itself have toolbar for mode and page selection, nor the description text box. <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> has those features.<p>
Note that even though <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is a grid-like control, it does not actually use wxGrid.<p>
<b>IMPORTANT NOTE:</b> As long as wxPropertyGrid's version is &lt; 1.0.0 Final, the API is bound to change. So, be warned. These changes can usually be found in the "Name Changes" section of the changes file.<p>
Also, I must note that the version 1.0.0 Final will not be reached until either this library is included in a wxWidgets release (as a contrib or within wxAdv), or its rejection is clearly stated.<p>
<a class="el" href="index.htm#thanks">Acknowledgements</a><br>
 <a class="el" href="index.htm#summary">Summary</a><br>
 <a class="el" href="index.htm#userhelp">Using wxPropertyGrid</a><br>
 <a class="el" href="index.htm#usage">Code Examples</a><br>
 <a class="el" href="index.htm#usage2">Using wxPropertyGridManager</a><br>
 <a class="el" href="index.htm#proplist">Property Descriptions</a><br>
 <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> Class Reference<br>
 <a class="el" href="index.htm#bugs">Bugs</a><br>
 <a class="el" href="index.htm#issues">Issues</a><br>
 <a class="el" href="index.htm#todo">Todo</a><br>
 <a class="el" href="index.htm#notes">Design Notes</a><br>
 <a class="el" href="index.htm#newprops">Creating New Properties</a><br>
 <a class="el" href="classwxPGProperty.htm">wxPGProperty</a> Class Reference<br>
 <a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a> Class Reference<br>
<h2><a class="anchor" name="thanks">
Acknowledgements</a></h2>
<b>Extensive Feedback Provided:</b> Vladimir Vainer, Andrew B, Chris Garrett.<p>
<b>Additional Bug Reports:</b> Few people whose name I have lost.<p>
Also thanks to Julian Smart, Vadim Zeitlin, Robert Roebling, et al. for wxWidgets itself!<h2><a class="anchor" name="summary">
Summary</a></h2>
<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is a specialized two-column grid for editing properties such as strings, numbers, flagsets, fonts, and colours. It is modeled after .NET propertygrid (hence the name), and thus features are similar. However, inorder to keep the control lightweight (so to speak), it does not itself have toolbar for mode and page selection, nor the description text box; <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> has those features.<p>
All operations on properties should be done via wxPropertyGrid's methods. Class reference of the base property class (<a class="el" href="classwxPGProperty.htm">wxPGProperty</a>) should only be interesting for those creating custom user properties.<p>
Property instances are created by calling constructor functions that usually have argument list format (label,name,initial_value). Names of these functions always equal the property's name. Thus, to create a wxStringProperty, wxStringProperty(label,name,initial_value) is called. If constructor function has property specific arguments, then they are usually between name and initial_value.<p>
Created property instances are passed to wxPropertyGrid's Append and Insert methods. It is important to have <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> created before any properties are.<p>
For clarifying code examples, please see <a class="el" href="index.htm#usage">Code Examples</a>.<h2><a class="anchor" name="userhelp">
Using wxPropertyGrid</a></h2>
This is a short summary of how a <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is used (not how it is programmed), or, rather, how it <b>should</b> behave in practice.<p>
<ul>
<li>Basic mouse usage is as follows:<br>
<ul>
<li>Clicking property label selects it.</li><li>Clicking property value selects it and focuses to editor control.</li><li>Clicking category label selects the category.</li><li>Double-clicking category label selects the category and expands/collapses it.</li><li>Double-clicking labels of a property with children expands/collapses it.</li></ul>
</li></ul>
<p>
<ul>
<li>Keyboard usage is as follows:<br>
 When editor control is not focused:<br>
<ul>
<li>cursor up - moves to previous visible property<br>
</li><li>cursor down - moves to next visible property<br>
</li><li>cursor left - if collapsible, collapses, otherwise moves to previous property<br>
</li><li>cursor right - if expandable, expands, otherwise moves to next property<br>
</li><li>tab (if enabled) - focuses keyboard to the editor control of selected property<br>
 When editor control is focused:<br>
</li><li>tab - moves to next visible property<br>
</li><li>shift-tab - moves to previous visible property<br>
</li><li>escape - unfocuses from editor control<br>
</li></ul>
</li></ul>
<p>
<ul>
<li>wxTextCtrl / wxCustomTextCtrl based editors only report that value has actually changed if text was changed and return was pressed afterwards.</li></ul>
<p>
<ul>
<li>In long strings tabs are represented by "\t" and line break by "\n".</li></ul>
<h2><a class="anchor" name="usage">
Code Examples</a></h2>
Following code fragments demonstrate the use of <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>.<p>
It is important to note that a constructor function name for a property is wxPROPERTYNAMEProperty. Thus String property is constructed using function named wxStringProperty and ArrayString property is constructed with wxArrayStringProperty.<p>
Creating <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> and adding basic properties:<p>
<pre class="fragment"><div>    <span class="comment">// Necessary header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/propgrid.h&gt;</span>

    ...

        <span class="comment">// Assumes code is in frame/dialog constructor        </span>

        <span class="comment">// Construct wxPropertyGrid control</span>
        <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* pg = <span class="keyword">new</span> <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a> (<span class="keyword">this</span>, PGID,
            wxDefaultPosition,wxDefaultSize,
            <span class="comment">// Some specific window styles - for all additional styles, see the documentation</span>
            wxPG_AUTO_SORT | <span class="comment">// Automatic sorting after items added</span>
            wxPG_BOLD_MODIFIED | <span class="comment">// Modified values are drawn in bold font</span>
            wxPG_SPLITTER_AUTO_CENTER | <span class="comment">// Automatically center splitter until user manually adjusts it</span>
            <span class="comment">// Default style</span>
            wxPG_DEFAULT_STYLE
            );

        <span class="comment">// These lines demonstrates most basic way to add items. Correct property class</span>
        <span class="comment">// is automatically selected according to the type of the third argument.</span>
        <span class="comment">// wxPG_LABEL is in name argument slot and indicates that label should be used as</span>
        <span class="comment">// a name as well.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxT(<span class="stringliteral">"String Property"</span>), wxPG_LABEL, wxT(<span class="stringliteral">"String Value"</span>) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxT(<span class="stringliteral">"Int Property"</span>), wxPG_LABEL, 0 );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxT(<span class="stringliteral">"Float Property"</span>), wxPG_LABEL, 0.0 );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxT(<span class="stringliteral">"Bool Property"</span>), wxPG_LABEL, FALSE );

        <span class="comment">// Add a category - all subsequent items will automatically belong to it.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxPropertyCategory ( wxT(<span class="stringliteral">"Category 1"</span>) ) );

        <span class="comment">// Add string property - first arg is label, second name, and third initial value</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxStringProperty ( wxT(<span class="stringliteral">"Example of StringProperty"</span>), wxT(<span class="stringliteral">"StringProp"</span>),
            wxT(<span class="stringliteral">"Text Not Modified Yet"</span>) ) );

        <span class="comment">// Add int property - args similar as above. Note that wxPG_LABEL instructs</span>
        <span class="comment">// constructor to use label as name as well.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxIntProperty ( wxT(<span class="stringliteral">"Example of IntProperty"</span>), wxPG_LABEL,
            12345678 ) );

        <span class="comment">// Add float property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxFloatProperty ( wxT(<span class="stringliteral">"Example of FloatProperty"</span>), wxPG_LABEL,
            12345.678 ) );

          <span class="comment">// Add a bool property</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxBoolProperty ( wxT(<span class="stringliteral">"Example of BoolProperty"</span>), wxT(<span class="stringliteral">"BoolProp"</span>),
            FALSE ) );

        <span class="comment">// Add another category - remaining items will instead belong to this.</span>
        <span class="comment">// Note that altough categories can be under other categories, this will</span>
        <span class="comment">// add a new category at the top level.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxPropertyCategory ( wxT(<span class="stringliteral">"Category 2"</span>) ) );

        <span class="comment">// A string property that can be edited in a separate editor dialog.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxLongStringProperty ( wxT(<span class="stringliteral">"Example of LongStringProperty"</span>), wxT(<span class="stringliteral">"LongStringProp"</span>),
            wxT(<span class="stringliteral">"This is much longer string than the first one. Edit it by clicking the button."</span>) ) );

        <span class="comment">// String editor with dir selector button. Uses wxEmptyString as name, which</span>
        <span class="comment">// is allowed (naturally, in this case property cannot be accessed by name).</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxDirProperty( wxT(<span class="stringliteral">"Example of DirProperty"</span>), wxEmptyString, ::wxGetUserHome()) );

        <span class="comment">// A file selector property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxFileProperty( wxT(<span class="stringliteral">"Example of FileProperty"</span>), wxT(<span class="stringliteral">"TextFile"</span>),
            wxEmptyString ) );

        <span class="comment">// Set wildcard for file property (format same as in wxFileDialog).</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a153">SetPropertyAttribute</a>(wxT(<span class="stringliteral">"TextFile"</span>),
            wxPG_FILE_WILDCARD,wxT(<span class="stringliteral">"All files (*.*)|*.*"</span>))
</div></pre><p>
Creating wxEnumProperty is more complex. You have to provide list of constant labels, and optionally relevant values (if given indexes are not used). Here's an example:<p>
<pre class="fragment"><div>        <span class="comment">//</span>
        <span class="comment">// wxEnumProperty does not store strings or even list of strings</span>
        <span class="comment">// ( so that's why they are static in function ).</span>
        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* enum_prop_labels[] = { wxT(<span class="stringliteral">"One Item"</span>), 
            wxT(<span class="stringliteral">"Another Item"</span>), wxT(<span class="stringliteral">"One More"</span>), wxT(<span class="stringliteral">"This Is Last"</span>), NULL };

        <span class="comment">// this value array would be optional if values matched string indexes</span>
        <span class="keyword">static</span> <span class="keywordtype">long</span> enum_prop_values[] = { 40, 80, 120, 160 };

        <span class="comment">// note that the initial value (the last argument) is the actual value,</span>
        <span class="comment">// not index or anything like that. Thus, our value selects "Another Item".</span>
        <span class="comment">//</span>
        <span class="comment">// 0 before value is number of items. If it is 0, like in our example,</span>
        <span class="comment">// number of items is calculated, and this requires that the string pointer</span>
        <span class="comment">// array is terminated with NULL.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxEnumProperty(wxT(<span class="stringliteral">"Example of EnumProperty"</span>),wxT(<span class="stringliteral">"EnumProp"</span>),
            enum_prop_labels, enum_prop_values, 0, 80 ) );
</div></pre><p>
An alternative is to use <a class="el" href="classwxPGConstants.htm">wxPGConstants</a> class which manages dynamic arrays of string and integers. Though wxEnumProperty doesn't store it either, so you'll have to manage it's freeing (e.g. declare as static local or put it into same window class as <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>), but it is the easiest way to add lots of constants together, including arrays of constants.<p>
<pre class="fragment"><div>        <span class="comment">// assumes you have line "wxPGConstants m_constants;" in class body</span>

        <span class="comment">// use basic table from our previous example</span>
        <span class="comment">// can also set/add wxArrayStrings and wxArrayInts directly.</span>
        m_constants.Set ( enum_prop_labels, enum_prop_values );

        <span class="comment">// add extra items</span>
        m_constants.Add ( wxT(<span class="stringliteral">"Look, it continues"</span>), 200 );
        m_constants.Add ( wxT(<span class="stringliteral">"Even More"</span>), 240 );
        m_constants.Add ( wxT(<span class="stringliteral">"And More"</span>), 280 );
        m_constants.Add ( wxT(<span class="stringliteral">"True End of the List"</span>), 320 );

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxEnumProperty(wxT(<span class="stringliteral">"Example of EnumProperty2"</span>),wxT(<span class="stringliteral">"EnumProp2"</span>),
            m_constants, 240 ) );
</div></pre><p>
If you want to create your enum properties with simple (label,name,value) constructor, then you need to create a new property class using one of the supplied macro pairs. See <a class="el" href="index.htm#newprops">Creating New Properties</a> for details.<p>
wxFlagsProperty is similar:<p>
<pre class="fragment"><div>        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* flags_prop_labels[] = { wxT(<span class="stringliteral">"wxICONIZE"</span>), 
            wxT(<span class="stringliteral">"wxCAPTION"</span>), wxT(<span class="stringliteral">"wxMINIMIZE_BOX"</span>), wxT(<span class="stringliteral">"wxMAXIMIZE_BOX"</span>), NULL };

        <span class="comment">// this value array would be optional if values matched string indexes</span>
        <span class="keyword">static</span> <span class="keywordtype">long</span> flags_prop_values[] = { wxICONIZE, wxCAPTION, wxMINIMIZE_BOX, wxMAXIMIZE_BOX };

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxFlagsProperty(wxT(<span class="stringliteral">"Example of FlagsProperty"</span>),wxT(<span class="stringliteral">"FlagsProp"</span>),
            flags_prop_labels, flags_prop_values, 0, GetWindowStyle() ) );
</div></pre><p>
wxFlagsProperty can use <a class="el" href="classwxPGConstants.htm">wxPGConstants</a> just the same way as wxEnumProperty.<p>
wxParentProperty is when a deeper hierarchy (without relying on categories) is necessary:<p>
<pre class="fragment"><div>        wxPGId pid = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxParentProperty(wxT(<span class="stringliteral">"Example of ParentProperty"</span>),wxPG_LABEL) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a9">AppendIn</a> ( pid, wxStringProperty(wxT(<span class="stringliteral">"String Sub-property"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a9">AppendIn</a> ( pid, wxFlagsProperty(wxT(<span class="stringliteral">"Flags Sub-property"</span>),wxPG_LABEL,
            flags_prop_labels, flags_prop_values, 0, GetWindowStyle() ) );
</div></pre><p>
Here's an example of appending some of the "advanced" properties. these you must include "wx/propgrid/advprops.h".<p>
<pre class="fragment"><div>    <span class="comment">// Necessary extra header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/advprops.h&gt;</span>

    ...

        <span class="comment">// wxArrayStringProperty embeds a wxArrayString.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxArrayStringProperty( wxT(<span class="stringliteral">"Example of ArrayStringProperty"</span>), wxT(<span class="stringliteral">"ArrayStringProp"</span>)
            ) );

        <span class="comment">// Image file property. Wildcard is auto-generated from available</span>
        <span class="comment">// image handlers, so it is not set this time.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxImageFileProperty( wxT(<span class="stringliteral">"Example of ImageFileProperty"</span>), wxT(<span class="stringliteral">"ImageFile"</span>) ) );

        <span class="comment">// Font property has sub-properties. Note that we give window's font as</span>
        <span class="comment">// initial value.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxFontProperty(wxT(<span class="stringliteral">"Font"</span>), wxPG_LABEL, GetFont()) );

        <span class="comment">// Colour property with arbitrary colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxColourProperty ( wxT(<span class="stringliteral">"My Colour 1"</span>), wxPG_LABEL,
            wxColour(242,109,0) ) );

        <span class="comment">// System colour property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxSystemColourProperty ( wxT(<span class="stringliteral">"My SysColour 1"</span>), wxPG_LABEL,
            wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)) );

        <span class="comment">// System colour property with custom colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxSystemColourProperty ( wxT(<span class="stringliteral">"My SysColour 2"</span>), wxPG_LABEL,
            wxColour(0,200,160) ) );

        <span class="comment">// Cursor property</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a3">Append</a> ( wxCursorProperty ( wxT(<span class="stringliteral">"My Cursor"</span>), wxPG_LABEL,
            wxCURSOR_ARROW ) );
</div></pre><p>
Getting value of a property in event handler method:<p>
<pre class="fragment"><div>    <span class="comment">// Portion of an imaginary id list</span>
    <span class="keyword">enum</span>
    {
        ...
    
        PGID = 50,

        ...
    };

    <span class="comment">// Portion of an imaginary event table</span>
    BEGIN_EVENT_TABLE(MyForm, wxFrame)

        ...

        <span class="comment">// This occurs when a property is selected</span>
        EVT_PG_SELECTED( PGID, MyForm::OnPropertyGridSelect )
        <span class="comment">// This occurs when a property value changes</span>
        EVT_PG_CHANGED( PGID, MyForm::OnPropertyGridChange )
        <span class="comment">// This occurs when a mouse moves over another property</span>
        EVT_PG_HIGHLIGHTED( PGID, MyForm::OnPropertyGridHighlight )

        ...

    END_EVENT_TABLE()


    <span class="keywordtype">void</span> MyForm::OnPropertyGridChange ( <a class="code" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>&amp; event )
    {

        <span class="comment">// Get name of changed property</span>
        <span class="keyword">const</span> wxString&amp; name = event.<a class="code" href="classwxPropertyGridEvent.htm#a9">GetPropertyName</a>();

        <span class="comment">// Get resulting value</span>

        <span class="comment">// wxVariant may be convenient, but it is a bit slower than using</span>
        <span class="comment">// direct methods.</span>
        wxVariant value = event.<a class="code" href="classwxPropertyGridEvent.htm#a10">GetPropertyValue</a>();

        <span class="comment">// Some specific value getters.</span>
        wxString value_string = event.<a class="code" href="classwxPropertyGridEvent.htm#a11">GetPropertyValueAsString</a>();
        <span class="keywordtype">double</span> value_doulbe = event.<a class="code" href="classwxPropertyGridEvent.htm#a15">GetPropertyValueAsDouble</a>();

        <span class="comment">// Get type identifier</span>
        <span class="keyword">const</span> <a class="code" href="classwxPGValueType.htm">wxPGValueType</a>* type = event.<a class="code" href="classwxPropertyGridEvent.htm#a22">GetPropertyValueType</a>();

    }
</div></pre><p>
Getting value of selected wxSystemColourProperty (which value type is derived from wxObject):<p>
<pre class="fragment"><div>        wxPGId <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a108">GetSelection</a>();

        <span class="keywordflow">if</span> ( <span class="keywordtype">id</span>.IsOk() )
        {

            <span class="comment">// Get name of property</span>
            <span class="keyword">const</span> wxString&amp; name = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a84">GetPropertyName</a> ( <span class="keywordtype">id</span> );

            <span class="comment">// If type is not correct, GetColour() method will produce run-time error</span>
            <span class="keywordflow">if</span> ( pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a129">IsPropertyValueType</a> ( <span class="keywordtype">id</span>, CLASSINFO(<a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>) ) )
            {
                <a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>* pcolval =
                    wxDynamicCast(pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e7">GetPropertyValueAsWxObjectPtr</a>(<span class="keywordtype">id</span>),
                                  <a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>);

                <span class="comment">// Report value</span>
                wxString text;
                <span class="keywordflow">if</span> ( pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o0">m_type</a> == wxPG_CUSTOM_COLOUR )
                    text.Printf ( wxT(<span class="stringliteral">"It is custom colour: (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o1">m_colour</a>.Red(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o1">m_colour</a>.Green(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o1">m_colour</a>.Blue());
                <span class="keywordflow">else</span>
                    text.Printf ( wxT(<span class="stringliteral">"It is wx system colour (number=%i): (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o0">m_type</a>,
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o1">m_colour</a>.Red(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o1">m_colour</a>.Green(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#o1">m_colour</a>.Blue());

                wxMessageBox ( text );
            }

        }

    }
</div></pre><p>
Setting things about property named "X":<p>
<pre class="fragment"><div>        <span class="comment">// There are many versions of this method, of which each accept</span>
        <span class="comment">// different type of value.</span>
        <span class="comment">// NOTE: If type of X is not "long", then this will yield a</span>
        <span class="comment">//       run-time error message.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a177">SetPropertyValue</a> ( wxT(<span class="stringliteral">"X"</span>), 200 );

        <span class="comment">// Setting a string works for all properties - conversion is done</span>
        <span class="comment">// automatically.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a177">SetPropertyValue</a> ( wxT(<span class="stringliteral">"X"</span>), wxT(<span class="stringliteral">"400"</span>) );

        <span class="comment">// Set new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a175">SetPropertyName</a> ( wxT(<span class="stringliteral">"X"</span>), wxT(<span class="stringliteral">"NewNameOfX"</span>) );

        <span class="comment">// Set new label - we need to use the new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a173">SetPropertyLabel</a> ( wxT(<span class="stringliteral">"NewNameOfX"</span>), wxT(<span class="stringliteral">"New Label of X"</span>) );
</div></pre><p>
Example of populating an empty <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> from a values stored in an arbitrary list of wxVariants.<p>
<pre class="fragment"><div>        <span class="comment">// This is a static method that initializes *all* builtin type handlers</span>
        <span class="comment">// available, including those for wxColour and wxFont. Refers to *all*</span>
        <span class="comment">// included properties, so when compiling with static library, this</span>
        <span class="comment">// method may increase the executable size significantly.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e12">InitAllTypeHandlers</a> ();

        <span class="comment">// Populate the list with values. If a property with appropriate</span>
        <span class="comment">// name is not found, it is created according to the type of variant.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a207">SetPropertyValues</a> ( my_list_variant );
</div></pre><p>
Example of iterating through all properties (that are not category or sub-property items):<p>
<pre class="fragment"><div>        wxPGId <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a56">GetFirstProperty</a>();

        <span class="keywordflow">while</span> ( <span class="keywordtype">id</span>.IsOk() )
        {
            <span class="comment">// Do something with property id</span>

            ...

            <span class="comment">// Get next</span>
            pg-&gt;<a class="code" href="classwxPropertyGrid.htm#a63">GetNextProperty</a>( <span class="keywordtype">id</span> );
        }
</div></pre><h2><a class="anchor" name="usage2">
Using wxPropertyGridManager</a></h2>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>, derived from wxWindow, is a control that embeds a <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>, and optionally also a toolbar, description text box and a compactor button.<p>
wxPropertyGridManager's main purpose is to help managing multiple pages of properties. It mirrors most non-visual methods of <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>, some identically, some so that they can affect a property on any page, and some so that they can only affect selected target page.<p>
Generally, methods that operate on a property ( such as GetPropertyValue, SetPropertyValue, EnableProperty, LimitPropertyEditing, Delete, etc. ), work globally (so the given property can exist on any managed page).<p>
Methods that add properties ( Append, Insert, etc.) or operate on multiple properties (such as GetPropertyValues or SetPropertyValues), will work in target page only. Use SetTargetPage(index) method to set current target page. Changing a displayed page (using SelectPage(index), for example) will automatically set the target page to the one displayed.<p>
Global methods such as ExpandAll generally work on the target page only.<p>
Visual methods, such as SetCellBackgroundColour and GetNextVisible are only available in <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>. Use <a class="el" href="classwxPropertyGridManager.htm#a40">wxPropertyGridManager::GetGrid()</a> to obtain pointer to it.<p>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> constructor has exact same format as <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> constructor, and basicly accepts same extra window style flags (albeit also has some extra ones).<p>
Here's some example code for creating and populating a <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>:<p>
<pre class="fragment"><div>        <a class="code" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>* pgMan = <span class="keyword">new</span> <a class="code" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>(<span class="keyword">this</span>, PGID,
            wxDefaultPosition, wxDefaultSize,
            <span class="comment">// These and other similar styles are automatically</span>
            <span class="comment">// passed to the embedded wxPropertyGrid.</span>
            wxPG_BOLD_MODIFIED|wxPG_SPLITTER_AUTO_CENTER|
            <span class="comment">// Include toolbar.</span>
            wxPG_TOOLBAR |
            <span class="comment">// Include description box.</span>
            wxPG_DESCRIPTION |
            <span class="comment">// Include compactor.</span>
            wxPG_COMPACTOR |
            <span class="comment">// Plus defaults.</span>
            wxPGMAN_DEFAULT_STYLE
           );

        <span class="comment">// Adding a page sets target page to the one added, so</span>
        <span class="comment">// we don't have to call SetTargetPage if we are filling</span>
        <span class="comment">// it right after adding.</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a3">AddPage</a>(wxT(<span class="stringliteral">"First Page"</span>));

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a4">AppendCategory</a>(wxT(<span class="stringliteral">"Category A1"</span>));

        <span class="comment">// Remember, the next line equals pgman-&gt;Append( wxIntProperty(wxT("Number"),wxPG_LABEL,1) );</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a5">Append</a>( wxT(<span class="stringliteral">"Number"</span>),wxPG_LABEL,1 );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a5">Append</a>( wxColourProperty(wxT(<span class="stringliteral">"Colour"</span>),wxPG_LABEL,*wxWHITE) );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a3">AddPage</a>(wxT(<span class="stringliteral">"Second Page"</span>));

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a5">Append</a>( wxT(<span class="stringliteral">"Text"</span>),wxPG_LABEL,wxT(<span class="stringliteral">"(no text)"</span>) );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a5">Append</a>( wxFontProperty(wxT(<span class="stringliteral">"Font"</span>),wxPG_LABEL) );

        <span class="comment">// For total safety, finally reset the target page.</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#a165">SetTargetPage</a>(0);
</div></pre><p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Right now, each page has its own name table. However, this may change in a future release.</li></ul>
</dd></dl>
<h2><a class="anchor" name="proplist">
Property Descriptions</a></h2>
Here are descriptions of built-in properties, with attributes (see <a class="el" href="classwxPropertyGrid.htm#a153">wxPropertyGrid::SetPropertyAttribute</a>) that apply to them.<h3><a class="anchor" name="wxPropertyCategory">
wxPropertyCategory</a></h3>
<b>Inheritable Class:</b> <a class="el" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>.<p>
Not an actual property per se, but a header for a group of properties.<h3><a class="anchor" name="wxParentProperty">
wxParentProperty</a></h3>
Pseudo-property that can have sub-properties inserted under itself. Has textctrl editor that allows editing values of all sub-properties in a one string. In essence, it is a category that has look and feel of a property, and which children can be edited via the textctrl.<h3><a class="anchor" name="wxStringProperty">
wxStringProperty</a></h3>
Simple string property.<h3><a class="anchor" name="wxIntProperty">
wxIntProperty</a></h3>
Like wxStringProperty, but converts text to a signed long integer.<h3><a class="anchor" name="wxFloatProperty">
wxFloatProperty</a></h3>
Like wxStringProperty, but converts text to a double-precision floating point. Default float-to-text precision is 6 decimals, but this can be changed by modifying wxPG_FLOAT_PRECISION attribute.<h3><a class="anchor" name="wxBoolProperty">
wxBoolProperty</a></h3>
Represents a boolean value. wxChoice is used as editor control, by the default. wxPG_BOOL_USE_CHECKBOX attribute can be set to 1 inorder to use check box instead.<h3><a class="anchor" name="wxLongStringProperty">
wxLongStringProperty</a></h3>
<b>Inheritable Class:</b> wxLongStringPropertyClass<p>
Like wxStringProperty, but has a button that triggers a small text editor dialog.<h3><a class="anchor" name="wxDirProperty">
wxDirProperty</a></h3>
Like wxLongStringProperty, but the button triggers dir selector instead.<h3><a class="anchor" name="wxFileProperty">
wxFileProperty</a></h3>
<b>Inheritable Class:</b> wxFilePropertyClass<p>
Like wxLongStringProperty, but the button triggers file selector instead. Default wildcard is "All files..." but this can be changed by setting wxPG_FILE_WILDCARD attribute (see wxFileDialog for format details). Attribute wxPG_FILE_SHOW_FULL_PATH can be set to 0 inorder to show only the filename, not the entire path.<h3><a class="anchor" name="wxEnumProperty">
wxEnumProperty</a></h3>
<b>Inheritable Class:</b> wxEnumPropertyClass<p>
Represents a single selection from a list of choices - wxChoice is used to edit the value.<h3><a class="anchor" name="wxFlagsProperty">
wxFlagsProperty</a></h3>
<b>Inheritable Class:</b> wxFlagsPropertyClass<p>
Represents a bit set that fits in a long integer. wxBoolProperty sub-properties are created for editing individual bits. Textctrl is created to manually edit the flags as a text; a continous sequence of spaces, commas and semicolons is considered as a flag id separator.<h3><a class="anchor" name="wxArrayStringProperty">
wxArrayStringProperty</a></h3>
<b>Inheritable Class:</b> wxArrayStringPropertyClass<p>
Allows editing of a list of strings in wxTextCtrl and in a separate dialog.<h3><a class="anchor" name="wxMultiChoiceProperty">
wxMultiChoiceProperty</a></h3>
Allows editing a multiple selection from a list of strings. This is property is pretty much built around concept of wxMultiChoiceDialog.<h3><a class="anchor" name="wxImageFileProperty">
wxImageFileProperty</a></h3>
Like wxFileProperty, but has thumbnail of the image in front of the filename and autogenerates wildcard from available image handlers.<h3><a class="anchor" name="wxColourProperty">
wxColourProperty</a></h3>
Represents wxColour. wxChoice is used to edit the value. Drop-down list has few basic colour choices.<h3><a class="anchor" name="wxFontProperty">
wxFontProperty</a></h3>
Represents wxFont. Various sub-properties are used to edit individual subvalues.<h3><a class="anchor" name="wxSystemColourProperty">
wxSystemColourProperty</a></h3>
<b>Inheritable Class:</b> wxSystemColourPropertyClass<p>
Represents wxColour and a system colour index. wxChoice is used to edit the value. Drop-down list has color images.<h3><a class="anchor" name="wxCursorProperty">
wxCursorProperty</a></h3>
Represents a wxCursor. wxChoice is used to edit the value. Drop-down list has cursor images under some (wxMSW) platforms.<h3><a class="anchor" name="Additional">
Sample Properties</a></h3>
Sample application has following additional examples of custom properties:<ul>
<li>wxFontDataProperty ( edits wxFontData )</li><li>wxPointProperty ( edits wxPoint )</li><li>wxSizeProperty ( edits wxSize )</li><li>wxAdvImageFileProperty ( like wxImageFileProperty, but also has a drop-down for recent image selection)</li><li>wxDirsProperty ( edits a wxArrayString consisting of directory strings)</li></ul>
<h2><a class="anchor" name="issues">
Issues</a></h2>
These are not bugs per se, but miscellaneous cross-platform issues that have been resolved in a less-than-satisfactory manner.<ul>
<li>Since by the default library is compiled to use custom controls instead of native controls, buttons probably look out-of-place under some platforms. But those platforms are mostly such that I can't test and develop myself, so hooray for you getting it running! If you absolutely need to use native controls, modify number on line "    #define wxPG_USE_CUSTOM_CONTROLS    1" in propertygrid.h to 0 and rebuild the library. Note however that there are atleast four such lines - each for different platform. So look comments and defines above to make sure you are editing define that is relevant to you.</li><li><a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> does some of the multiple page management chores (for examples, category list for all pages is stored in it). This causes some of its methods to work bad when used throught <a class="el" href="classwxPropertyGridManager.htm#a40">wxPropertyGridManager::GetGrid()</a>. For example, Clear() does not work properly (use wxPropertyGridManager::ClearPage instead).</li><li>wxMSW: Toolbar's ToggleTool doesn't disable last item in the same radiogroup. AFAIK, there is no way to do that.</li><li>wxMSW: wxCustomTextCtrl copy-pasting causes memory leak unless app calls wxTheClipboard-&gt;Flush() before exiting.</li><li>wxMSW: wxDOT pen style shows as a short dash instead of real single-pixel dots. wxCustomChoice/wxCustomComboBox keyboard focus is indicated by drawing a rectangle using wxDOT style. So, because that style doesn't work right, it ain't pretty.</li><li>wxGTK+CustomControls: Scrolling does not automatically move caret, so control with caret is unfocused when scrolling begins (or caret is just hidden).</li><li>Atleast with wxGTK2+Unicode+Debug Mode File Selector dialog may trigger an assertion failure (line 1060 in string.cpp with 2.5.3) that can be cancelled probably without any ill-effect.</li></ul>
<p>
Following only apply when <b>not</b> using custom controls:<ul>
<li>Under GTK, EVT_MOTION does not trigger for child control. Causes cursor change inconsistencies. Permanent mouse capture is not practical since it causes wxWindow:: SetCursor to fail (and events cannot be relayed to native controls anyway). Easy solution: Splitter drag detect margin and control do not overlap.</li><li>When splitter is being dragged, active editor control (button as well under wxGTK) is hidden to prevent flickering. This may go unnoticed with some controls (wxTextCtrl) but is very noticeable with others (wxChoice).</li><li>Under MSW, when resizing, editor controls flicker. No easy fix here (wxEVT_ONIDLE might be employed).</li><li>Under GTK 1.2, font may show invisible if it is not bold (so it is forced).</li><li>Under wxGTK, controls may flicker a bit (actually, a lot) when being shown.</li></ul>
<h2><a class="anchor" name="bugs">
Bugs</a></h2>
<ul>
<li>wxMSW: wxComboBox doesn't properly receive keyboard events (yes I have tried wxWANTS_CHARS).</li><li>wxGTK: image handler's return only the first character of an extension (probably a wx-bug).</li><li>After deleting an item, there may be gfx distortion. Imminent slight resizing will fix this.</li><li>wxGTK: in sample application, property text colour is not set correct from wxSystemColourProperty. Value is correct, but the resulting text colour is sometimes a bit skewed if it is not a shade of gray. This may be GTK's attempt to auto-adjust it.</li><li>wxMSW: Maybe not a wxPropertyGridbug per se, but a wxWidgets feature that is not so well documented: wxCustomTextCtrl copy-pasting causes memory leak unless app calls wxTheClipboard-&gt;Flush() before exiting. Issues section also makes note of this.</li><li>wxGTK 1.2: dialogs get invisible font.</li><li>wxGTK 1.2: wxLongStringProperty editor dialog crashes on close.</li><li>wxGTK 1.2 w/ native controls: crashes sometimes when cursor moves over dropped-down wxChoice list (so, right now, its pretty much unusable combination).</li></ul>
<h2><a class="anchor" name="todo">
Todo</a></h2>
For a detailed TODO, see propertygrid.cpp (just search for "todo" and you'll find it).<h2><a class="anchor" name="notes">
Design Notes</a></h2>
<ul>
<li>Currently <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> uses "easy" way to relay events from embedded <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>. That is, the exact same id is used for both.</li></ul>
<p>
<ul>
<li>wxHashMap used to access properties by name uses 'const wxChar*' instead of 'wxString'. Altough this has somewhat lower performance if used mostly with wxStrings, it is much faster if a lot of non-wxString strings are used, since they don't have to be recreated as wxString before using with the hashmap. If you want to change this behaviour, see propertygrid.h. Comment current version (including wxPGNameStr), and uncomment version that uses wxString. Note that with unicode, wxString is always used (due to some weird issues).</li></ul>
<p>
<ul>
<li>If wxPG_DOUBLE_BUFFER is 1 (default for MSW, GTK and MAC), wxPropertyGrid::OnDrawItems composes the image on a wxMemoryDC. This effectively eliminates flicker caused by drawing itself (property editor controls are another matter).</li></ul>
<p>
<ul>
<li>Under wxMSW, flicker freedom with native editor controls is achieved by creating them at 'out of sight' position, then hiding&amp;freezing them, then moving them to the correct position, and finally thawing&amp;showing them.</li></ul>
<p>
<ul>
<li>If ever wxString itself changes from being, in practice, a wxChar* pointer to its string content, then <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> has to change a lot internally.</li></ul>
<h2><a class="anchor" name="crossplatform">
Crossplatform Notes</a></h2>
<ul>
<li>wxWindow::SetSizeHints may be necessary to shrink controls below certain treshold, but only on some platforms. For example wxMSW might allow any shrinking without SetSizeHints call where wxGTK might not.</li></ul>
<p>
<ul>
<li>GTK Choice (atleast, maybe other controls as well) likes its items set in constructor. Appending them seems to be slower (Freeze+Thaw won't help). Even using Append that gets wxArrayString argument may not be good, since it may just append every string one at a time.</li></ul>
<p>
<ul>
<li>Automatic scrolling differences: When at the end of scrollbar, and virtual size gets smaller, full refresh is easy hack.</li></ul>
<h2><a class="anchor" name="newprops">
Creating New Properties</a></h2>
Each property class represents a specialized value storage for a value type. It also nominates an editor class to itself, and implements some helper methods to complement the used value type and editor classes.<p>
Easiest way to create a new property is to use one of the supplied macro pairs (see the section below).<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Code that implements a property generally requires inclusion of wx/propgrid/propdev.h.</li><li>Read <a class="el" href="classwxPGProperty.htm">wxPGProperty</a> and <a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a> class documentation to find out what each overriddable method should do.</li></ul>
</dd></dl>
<h3><a class="anchor" name="methoda">
Macro Pairs</a></h3>
<h4><a class="anchor" name="custstringprop">
String Property with Button</a></h4>
This custom property will be exactly the same as wxLongStringProperty, except that you can specify a custom code to handle what happens when the button is pressed.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_STRING_PROPERTY(PROPNAME)
</div></pre><p>
In source: <pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        WX_PG_IMPLEMENT_STRING_PROPERTY(PROPNAME)
        <span class="keywordtype">bool</span> PROPNAMEClass::OnButtonClick ( wxPropertyGrid* propgrid, wxString&amp; value )
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show dialog, read initial string from value. If changed,</span>
            <span class="comment">//   store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</div></pre><h4><a class="anchor" name="custflagsprop">
Custom Flags Property</a></h4>
Flags property with custom default value and built-in labels/values.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(PROPNAME)
</div></pre><p>
In source: <pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// LABELS, VALUES and ITEMCOUNT are as in the arguments to wxFlagsProperty</span>
        <span class="comment">// constructor. DEFVAL is the new default value (normally it is 0).</span>
        WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY(PROPNAME,LABELS,VALUES,ITEMCOUNT,DEFAULT_FLAGS)
</div></pre><p>
The new property class will have simple (label,name,value) constructor.<h4><a class="anchor" name="custenumprop">
Custom EnumProperty</a></h4>
Exactly the same as custom FlagsProperty. Simply replace FLAGS with ENUM in macro names to create wxEnumProperty based class instead.<h4><a class="anchor" name="custarraystringprop">
Custom ArrayString property</a></h4>
This type of custom property allows selecting different string delimiter (default is '"' on both sides of the string - as in C code), and allows adding custom button into the editor dialog.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty)
</div></pre><p>
In source:<p>
<pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// second argument = string delimiter. '"' for C string style (default),</span>
        <span class="comment">//    and anything else for str1&lt;delimiter&gt; str2&lt;delimiter&gt; str3 style</span>
        <span class="comment">//    (so for example, using ';' would result to str1; str2; str3).</span>
        <span class="comment">// third argument = const wxChar* text for the custom button. If NULL</span>
        <span class="comment">//    then no button is added.</span>
        WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty,<span class="charliteral">','</span>,wxT(<span class="stringliteral">"Browse"</span>))

        <span class="keywordtype">bool</span> wxMyArrayStringPropertyClass::OnCustomStringEdit (wxWindow* parent,
                                                               wxString&amp; value)
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show custom editor dialog, read initial string from value.</span>
            <span class="comment">//   If changed, store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</div></pre><h4><a class="anchor" name="custcolprop">
Custom ColourProperty</a></h4>
wxColourProperty/wxSystemColourProperty that can have custom list of colours in dropdown.<p>
Use version that doesn't have _USES_WXCOLOUR in macro names to have <a class="el" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a> as value type instead of plain wxColour (in this case values array might also make sense).<p>
In header: <pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/advprops.h&gt;</span>
        WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty)
</div></pre><p>
In source:<p>
<pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// Colour labels. Last (before NULL, if any) must be Custom.</span>
        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* mycolprop_labels[] = {
            wxT(<span class="stringliteral">"Black"</span>),
            wxT(<span class="stringliteral">"Blue"</span>),
            wxT(<span class="stringliteral">"Brown"</span>),
            wxT(<span class="stringliteral">"Custom"</span>),
            (<span class="keyword">const</span> wxChar*) NULL
        };

        <span class="comment">// Relevant colour values as unsigned longs.</span>
        <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> mycolprop_colours[] = {
            wxPG_COLOUR(0,0,0),
            wxPG_COLOUR(0,0,255),
            wxPG_COLOUR(166,124,81),
            wxPG_COLOUR(0,0,0)
        };

        <span class="comment">// Implement property class. Third argument is optional values array,</span>
        <span class="comment">// but in this example we are only interested in creating a shortcut</span>
        <span class="comment">// for user to access the colour values. Last arg is itemcount, but</span>
        <span class="comment">// that's not necessary because our label array is NULL-terminated.</span>
        WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty,
                                                             mycolprop_labels,
                                                             (<span class="keywordtype">long</span>*)NULL,
                                                             mycolprop_colours,
                                                             0)
</div></pre><h3><a class="anchor" name="declaring">
Declaring an Arbitrary Property</a></h3>
To make your property available globally, you need to declare it in a header file. Usually you would want to use WX_PG_DECLARE_PROPERTY macro to do that (it is in <a class="el" href="propgrid_8h.htm">propgrid.h</a>). It has three arguments: PROPNAME, T_AS_ARG and DEFVAL. PROPNAME is property NAME, T_AS_ARG is type input in function argument list ( "int" for int value type, "const wxString&amp;" for wxString value type, etc.), and DEFVAL is default value for that.<p>
For example:<p>
<pre class="fragment"><div>        <span class="comment">// Declare wxRealPoint Property</span>
        WX_PG_DECLARE_PROPERTY(wxRealPointProperty,<span class="keyword">const</span> wxRealPoint&amp;,wxRealPoint(0.0,0.0))
</div></pre><p>
There is also WX_PG_DECLARE_PROPERTY_WITH_DECL which takes an additional declaration argument (export ,for example, when exporting from a dll).<p>
If you want that your property could be inherited from, then you would also have to define the class body in the header file. In most cases this is not necessary and the class can be defined and implemented completely in the source.<h3><a class="anchor" name="designtypes">
Design Types of Properties</a></h3>
When speaking from an object design perspective, there are basicly five different types of properties:<p>
<b>Basic</b>: These derive directly from base abstract property class (<a class="el" href="classwxPGProperty.htm">wxPGProperty</a>). By far the most commonly used design type.<p>
<b>With Children</b>: These derive directly from base abstract parent property class (<a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>). Font property and flags property, for example, are of this design type.<p>
<b>Inherited</b>: These are inherited from a working property class but do not use the same value type (for example, SystemColour property inherits from Enum property but has different value type).<p>
<b>Simple Inherited</b>: These are inherited from a working property class and use the same value type (for example, Cursor property inherits from Enum property and uses the same value type).<p>
<b>Inherited With Subset Value</b>: These are like Simple Inherited but they do not use the same value type. However, they *do* use the same value data to store a subset of the parent class' value (for example, Colour property has subset of SystemColour property's value).<h3><a class="anchor" name="implementing">
Implementing a Property</a></h3>
First there is class body with WX_PG_DECLARE_PROPERTY_CLASS (or similar) macro, constructor, virtual destructor, and declarations for other overridden methods. Then comes WX_PG_IMPLEMENT_PROPERTY_CLASS (or similar) macro, and after that class method implementations.<h3><a class="anchor" name="valuetypes">
Creating New Value Types</a></h3>
If you want to a property to use a value type that is not among the builtin types, then you need to create a new property value type. It is quite straightforward, using two macros.<p>
In header, use WX_PG_DECLARE_VALUE_TYPE(DATATYPE), like this:<p>
<pre class="fragment"><div>        <span class="comment">// Example: Declare value type for wxRealPoint.</span>
        WX_PG_DECLARE_VALUE_TYPE(wxRealPoint)
</div></pre><p>
If, however, class of your value type does not inherit from wxObject, and you need to use it in wxVariant list used as a persistent storage (for example, see <a class="el" href="classwxPropertyGrid.htm#a41">wxPropertyGrid::GetPropertyValues</a>), then use this instead, as it also declares a necessary wxVariantData_DATATYPE class.<p>
<pre class="fragment"><div>        <span class="comment">// Example: Declare value type and wxVariantData class for wxRealPoint.</span>
        WX_PG_DECLARE_VALUE_TYPE_VOIDP(wxRealPoint)
</div></pre><p>
There are also _WITH_DECL versions of both.<p>
However, there are a few different implement macros to place in a source file. Pick one according to the type of type.<p>
<pre class="fragment"><div>        <span class="comment">// For implementing value type for a wxObject based class.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// Same as above, except that an instance of TYPE is</span>
        <span class="comment">// stored in class. Thus, DEFVAL can be any expression</span>
        <span class="comment">// that can be assigned to the type.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_OWNDEFAULT(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// For implementing value type for a non-wxObject based class.</span>
        <span class="comment">// Like with ...WXOBJ_OWNDEFAULT macro above, instance of TYPE</span>
        <span class="comment">// is stored and DEFVAL can be any expression.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_SIMPLE(TYPE,DEFPROPERTY,DEFVAL) 

        <span class="comment">// Like above, but also implement the wxVariantData class</span>
        <span class="comment">// declared with the second type value type declare macro.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP(TYPE,DEFPROPERTY,DEFVAL) 

        <span class="comment">// Like above, but accepts a custom wxVariantData class.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_CVD(TYPE,DEFPROPERTY,DEFVAL,VARIANTDATACLASS) 

        <span class="comment">// For implementing value type with different default value.</span>
        WX_PG_IMPLEMENT_DERIVED_TYPE(TYPENAME,PARENTVT,DEFVAL)

        <span class="comment">// For implementing value type for a native value.</span>
        <span class="comment">// Generally should not be used since it is meant for</span>
        <span class="comment">// wxString, int, double etc. which are already implemented.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE(TYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL)
</div></pre><p>
Argument descriptions:<p>
TYPE - Actual data type represented by the value type, or if derived type, any custom name.<p>
DEFPROPERY - Name of the property that will edit this value type by default.<p>
DEFVAL - Default value for the property.<p>
TYPENAME - An arbitraty typename for this value type. Applies only to the derived type.<p>
PARENTVT - Name of parent value type, from which this derived type inherits from.<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Your class, which you create value type for, must have a copy constructor. </li></ul>
</dd></dl>
<hr size="1"><address style="align: right;"><small>Generated on Mon Jan 24 11:39:46 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
