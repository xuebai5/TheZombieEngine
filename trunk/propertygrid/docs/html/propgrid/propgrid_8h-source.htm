<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propgrid.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propgrid.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propgrid.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Sep-25-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_PROPGRID_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_PROPGRID_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "propgrid.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">/*</span>
00020 <span class="comment"></span>
00021 <span class="comment">  -- IMPORTANT API NOTES --</span>
00022 <span class="comment"></span>
00023 <span class="comment">  * Intermediate property classes that should only be inherited from</span>
00024 <span class="comment">    have names that begin with wxPG (for example, wxPGProperty and</span>
00025 <span class="comment">    wxPGPropertyWithChildren).</span>
00026 <span class="comment"></span>
00027 <span class="comment">  * As a rule of thumb, OnChange events are not triggered when value</span>
00028 <span class="comment">    is set by the program (with SetPropertyValue, ClearPropertyValue) etc.</span>
00029 <span class="comment"></span>
00030 <span class="comment">*/</span>
00031 
00032 <span class="preprocessor">#include &lt;wx/filename.h&gt;</span>
00033 
00034 <span class="preprocessor">#include &lt;wx/dynarray.h&gt;</span>
00035 
00036 <span class="preprocessor">#include &lt;wx/hashmap.h&gt;</span>
00037 
00038 <span class="preprocessor">#include &lt;wx/variant.h&gt;</span>
00039 
00040 <span class="preprocessor">#include &lt;wx/tooltip.h&gt;</span>
00041 
00042 <span class="comment">// Doxygen special</span>
00043 <span class="preprocessor">#ifndef _WX_WINDOW_H_BASE_</span>
00044 <span class="preprocessor"></span><span class="preprocessor"># include "pg_dox_mainpage.h"</span>
00045 <span class="preprocessor">#endif</span>
00046 <span class="preprocessor"></span>
00047 <span class="comment">// -----------------------------------------------------------------------</span>
00048 
00049 
00050 <span class="comment">//</span>
00051 <span class="comment">// Here are some platform dependent defines</span>
00052 <span class="comment">// NOTE: More in propertygrid.cpp</span>
00053 <span class="comment">//</span>
00054 
00055 <span class="preprocessor">#if defined(__WXMSW__)</span>
00056 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00057 
00058 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00059 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00060 <span class="preprocessor"></span>
00061 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00062 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00063 <span class="preprocessor"></span>
00064 <span class="preprocessor"># if defined(__WXWINCE__)</span>
00065 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00066 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00067 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00068 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00069 <span class="preprocessor"></span>
00070 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00071 <span class="preprocessor"></span>
00072 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00073 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00074 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00075 <span class="preprocessor"></span>
00076 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#elif defined(__WXGTK__)</span>
00079 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00080 
00081 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00082 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00083 <span class="preprocessor"></span>
00084 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00085 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00086 <span class="preprocessor"></span>
00087 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00088 <span class="preprocessor"></span>
00089 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00090 <span class="preprocessor"></span>
00091 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00092 <span class="preprocessor"></span><span class="preprocessor">  #if defined(__WXGTK20__)</span>
00093 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00094 <span class="preprocessor"></span><span class="preprocessor">  #else</span>
00095 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // This (sub)platform works much better with wxCustomControls</span>
00096 <span class="preprocessor"></span><span class="preprocessor">  #endif</span>
00097 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00098 <span class="preprocessor"></span>
00099 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00100 <span class="preprocessor"></span>
00101 <span class="preprocessor">#elif defined(__WXMAC__)</span>
00102 <span class="preprocessor"></span>    <span class="comment">// *not* tested</span>
00103 
00104 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00105 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00106 <span class="preprocessor"></span>
00107 <span class="preprocessor">    #define wxPG_ICON_WIDTH             11  // comment to use bitmap buttons</span>
00108 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    1 // 1 if wxRendererNative should be employed</span>
00109 <span class="preprocessor"></span>
00110 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00111 <span class="preprocessor"></span>
00112 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00113 <span class="preprocessor"></span>
00114 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00115 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00116 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00117 <span class="preprocessor"></span>
00118 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00119 <span class="preprocessor"></span>
00120 <span class="preprocessor">#else</span>
00121 <span class="preprocessor"></span>    <span class="comment">// defaults</span>
00122     <span class="comment">// tested on: none.</span>
00123 
00124 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00125 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00126 <span class="preprocessor"></span>
00127 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00128 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00129 <span class="preprocessor"></span>
00130 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00131 <span class="preprocessor"></span>
00132 <span class="preprocessor">    #define wxPG_HEAVY_GFX              0 // 1 for prettier appearance</span>
00133 <span class="preprocessor"></span>
00134 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00135 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00136 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00137 <span class="preprocessor"></span>
00138 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       0  // Enable tooltips</span>
00139 <span class="preprocessor"></span>
00140 <span class="preprocessor">#endif</span>
00141 <span class="preprocessor"></span>
00142 <span class="comment">// Undefine wxPG_ICON_WIDTH to use supplied xpm bitmaps instead</span>
00143 <span class="comment">//#undef wxPG_ICON_WIDTH</span>
00144 
00145 <span class="comment">// Need to force disable tooltips?</span>
00146 <span class="preprocessor">#if !wxUSE_TOOLTIPS</span>
00147 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
00148 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SUPPORT_TOOLTIPS       0</span>
00149 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00150 <span class="preprocessor"></span>
00151 <span class="comment">// Set 1 to include basic properties ( ~48k in 0.9.9.2 )</span>
00152 <span class="preprocessor">#define wxPG_INCLUDE_BASICPROPS         1</span>
00153 <span class="preprocessor"></span>
00154 <span class="comment">// Set 1 to include advanced properties (wxFontProperty, wxColourProperty, etc.) ( ~32k in 0.9.9.2 )</span>
00155 <span class="preprocessor">#define wxPG_INCLUDE_ADVPROPS           1</span>
00156 <span class="preprocessor"></span>
00157 <span class="comment">// Set 1 include wxPropertyGridManager ( ~36k in 0.9.9.1 )</span>
00158 <span class="comment">//#define wxPG_INCLUDE_MANAGER            1</span>
00159 
00160 <span class="comment">// Set 1 to include checkbox editor class ( ~4k in 0.9.9.1 )</span>
00161 <span class="preprocessor">#define wxPG_INCLUDE_CHECKBOX           1</span>
00162 <span class="preprocessor"></span>
00163 <span class="preprocessor">#ifndef wxPG_USE_DOTNET_ICONS</span>
00164 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_USE_DOTNET_ICONS          0</span>
00165 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00166 <span class="preprocessor"></span>
00167 <span class="comment">// 1 if use array for categories. Limits number of categories</span>
00168 <span class="comment">// to 256, but improves GetPropertyCategory performance (used</span>
00169 <span class="comment">// a lot in DoDrawItems).</span>
00170 <span class="comment">// No significant code size difference (&lt;1kb).</span>
00171 <span class="preprocessor">#define wxPG_USE_CATEGORY_ARRAY         1</span>
00172 <span class="preprocessor"></span>
00173 <span class="comment">// NOTE: Currently advantages granted by wxPG_EMBED_VARIANT are probably minimal.</span>
00174 <span class="preprocessor">#define wxPG_EMBED_VARIANT              0 // 1 if wxVariant is in wxPGProperty (should be better if used a lot)</span>
00175 <span class="preprocessor"></span>
00176 <span class="comment">// NOTE: Use this only if you really need wxDynamicCast etc. Property class name</span>
00177 <span class="comment">//   can be acquired with wxPropertyGrid::GetPropertyClassName() anyway.</span>
00178 <span class="comment">// ALSO NOTE: Causes quite a code size increase (~20k in main object file) considering what</span>
00179 <span class="comment">//   it does. </span>
00180 <span class="preprocessor">#define wxPG_INCLUDE_WXOBJECT           0 // 1 if inherit wxPGProperty from wxObject - always 1 if wxPG_EMBED_VARIANT</span>
00181 <span class="preprocessor"></span>
00182 
00183 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00184 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_EMBED_VARIANT is currently broken."</span>
00185 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_INCLUDE_WXOBJECT</span>
00186 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_INCLUDE_WXOBJECT           1</span>
00187 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00188 <span class="preprocessor"></span>
00189 <span class="comment">// -----------------------------------------------------------------------</span>
00190 
00191 <span class="comment">// Our very custom dynamic object macros. Should only be used</span>
00192 <span class="comment">// directly in an abstract (typeless etc.) base property classes.</span>
00193 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00194 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_INCLUDE_WXOBJECT is not currently supported."</span>
00195 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)       DECLARE_CLASS(A)</span>
00196 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)   IMPLEMENT_CLASS(A,B)</span>
00197 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()</span>
00198 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00199 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)</span>
00200 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)</span>
00201 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()          virtual const wxChar* GetClassName() const;</span>
00202 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00203 <span class="preprocessor"></span>
00204 <span class="comment">// -----------------------------------------------------------------------</span>
00205 
00206 <span class="preprocessor">#ifdef WXMAKINGDLL_PROPGRID</span>
00207 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXEXPORT</span>
00208 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00209 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXIMPORT</span>
00210 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00211 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG</span>
00212 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00213 <span class="preprocessor"></span>
00214 <span class="comment">// -----------------------------------------------------------------------</span>
00215 
00216 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
00217 <span class="preprocessor"></span><span class="preprocessor"># include "wx/propgrid/custctrl.h"</span>
00218 <span class="preprocessor"># define wxPGCtrlClass wxCustomControl</span>
00219 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00220 <span class="preprocessor"></span><span class="preprocessor"># define wxPGCtrlClass wxWindow</span>
00221 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomTextCtrl wxTextCtrl</span>
00222 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomComboBox wxComboBox</span>
00223 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomChoice wxChoice</span>
00224 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomButton wxButton</span>
00225 <span class="preprocessor"></span><span class="preprocessor"># define wxCC_CUSTOM_IMAGE_MARGIN1     2  // before image</span>
00226 <span class="preprocessor"></span><span class="preprocessor"># define wxCC_CUSTOM_IMAGE_MARGIN2     7  // after image</span>
00227 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00228 <span class="preprocessor"></span>
00229 <span class="comment">// -----------------------------------------------------------------------</span>
00230 
00231 <span class="preprocessor">#ifndef SWIG</span>
00232 <span class="preprocessor"></span><span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGVariant;
00233 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGValueType;
00234 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGEditor;
00235 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGProperty;
00236 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren;
00237 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyCategoryClass;
00238 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridState;
00239 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGrid;
00240 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridEvent;
00241 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridManager;
00242 <span class="preprocessor">#endif</span>
00243 <span class="preprocessor"></span>
00244 <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>;
00245 
00246 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridNameStr;
00247 
00248 <span class="preprocessor">#define wxPG_EMPTY_MACRO</span>
00249 <span class="preprocessor"></span>
00251 <span class="preprocessor">#define wxPG_LABEL (*((const wxString*)NULL))</span>
00252 <span class="preprocessor"></span>
00253 <span class="preprocessor">#define wxPG_COLOUR(R,G,B) (unsigned long)(R+(G&lt;&lt;8)+(B&lt;&lt;16))</span>
00254 <span class="preprocessor"></span>
00260 <span class="preprocessor">#define wxPG_FLEXIBLE_SIZE(PREFWID,PREFHEI) wxSize(-(PREFWID),-(PREFHEI))</span>
00261 <span class="preprocessor"></span>
00262 <span class="comment">// -----------------------------------------------------------------------</span>
00263 
<a name="l00274"></a><a class="code" href="group__wndflags.htm#ga0">00274</a> <span class="preprocessor">#define wxPG_AUTO_SORT              0x00000010</span>
00275 <span class="preprocessor"></span>
<a name="l00281"></a><a class="code" href="group__wndflags.htm#ga1">00281</a> <span class="preprocessor">#define wxPG_HIDE_CATEGORIES          0x00000020</span>
00282 <span class="preprocessor"></span>
00283 <span class="comment">/* This style combines non-categoric mode and automatic sorting.</span>
00284 <span class="comment">*/</span>
00285 <span class="preprocessor">#define wxPG_ALPHABETIC_MODE        (wxPG_HIDE_CATEGORIES|wxPG_AUTO_SORT)</span>
00286 <span class="preprocessor"></span>
<a name="l00290"></a><a class="code" href="group__wndflags.htm#ga3">00290</a> <span class="preprocessor">#define wxPG_BOLD_MODIFIED           0x00000040</span>
00291 <span class="preprocessor"></span>
<a name="l00295"></a><a class="code" href="group__wndflags.htm#ga4">00295</a> <span class="preprocessor">#define wxPG_SPLITTER_AUTO_CENTER   0x00000080</span>
00296 <span class="preprocessor"></span>
<a name="l00300"></a><a class="code" href="group__wndflags.htm#ga5">00300</a> <span class="preprocessor">#define wxPG_TOOLTIPS               0x00000100</span>
00301 <span class="preprocessor"></span>
<a name="l00306"></a><a class="code" href="group__wndflags.htm#ga6">00306</a> <span class="preprocessor">#define wxPG_HIDE_MARGIN            0x00000200</span>
00307 <span class="preprocessor"></span>
<a name="l00310"></a><a class="code" href="group__wndflags.htm#ga7">00310</a> <span class="preprocessor">#define wxPG_STATIC_SPLITTER        0x00000400</span>
00311 <span class="preprocessor"></span>
<a name="l00315"></a><a class="code" href="group__wndflags.htm#ga8">00315</a> <span class="preprocessor">#define wxPG_STATIC_LAYOUT          (wxPG_HIDE_MARGIN|wxPG_STATIC_SPLITTER)</span>
00316 <span class="preprocessor"></span>
<a name="l00321"></a><a class="code" href="group__wndflags.htm#ga9">00321</a> <span class="preprocessor">#define wxPG_LIMITED_EDITING        0x00000800</span>
00322 <span class="preprocessor"></span>
<a name="l00324"></a><a class="code" href="group__wndflags.htm#ga10">00324</a> <span class="preprocessor">#define wxPG_TOOLBAR                0x00001000</span>
00325 <span class="preprocessor"></span>
<a name="l00329"></a><a class="code" href="group__wndflags.htm#ga11">00329</a> <span class="preprocessor">#define wxPG_DESCRIPTION            0x00002000</span>
00330 <span class="preprocessor"></span>
<a name="l00334"></a><a class="code" href="group__wndflags.htm#ga12">00334</a> <span class="preprocessor">#define wxPG_COMPACTOR              0x00004000</span>
00335 <span class="preprocessor"></span>
<a name="l00343"></a><a class="code" href="group__wndflags.htm#ga13">00343</a> <span class="preprocessor">#define wxPG_EX_INIT_NOCAT          0x00001000</span>
00344 <span class="preprocessor"></span>
<a name="l00348"></a><a class="code" href="group__wndflags.htm#ga14">00348</a> <span class="preprocessor">#define wxPG_EX_NO_FLAT_TOOLBAR     0x00002000</span>
00349 <span class="preprocessor"></span>
<a name="l00352"></a><a class="code" href="group__wndflags.htm#ga15">00352</a> <span class="preprocessor">#define wxPG_EX_CLASSIC_SPACING     0x00004000</span>
00353 <span class="preprocessor"></span>
<a name="l00356"></a><a class="code" href="group__wndflags.htm#ga16">00356</a> <span class="preprocessor">#define wxPG_EX_NO_MODE_BUTTONS     0x00008000</span>
00357 <span class="preprocessor"></span>
<a name="l00360"></a><a class="code" href="group__wndflags.htm#ga17">00360</a> <span class="preprocessor">#define wxPG_DEFAULT_STYLE              (wxSIMPLE_BORDER|wxCLIP_CHILDREN|wxNO_FULL_REPAINT_ON_RESIZE)</span>
00361 <span class="preprocessor"></span>
<a name="l00364"></a><a class="code" href="group__wndflags.htm#ga18">00364</a> <span class="preprocessor">#define wxPGMAN_DEFAULT_STYLE       (wxCLIP_CHILDREN|wxNO_FULL_REPAINT_ON_RESIZE)</span>
00365 <span class="preprocessor"></span>
00371 <span class="preprocessor">#ifndef wxKEEP_STRUCTURE</span>
00372 <span class="preprocessor"></span><span class="preprocessor"># define wxKEEP_STRUCTURE               0x00000010</span>
00373 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00374 <span class="preprocessor"></span>
00376 <span class="preprocessor">#ifndef wxRECURSE</span>
00377 <span class="preprocessor"></span><span class="preprocessor"># define wxRECURSE                      0x00000020</span>
00378 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00379 <span class="preprocessor"></span>
00380 <span class="comment">// -----------------------------------------------------------------------</span>
00381 
00382 <span class="comment">// Property priorities</span>
00383 <span class="preprocessor">#define wxPG_LOW                    1</span>
00384 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_HIGH                   2</span>
00385 <span class="preprocessor"></span>
00386 <span class="comment">// -----------------------------------------------------------------------</span>
00387 
00388 <span class="comment">// Misc argument flags.</span>
00389 <span class="preprocessor">#define wxPG_FULL_VALUE             0x00000001 // Get/Store full value instead of displayed value.</span>
00390 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_REPORT_ERROR           0x00000002</span>
00391 <span class="preprocessor"></span>
00392 <span class="comment">// -----------------------------------------------------------------------</span>
00393 
00394 <span class="comment">// Simple class to hold the wxPGProperty pointer.</span>
00395 <span class="keyword">class </span>wxPGId
00396 {
00397 <span class="keyword">public</span>:
00398     wxPGId() { m_ptr = NULL; }
00399     wxPGId ( wxPGProperty* ptr ) { m_ptr = ptr; }
00400     wxPGId ( wxPGProperty&amp; ref ) { m_ptr = &amp;ref; }
00401     ~wxPGId() {}
00402 
00403     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_ptr != NULL ); }
00404 
00405     <span class="keywordtype">bool</span> operator == (<span class="keyword">const</span> wxPGId&amp; other)
00406     {
00407         <span class="keywordflow">return</span> m_ptr == other.m_ptr;
00408     }
00409 
00410     wxPGProperty&amp; GetProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_ptr; }
00411     wxPGProperty* GetPropertyPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ptr; }
00412 <span class="keyword">private</span>:
00413     wxPGProperty* m_ptr;
00414 };
00415 
00416 <span class="preprocessor">#define wxPGIdGen(PTR) wxPGId(PTR)</span>
00417 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdToPtr(ID) ID.GetPropertyPtr()</span>
00418 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdIsOk(ID) ID.IsOk()</span>
00419 <span class="preprocessor"></span>
00420 <span class="comment">// -----------------------------------------------------------------------</span>
00421 
00422 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGTypeOperationFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr, <span class="keyword">const</span> wxChar* op );
00423 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGGetFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr );
00424 
00425 <span class="comment">// -----------------------------------------------------------------------</span>
00426 
00427 <span class="comment">/*</span>
00428 <span class="comment">#define wxPG_CURSOR_FROM_FILE       0xFFFFFE</span>
00429 <span class="comment"></span>
00430 <span class="comment">#define wxPG_CURSOR_FROM_RESOURCE   0xFFFFFF</span>
00431 <span class="comment">*/</span>
00432 
00433 <span class="comment">// -----------------------------------------------------------------------</span>
00434 
<a name="l00441"></a><a class="code" href="group__propflags.htm#ga0">00441</a> <span class="preprocessor">#define wxPG_PROP_MODIFIED          0x0001</span>
00442 <span class="preprocessor"></span>
<a name="l00445"></a><a class="code" href="group__propflags.htm#ga1">00445</a> <span class="preprocessor">#define wxPG_PROP_DISABLED          0x0002</span>
00446 <span class="preprocessor"></span>
<a name="l00449"></a><a class="code" href="group__propflags.htm#ga2">00449</a> <span class="preprocessor">#define wxPG_PROP_CUSTCOLBG         0x0004</span>
00450 <span class="preprocessor"></span>
<a name="l00453"></a><a class="code" href="group__propflags.htm#ga3">00453</a> <span class="preprocessor">#define wxPG_PROP_HIDEABLE          0x0008</span>
00454 <span class="preprocessor"></span>
<a name="l00459"></a><a class="code" href="group__propflags.htm#ga4">00459</a> <span class="preprocessor">#define wxPG_PROP_CUSTOMIMAGE       0x0010</span>
00460 <span class="preprocessor"></span>
<a name="l00464"></a><a class="code" href="group__propflags.htm#ga5">00464</a> <span class="preprocessor">#define wxPG_PROP_NOEDITOR          0x0020</span>
00465 <span class="preprocessor"></span>
<a name="l00468"></a><a class="code" href="group__propflags.htm#ga6">00468</a> <span class="preprocessor">#define wxPG_PROP_UNSPECIFIED       0x0040</span>
00469 <span class="preprocessor"></span>
<a name="l00473"></a><a class="code" href="group__propflags.htm#ga7">00473</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC    0x0080</span>
00474 <span class="preprocessor"></span>
00478 <span class="comment">// -----------------------------------------------------------------------</span>
00479 
<a name="l00489"></a><a class="code" href="group__attrids.htm#ga0">00489</a> <span class="preprocessor">#define wxPG_BOOL_USE_CHECKBOX      64</span>
00490 <span class="preprocessor"></span>
<a name="l00494"></a><a class="code" href="group__attrids.htm#ga1">00494</a> <span class="preprocessor">#define wxPG_FLOAT_PRECISION        65</span>
00495 <span class="preprocessor"></span>
<a name="l00500"></a><a class="code" href="group__attrids.htm#ga2">00500</a> <span class="preprocessor">#define wxPG_FILE_WILDCARD          66</span>
00501 <span class="preprocessor"></span>
<a name="l00505"></a><a class="code" href="group__attrids.htm#ga3">00505</a> <span class="preprocessor">#define wxPG_FILE_SHOW_FULL_PATH    67</span>
00506 <span class="preprocessor"></span>
<a name="l00510"></a><a class="code" href="group__attrids.htm#ga4">00510</a> <span class="preprocessor">#define wxPG_USER_ATTRIBUTE        192</span>
00511 <span class="preprocessor"></span>
00515 <span class="comment">// -----------------------------------------------------------------------</span>
00516 <span class="comment">// Value type.</span>
00517 
00518 <span class="comment">// Value type declarer, with optional declaration part.</span>
00519 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(VALUETYPE,DECL) \</span>
00520 <span class="preprocessor">    extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00521 <span class="preprocessor"></span>
00522 <span class="comment">// Value type declarer.</span>
00523 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE(VALUETYPE) \</span>
00524 <span class="preprocessor">    extern const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00525 <span class="preprocessor"></span>
00526 <span class="comment">// Value type accessor.</span>
00527 <span class="preprocessor">#define wxPG_VALUETYPE(T)       wxPGValueType_##T</span>
00528 <span class="preprocessor"></span>
00529 <span class="comment">// Like wxPG_VALUETYPE, but casts pointer to exact class.</span>
00530 <span class="preprocessor">#define wxPG_VALUETYPE_EXACT(T) ((wxPGValueType##VALUETYPE##Class)wxPGValueType##T)</span>
00531 <span class="preprocessor"></span>
00532 <span class="comment">// Declare builtin value types.</span>
00533 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(none,WXDLLIMPEXP_PG)
00534 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxString,WXDLLIMPEXP_PG)
00535 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">long</span>,WXDLLIMPEXP_PG)
00536 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">bool</span>,WXDLLIMPEXP_PG)
00537 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">double</span>,WXDLLIMPEXP_PG)
00538 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">void</span>,WXDLLIMPEXP_PG)
00539 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxArrayString,WXDLLIMPEXP_PG)
00540 
00541 #define WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \
00542 wxVariantData_##VALUETYPE : <span class="keyword">public</span> <a class="code" href="classwxPGVariantDataWxObj.htm">wxPGVariantDataWxObj</a> \
00543 { \
00544     DECLARE_DYNAMIC_CLASS(wxVariantData_##VALUETYPE) \
00545 <span class="keyword">protected</span>: \
00546     VALUETYPE   m_value; \
00547 <span class="keyword">public</span>: \
00548     wxVariantData_##VALUETYPE(); \
00549     wxVariantData_##VALUETYPE(<span class="keyword">const</span> VALUETYPE&amp; value); \
00550     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Copy(wxVariantData&amp; data); \
00551     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Eq(wxVariantData&amp; data) <span class="keyword">const</span>; \
00552     <span class="keyword">virtual</span> wxString GetType() <span class="keyword">const</span>; \
00553     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr(); \
00554     <span class="keyword">inline</span> <span class="keyword">const</span> VALUETYPE&amp; GetValue ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_value; }
00555 
00556 <span class="comment">// Value type declarer for void* that need auto-generated .</span>
00557 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP_WITH_DECL(VALUETYPE,DECL) \</span>
00558 <span class="preprocessor">class DECL WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00559 <span class="preprocessor">}; \</span>
00560 <span class="preprocessor">extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00561 <span class="preprocessor"></span>
00562 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP(VALUETYPE) \</span>
00563 <span class="preprocessor">class WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00564 <span class="preprocessor">}; \</span>
00565 <span class="preprocessor">WX_PG_DECLARE_VALUE_TYPE(VALUETYPE)</span>
00566 <span class="preprocessor"></span>
<a name="l00572"></a><a class="code" href="classwxPGVariantDataWxObj.htm">00572</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGVariantDataWxObj : <span class="keyword">public</span> wxVariantData
00573 {
00574     <span class="comment">//DECLARE_DYNAMIC_CLASS(wxPGVariantDataWxObj)</span>
00575 <span class="keyword">public</span>:
00576 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00577 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxSTD ostream&amp; str) <span class="keyword">const</span>;
00578 <span class="preprocessor">#endif</span>
00579 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxString&amp; str) <span class="keyword">const</span>;
00580 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00581 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxSTD istream&amp; str);
00582 <span class="preprocessor">#endif</span>
00583 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxString&amp; str);
00584 
00585     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr() = 0;
00586 };
00587 
00588 <span class="comment">// -----------------------------------------------------------------------</span>
00589 <span class="comment">// Editor class.</span>
00590 
00591 <span class="comment">// Editor accessor.</span>
00592 <span class="preprocessor">#define wxPG_EDITOR(T)          wxPGEditor_##T</span>
00593 <span class="preprocessor"></span>
00594 <span class="comment">// Declare editor class, with optional part.</span>
00595 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(EDITOR,DECL) \</span>
00596 <span class="preprocessor">extern DECL wxPGEditor* wxPGEditor_##EDITOR; \</span>
00597 <span class="preprocessor">extern DECL wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00598 <span class="preprocessor"></span>
00599 <span class="comment">// Declare editor class.</span>
00600 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS(EDITOR) \</span>
00601 <span class="preprocessor">extern wxPGEditor* wxPGEditor_##EDITOR; \</span>
00602 <span class="preprocessor">extern wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00603 <span class="preprocessor"></span>
00604 <span class="comment">// Declare builtin editor classes.</span>
00605 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrl,WXDLLIMPEXP_PG)
00606 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(Choice,WXDLLIMPEXP_PG)
00607 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrlAndButton,WXDLLIMPEXP_PG)
00608 #<span class="keywordflow">if</span> wxPG_INCLUDE_CHECKBOX
00609 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(CheckBox,WXDLLIMPEXP_PG)
00610 #endif
00611 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(ChoiceAndButton,WXDLLIMPEXP_PG)
00612 
00613 <span class="comment">// -----------------------------------------------------------------------</span>
00614 
00615 
<a name="l00620"></a><a class="code" href="classwxPGValueType.htm">00620</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGValueType
00621 {
00622 <span class="keyword">public</span>:
00623 
00624     <span class="keyword">virtual</span> ~wxPGValueType() = 0;
00625 
00628     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetTypeName() <span class="keyword">const</span> = 0;
00629 
00634     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetCustomTypeName() <span class="keyword">const</span>;
00635 
00641     <span class="keyword">virtual</span> size_t GetTypeSize() <span class="keyword">const</span> = 0;
00642 
00645     <span class="comment">//virtual bool HasBigData() const = 0;</span>
00646 
00649     <span class="keyword">virtual</span> wxPGVariant GetDefaultValue () <span class="keyword">const</span> = 0;
00650 
00653     <span class="keyword">virtual</span> wxVariant GenerateVariant ( wxPGVariant value, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00654 
00658     <span class="keyword">virtual</span> wxPGProperty* GenerateProperty ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, wxVariant&amp; value ) <span class="keyword">const</span> = 0;
00659 
00662     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) <span class="keyword">const</span> = 0;
00663 
00664 <span class="keyword">protected</span>:
00665 };
00666 
00667 <span class="comment">// -----------------------------------------------------------------------</span>
00668 
00669 <span class="comment">//</span>
00670 <span class="comment">// Property class declaration helper macros</span>
00671 <span class="comment">// (wxPGRootPropertyClass and wxPropertyCategory require this).</span>
00672 <span class="comment">//</span>
00673 
00674 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00675 <span class="preprocessor">public: \</span>
00676 <span class="preprocessor">    virtual const wxPGValueType* GetValueType () const; \</span>
00677 <span class="preprocessor">    virtual const wxPGEditor* GetEditorClass () const; \</span>
00678 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSNAME() \</span>
00679 <span class="preprocessor">private:</span>
00680 <span class="preprocessor"></span>
00681 <span class="comment">// -----------------------------------------------------------------------</span>
00682 
00683 
00684 <span class="comment">// Structure for relaying choice/list info.</span>
00685 <span class="keyword">struct </span>wxPGChoiceInfo
00686 {
00687     <span class="keywordtype">int</span>             m_itemCount;
00688     <span class="keyword">const</span> wxChar**  m_arrWxChars;
00689     wxString*       m_arrWxString;
00690 };
00691 
00704 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00705 <span class="preprocessor"></span><span class="keyword">class </span>WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxVariant
00706 #elif wxPG_INCLUDE_WXOBJECT
00707 class WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxObject
00708 #else
<a name="l00709"></a><a class="code" href="classwxPGProperty.htm">00709</a> class WXDLLIMPEXP_PG wxPGProperty
00710 #endif
00711 {
00712     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGPropertyWithChildren;
00713     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
00714     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
00715     <span class="comment">//_WX_PG_DECLARE_PROPERTY_CLASS(wxPGProperty)</span>
00716 <span class="keyword">public</span>:
00717 
00720     <a class="code" href="classwxPGProperty.htm#a0">wxPGProperty</a>();
00721 
00748     <a class="code" href="classwxPGProperty.htm#a0">wxPGProperty</a>( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
00749 
00751     <span class="keyword">virtual</span> <a class="code" href="classwxPGProperty.htm#a2">~wxPGProperty</a>();
00752 
00794     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
00795 
00798     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a> () <span class="keyword">const</span>;
00799 
00800 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00801 <span class="preprocessor"></span>
00803     <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; <a class="code" href="classwxPGProperty.htm#a5">GetValueAsVariant</a> ()<span class="keyword"> const</span>
00804 <span class="keyword">    </span>{
00805         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00806     }
00807 <span class="preprocessor">#else</span>
00808 <span class="preprocessor"></span>
00810     <span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#a5">GetValueAsVariant</a> () <span class="keyword">const</span>;
00811 <span class="preprocessor">#endif</span>
00812 <span class="preprocessor"></span>
00818     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
00819 
00829     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00830 
00840     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a8">SetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">int</span> flags );
00841 
00846     <span class="keyword">virtual</span> wxSize <a class="code" href="classwxPGProperty.htm#a9">GetImageSize</a>() <span class="keyword">const</span>;
00847 
00866     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a10">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
00867 
00868 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00869 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#a11">GetClassName</a> ()<span class="keyword"> const</span>
00870 <span class="keyword">    </span>{
00871         <span class="keywordflow">return</span> GetClassInfo()-&gt;GetClassName();
00872     }
00873 <span class="preprocessor">#else</span>
00874 <span class="preprocessor"></span>
00877     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#a11">GetClassName</a> () <span class="keyword">const</span> = 0;
00878 <span class="preprocessor">#endif</span>
00879 <span class="preprocessor"></span>
00891     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGValueType* <a class="code" href="classwxPGProperty.htm#a12">GetValueType</a> () <span class="keyword">const</span> = 0;
00892 
00895     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGEditor* <a class="code" href="classwxPGProperty.htm#a13">GetEditorClass</a> () <span class="keyword">const</span>;
00896 
00902     <span class="comment">//virtual int GetParentingType() const;</span>
<a name="l00903"></a><a class="code" href="classwxPGProperty.htm#a14">00903</a>     <span class="keyword">inline</span> <span class="keywordtype">signed</span> <span class="keywordtype">char</span> <a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentingType; }
00904 
00909     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a15">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
00910 
00943     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a16">OnCustomPaint</a> ( wxDC&amp; dc,
00944         <span class="keyword">const</span> wxRect&amp; rect, <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata );
00945 
00954     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a17">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxPGVariant value );
00955 
<a name="l00957"></a><a class="code" href="classwxPGProperty.htm#a18">00957</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#a18">GetLabel</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_label; }
00958 
00960     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#a19">GetParentState</a>() <span class="keyword">const</span>;
00961 
00962 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00963 <span class="preprocessor"></span>
00964     <span class="comment">//inline const wxString&amp; GetName() const { return wxVariant::GetName(); }</span>
00965     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { SetName(str); }
00966 <span class="preprocessor">#else</span>
00967 <span class="preprocessor"></span>
<a name="l00968"></a><a class="code" href="classwxPGProperty.htm#a20">00968</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#a20">GetName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_name; }
00969     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { m_name = str; }
00970 <span class="preprocessor">#endif</span>
00971 <span class="preprocessor"></span>
<a name="l00976"></a><a class="code" href="classwxPGProperty.htm#a22">00976</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a22">GetY</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_y; }
00977 
00978     <span class="keywordtype">void</span> UpdateControl ( wxPGCtrlClass* primary );
00979 
00980     <span class="keyword">inline</span> wxString GetDisplayedString ()<span class="keyword"> const</span>
00981 <span class="keyword">    </span>{
00982         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a>(0);
00983     }
00984 
<a name="l00986"></a><a class="code" href="classwxPGProperty.htm#a25">00986</a>     <span class="keyword">inline</span> wxPGId <a class="code" href="classwxPGProperty.htm#a25">GetId</a>() { <span class="keywordflow">return</span> wxPGIdGen(<span class="keyword">this</span>); }
00987 
<a name="l00989"></a><a class="code" href="classwxPGProperty.htm#a26">00989</a>     <span class="keyword">inline</span> wxPGPropertyWithChildren* <a class="code" href="classwxPGProperty.htm#a26">GetParent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parent; }
00990 
<a name="l00994"></a><a class="code" href="classwxPGProperty.htm#a27">00994</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a27">IsOk</a>()<span class="keyword"> const</span>
00995 <span class="keyword">    </span>{
00996         <span class="keywordflow">return</span> (( m_y &gt;= -1 )?TRUE:FALSE);
00997     }
00998 
00999     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFlagSet( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag )<span class="keyword"> const</span>
01000 <span class="keyword">    </span>{
01001         <span class="keywordflow">return</span> ( m_flags &amp; flag ) ? TRUE : FALSE;
01002     }
01003 
01004     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetFlags()<span class="keyword"> const</span>
01005 <span class="keyword">    </span>{
01006         <span class="keywordflow">return</span> (<span class="keywordtype">long</span>)m_flags;
01007     }
01008 
<a name="l01010"></a><a class="code" href="classwxPGProperty.htm#a30">01010</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a30">IsSubProperty</a>()<span class="keyword"> const</span>
01011 <span class="keyword">    </span>{
01012         wxPGProperty* parent = (wxPGProperty*)m_parent;
01013         <span class="keywordflow">if</span> ( parent &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &lt; 0 &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#p5">m_y</a> &gt; -2 )
01014             <span class="keywordflow">return</span> TRUE;
01015         <span class="keywordflow">return</span> FALSE;
01016     }
01018     <span class="comment">/*inline bool HasCategory() const</span>
01019 <span class="comment">    {</span>
01020 <span class="comment">        return ( (((wxPGProperty*)m_parent)-&gt;GetParentingType()&gt;0) ? TRUE : FALSE );</span>
01021 <span class="comment">    }*/</span>
01022 
01024     size_t <a class="code" href="classwxPGProperty.htm#a31">GetChildCount</a>() <span class="keyword">const</span>;
01025 
01026     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetArrIndex()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrIndex; }
01027 
01028     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetDepth()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_depth; }
01029 
01031 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01032 <span class="preprocessor"></span>
<a name="l01033"></a><a class="code" href="classwxPGProperty.htm#a34">01033</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a34">GetCatIndex</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_category; }
01034 
01035     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCatIndex(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ind) { m_category = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)ind; }
01036 <span class="preprocessor">#endif</span>
01037 <span class="preprocessor"></span>
<a name="l01039"></a><a class="code" href="classwxPGProperty.htm#a36">01039</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a36">GetIndexInParent</a>()<span class="keyword"> const</span>
01040 <span class="keyword">    </span>{
01041         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_arrIndex;
01042     }
01043 
01044     <span class="comment">//inline void SetAsHideable () { m_flags |= wxPG_PROP_HIDEABLE; }</span>
01045 
01046     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags |= flag; }
01047 
01048     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetHelpString ( <span class="keyword">const</span> wxString&amp; help_string ) { m_helpString = help_string; }
01049 
01050     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetHelpString ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_helpString; }
01051 
01052     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags &amp;= ~(flag); }
01053 
01054     <span class="comment">// Use, for example, to detect if item is inside collapsed section.</span>
01055     <span class="keywordtype">bool</span> IsSomeParent ( wxPGProperty* candidate_parent ) <span class="keyword">const</span>;
01056 
01057     <span class="comment">// Shows error as a tooltip or something similar (depends on platform).</span>
01058     <span class="keywordtype">void</span> ShowError ( <span class="keyword">const</span> wxString&amp; msg );
01059 
01060 <span class="keyword">protected</span>:
01061 
01062     <span class="comment">// Called in constructors.</span>
01063     <span class="keywordtype">void</span> Init ();
01064 
01065     wxString                    m_label;
01066 <span class="comment">//#if wxPG_EMBED_VARIANT</span>
01067 <span class="comment">//    wxVariant                   m_variant;</span>
01068 <span class="comment">//#else</span>
01069     wxString                    m_name;
01070     wxPGPropertyWithChildren*   m_parent;
01071     wxString                    m_helpString; <span class="comment">// Help shown in statusbar or help box.</span>
01072     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                m_arrIndex; <span class="comment">// Index in parent.</span>
01073     <span class="keywordtype">int</span>                         m_y; <span class="comment">// This could be short int.</span>
01074     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_flags; <span class="comment">// This could be short int.</span>
01075 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01076 <span class="preprocessor"></span>    <span class="comment">// 0xFF if doesn't belong to a category and is not a category;</span>
01077     <span class="comment">// otherwise index to category table (if is category, then own index)</span>
01078     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_category;
01079 <span class="preprocessor">#endif</span>
01080 <span class="preprocessor"></span>
01081     <span class="comment">// 1 = category</span>
01082     <span class="comment">// 0 = no children</span>
01083     <span class="comment">// -1 = has fixed-set of sub-properties</span>
01084     <span class="comment">// -2 = this is wxParentProperty (sub-properties can be added)</span>
01085     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>                 m_parentingType;
01086 
01087     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depth; <span class="comment">// Root has 0, categories etc. at that level 1, etc.</span>
01088 
01089     <span class="comment">// m_depthBgCol indicates width of background colour between margin and item</span>
01090     <span class="comment">// (essentially this is category's depth, if none then equals m_depth).</span>
01091     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depthBgCol;
01092 
01093     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_bgColIndex; <span class="comment">// Cell background brush index.</span>
01094 
01095 };
01096 
01097 <span class="comment">//</span>
01098 <span class="comment">// wxPGId comparison operators.</span>
01099 <span class="comment">//</span>
01100 
01101 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; b)
01102 {
01103     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01104     <span class="keyword">const</span> wxString&amp; a = <span class="keywordtype">id</span>.GetProperty().GetName();
01105     <span class="keywordflow">return</span> (a.Len() == b.Len()) &amp;&amp; (a.Cmp(b) == 0);
01106 }
01107 
01108 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* b)
01109 {
01110     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01111     <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty().GetName().Cmp(b) == 0;
01112 }
01113 
01114 
01115 <span class="comment">// For dual-pointer-usage reasons, we need to use this trickery</span>
01116 <span class="comment">// instead of wxObjArray. wxPGValueType hash map is declared</span>
01117 <span class="comment">// in propdev.h.</span>
01118 <span class="keyword">typedef</span> wxArrayPtrVoid wxPGArrayProperty;
01119 
01120 <span class="preprocessor">#if wxUSE_UNICODE</span>
01121 <span class="preprocessor"></span>
01122 <span class="comment">// Always use wxString based hashmap with unicode</span>
01123 WX_DECLARE_STRING_HASH_MAP_WITH_DECL( wxPGProperty*, wxPGHashMapProperty, <span class="keyword">class</span> WXDLLIMPEXP_PG );
01124 <span class="preprocessor"># define wxPGNameStr            const wxString&amp;</span>
01125 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)      STR</span>
01126 <span class="preprocessor"></span>
01127 WX_DECLARE_STRING_HASH_MAP_WITH_DECL( wxPGValueType*, wxPGDictValClassBase, <span class="keyword">class</span> WXDLLIMPEXP_PG );
01128 
01129 <span class="preprocessor">#else</span>
01130 <span class="preprocessor"></span>
01131 WX_DECLARE_HASH_MAP_WITH_DECL( wxChar*,         <span class="comment">// type of the keys</span>
01132                      wxPGProperty*,         <span class="comment">// type of the values</span>
01133                      wxStringHash,          <span class="comment">// hasher</span>
01134                      wxStringEqual,         <span class="comment">// key equality predicate</span>
01135                      wxPGHashMapProperty,   <span class="comment">// name of the class</span>
01136                      <span class="keyword">class</span> WXDLLIMPEXP_PG );
01137 
01138 <span class="preprocessor"># define wxPGNameStr         const wxChar*       // Should be same as hashmap type</span>
01139 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)   ((char * const)STR.c_str())</span>
01140 <span class="preprocessor"></span>
01141 <span class="preprocessor">#endif</span>
01142 <span class="preprocessor"></span>
01143 <span class="comment">// -----------------------------------------------------------------------</span>
01144 
01145 <span class="keyword">union </span>wxPGVariantUnion
01146 {
01147     <span class="keywordtype">long</span>        m_long;
01148     <span class="keywordtype">void</span>*       m_ptr;
01149     <span class="keywordtype">bool</span>        m_bool;
01150 };
01151 
01152 <span class="comment">// Very simple value wrapper.</span>
01153 <span class="keyword">class </span>wxPGVariant
01154 {
01155 <span class="keyword">public</span>:
01156 
01158     wxPGVariant ()
01159     {
01160         m_v.m_ptr = (<span class="keywordtype">void</span>*)NULL;
01161     }
01163     wxPGVariant ( <span class="keywordtype">long</span> v_long )
01164     {
01165         m_v.m_long = v_long;
01166     }
01168     wxPGVariant ( <span class="keywordtype">int</span> v_long )
01169     {
01170         m_v.m_long = v_long;
01171     }
01173     wxPGVariant ( <span class="keywordtype">bool</span> value )
01174     {
01175         m_v.m_bool = value;
01176     }
01178     wxPGVariant ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; v_ptr )
01179     {
01180         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01181     }
01183     wxPGVariant ( <span class="keyword">const</span> wxString&amp; v_ptr )
01184     {
01185         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01186     }
01188     wxPGVariant ( <span class="keyword">const</span> wxArrayString&amp; v_ptr )
01189     {
01190         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01191     }
01193     wxPGVariant ( <span class="keyword">const</span> wxObject&amp; v_ptr )
01194     {
01195         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01196     }
01198     wxPGVariant ( <span class="keyword">const</span> wxObject* v_ptr )
01199     {
01200         m_v.m_ptr = (<span class="keywordtype">void</span>*)v_ptr;
01201     }
01203     wxPGVariant ( <span class="keywordtype">void</span>* v_ptr )
01204     {
01205         m_v.m_ptr = v_ptr;
01206     }
01207 
01209     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetLong ()<span class="keyword"> const</span>
01210 <span class="keyword">    </span>{
01211         <span class="keywordflow">return</span> m_v.m_long;
01212     }
01214     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetBool ()<span class="keyword"> const</span>
01215 <span class="keyword">    </span>{
01216         <span class="keywordflow">return</span> m_v.m_bool;
01217     }
01219     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetDouble ()<span class="keyword"> const</span>
01220 <span class="keyword">    </span>{
01221         <span class="keywordflow">return</span> *((<span class="keywordtype">double</span>*)m_v.m_ptr);
01222     }
01224     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetString ()<span class="keyword"> const</span>
01225 <span class="keyword">    </span>{
01226         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxString*)m_v.m_ptr);
01227     }
01229     <span class="keyword">inline</span> wxArrayString&amp; GetArrayString ()<span class="keyword"> const</span>
01230 <span class="keyword">    </span>{
01231         wxArrayString* temp = (wxArrayString*)m_v.m_ptr;
01232         <span class="keywordflow">return</span> *temp;
01233     }
01234 
01235     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject&amp; GetWxObject()<span class="keyword"> const</span>
01236 <span class="keyword">    </span>{
01237         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxObject*)m_v.m_ptr);
01238     }
01239 
01240     <span class="keyword">inline</span> wxObject* GetWxObjectPtr()<span class="keyword"> const</span>
01241 <span class="keyword">    </span>{
01242         <span class="keywordflow">return</span> (wxObject*)m_v.m_ptr;
01243     }
01244 
01246     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetVoidPtr ()<span class="keyword"> const</span>
01247 <span class="keyword">    </span>{
01248         <span class="keywordflow">return</span> m_v.m_ptr;
01249     }
01250 
01252     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetRawLong ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_long; }
01253 
01255     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetRawPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_ptr; }
01256 
01257 <span class="preprocessor">#undef wxPG_ASSERT_VARIANT_GET</span>
01258 <span class="preprocessor"></span>
01260     wxPGVariantUnion          m_v;
01261 };
01262 
01263 <span class="preprocessor">#define wxPGVariantToString(A)      A.GetString()</span>
01264 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToLong(A)        A.GetLong()</span>
01265 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToBool(A)        A.GetBool()</span>
01266 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToDouble(A)      A.GetDouble()</span>
01267 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToArrayString(A) A.GetArrayString()</span>
01268 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObject(A)        A.GetWxObject()</span>
01269 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObjectPtr(A,B)   wxDynamicCast((wxObject*)A.GetRawPtr(),B);</span>
01270 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToVoidPtr(A)     A.GetVoidPtr()</span>
01271 <span class="preprocessor"></span>
01272 <span class="preprocessor">#define wxPGVariantFromString(A)        A</span>
01273 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromLong(A)          A</span>
01274 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromDouble(A)        A</span>
01275 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromArrayString(A)   A</span>
01276 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromBool(A)          A</span>
01277 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromWxObject(A)      *((const wxObject*)A)</span>
01278 <span class="preprocessor"></span>
01279 <span class="comment">// -----------------------------------------------------------------------</span>
01280 
01281 <span class="preprocessor">#if !wxPG_EMBED_VARIANT</span>
<a name="l01282"></a><a class="code" href="classwxPGProperty.htm#a5">01282</a> <span class="preprocessor"></span><span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#a5">wxPGProperty::GetValueAsVariant</a> ()<span class="keyword"> const</span>
01283 <span class="keyword"></span>{
01284     wxPGVariant value = <a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a>();
01285     <span class="keyword">const</span> wxPGValueType* typeclass = <a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>();
01286     wxASSERT_MSG ( typeclass, wxT(<span class="stringliteral">"Did you forgot to use wxPG_INIT_REQUIRED_TYPE(T) in constructor?"</span>) );
01287     <span class="keywordflow">return</span> typeclass-&gt;<a class="code" href="classwxPGValueType.htm#a5">GenerateVariant</a>(value,m_name);
01288 }
01289 <span class="preprocessor">#endif</span>
01290 <span class="preprocessor"></span>
01291 <span class="comment">// -----------------------------------------------------------------------</span>
01292 
<a name="l01298"></a><a class="code" href="classwxPGPropertyWithChildren.htm">01298</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren : <span class="keyword">public</span> wxPGProperty
01299 {
01300     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
01301     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01302     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01303     <span class="comment">//_WX_PG_DECLARE_PROPERTY_CLASS(wxPGPropertyWithChildren)</span>
01304 <span class="keyword">public</span>:
01305 
01307     wxPGPropertyWithChildren();
01308 
01313     wxPGPropertyWithChildren( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01314 
01316     <span class="keyword">virtual</span> ~wxPGPropertyWithChildren();
01317 
01318     <span class="comment">//virtual int GetParentingType() const;</span>
01319 
01323     <span class="comment">// Advanced version that gives property list and index to this item</span>
01324     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
01325 
01329     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
01330 
01333     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshChildren();
01334 
01338     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ChildChanged ( wxPGProperty* p );
01339 
<a name="l01341"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a7">01341</a>     <span class="keyword">inline</span> size_t GetCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.GetCount(); }
01342 
<a name="l01344"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a8">01344</a>     <span class="keyword">inline</span> wxPGProperty* Item ( size_t i )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Item(i); }
01345 
<a name="l01347"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a9">01347</a>     <span class="keyword">inline</span> wxPGProperty* Last ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Last(); }
01348 
<a name="l01350"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a10">01350</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> Index ( <span class="keyword">const</span> wxPGProperty* p )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.Index((<span class="keywordtype">void</span>*)p); }
01351 
01353     <span class="keywordtype">void</span> Empty();
01354 
01355     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsExpanded()<span class="keyword"> const</span>
01356 <span class="keyword">    </span>{
01357         <span class="keywordflow">return</span> ( m_expanded &gt; 0 ) ? TRUE : FALSE;
01358     }
01359 
<a name="l01360"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a13">01360</a>     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#a19">GetParentState</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentState; }
01361 
01362     <span class="comment">// Puts correct indexes to children</span>
01363     <span class="keywordtype">void</span> FixIndexesOfChildren ( size_t starthere = 0 );
01364 
01365     wxPGProperty* GetItemAtY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lh );
01366 
01367     <span class="keywordtype">void</span> AddChild ( wxPGProperty* prop, <span class="keywordtype">int</span> index = -1, <span class="keywordtype">bool</span> correct_mode = TRUE );
01368 
01369     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetParentState ( wxPropertyGridState* pstate ) { m_parentState = pstate; }
01370 
01371 <span class="keyword">protected</span>:
01372 
01373     wxPropertyGridState*    m_parentState;
01374 
01375     wxPGArrayProperty   m_children;
01376     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_expanded;
01377 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01378 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_ctIndex; <span class="comment">// index in category table, 0xFF if not category</span>
01379 <span class="preprocessor">#endif</span>
01380 <span class="preprocessor"></span>};
01381 
01382 <span class="comment">// -----------------------------------------------------------------------</span>
01383 
<a name="l01388"></a><a class="code" href="classwxPGRootPropertyClass.htm">01388</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGRootPropertyClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01389 {
01390     WX_PG_DECLARE_PROPERTY_CLASS()
01391 <span class="keyword">public</span>:
01392 
01394     wxPGRootPropertyClass();
01395     <span class="keyword">virtual</span> ~wxPGRootPropertyClass();
01396 
01398     <span class="comment">//virtual int GetParentingType() const;</span>
01399 
01400 <span class="keyword">protected</span>:
01401 };
01402 
01403 <span class="comment">// -----------------------------------------------------------------------</span>
01404 
<a name="l01409"></a><a class="code" href="classwxPropertyCategoryClass.htm">01409</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyCategoryClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01410 {
01411     WX_PG_DECLARE_PROPERTY_CLASS()
01412 <span class="keyword">public</span>:
01413 
01415     wxPropertyCategoryClass();
01416 
01424     wxPropertyCategoryClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
01425     ~wxPropertyCategoryClass();
01426 
01428     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a3">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01429 
01430     <span class="comment">//virtual int GetParentingType() const;</span>
01431 
01432     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetTextExtent()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_textExtent; }
01433 
01434     <span class="keywordtype">void</span> CalculateTextExtent ( wxWindow* wnd, wxFont&amp; font );
01435 
01436 <span class="keyword">protected</span>:
01437     <span class="keywordtype">int</span> m_textExtent; <span class="comment">// pre-calculated length of text</span>
01438 };
01439 
01440 <span class="comment">// -----------------------------------------------------------------------</span>
01441 
<a name="l01446"></a><a class="code" href="classwxPGConstants.htm">01446</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGConstants
01447 {
01448 <span class="keyword">public</span>:
01449     
01451     wxPGConstants();
01452 
01454     wxPGConstants( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01455 
01459     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01460 
01462     <span class="keywordtype">void</span> Add ( wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL );
01463 
<a name="l01465"></a><a class="code" href="classwxPGConstants.htm#a4">01465</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Add ( wxArrayString&amp; arr, <span class="keyword">const</span> wxArrayInt&amp; arrint )
01466     {
01467         Add ( arr, (<span class="keyword">const</span> <span class="keywordtype">long</span>*)(&amp;arrint.Item(0)) );
01468     }
01469 
01471     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar* label, <span class="keywordtype">long</span> value = -1 );
01472 
<a name="l01474"></a><a class="code" href="classwxPGConstants.htm#a6">01474</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 )
01475     {
01476         Free();
01477         Add(labels,values,itemcount);
01478     }
01479 
<a name="l01481"></a><a class="code" href="classwxPGConstants.htm#a7">01481</a>     <span class="keywordtype">void</span> Set ( wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL )
01482     {
01483         Free();
01484         Add(arr,values);
01485     }
01486 
01487     <span class="keyword">const</span> wxChar** GetStrArrBase () { <span class="keywordflow">return</span> (<span class="keyword">const</span> wxChar**)(&amp;m_arrLabels.Item(0)); }
01488     <span class="keyword">const</span> <span class="keywordtype">long</span>* GetIntArrBase ()
01489     {
01490         <span class="keywordflow">if</span> ( m_arrValues.GetCount() &lt; 1 )
01491             <span class="keywordflow">return</span> NULL;
01492         <span class="keywordflow">return</span> (<span class="keyword">const</span> <span class="keywordtype">long</span>*)(&amp;m_arrValues.Item(0));
01493     }
01494     size_t GetCount () { <span class="keywordflow">return</span> m_arrLabels.GetCount(); }
01495 
01497     ~wxPGConstants();
01498 
01499 <span class="keyword">protected</span>:
01500 
01501     wxArrayString   m_arrLabels;
01502     wxArrayLong     m_arrValues;
01503 
01504     <span class="keywordtype">void</span> Init () { }
01505     <span class="keywordtype">void</span> Free ();
01506 
01507 };
01508 
01509 <span class="comment">// -----------------------------------------------------------------------</span>
01510 <span class="comment">// Property declaration.</span>
01511 
01512 <span class="preprocessor">#define wxPG_CONSTFUNC(PROP) PROP</span>
01513 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_PROPCLASS(PROP) PROP##Class</span>
01514 <span class="preprocessor"></span>
01515 <span class="comment">// Macro based constructor.</span>
01516 <span class="preprocessor">#define wxPG_NEWPROPERTY(PROP,LABEL,NAME,VALUE) wx##PROP##Property(LABEL,NAME,VALUE)</span>
01517 <span class="preprocessor"></span>
01518 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,VALARG,DEFVAL,DECL) \</span>
01519 <span class="preprocessor">    extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL );</span>
01520 <span class="preprocessor"></span>
01521 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY(NAME,VALARG,DEFVAL) \</span>
01522 <span class="preprocessor">    extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL );</span>
01523 <span class="preprocessor"></span>
01524 <span class="comment">//</span>
01525 <span class="comment">// Specific macro-based declarations.</span>
01526 <span class="comment">//</span>
01527 
01528 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
01529 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString );</span>
01530 <span class="preprocessor"></span>
01531 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY(NAME) \</span>
01532 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString );</span>
01533 <span class="preprocessor"></span>
01534 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY_WITH_DECL(NAME,DECL) \</span>
01535 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,long,-1,DECL)</span>
01536 <span class="preprocessor"></span>
01537 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(NAME) \</span>
01538 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,long,-1)</span>
01539 <span class="preprocessor"></span>
01540 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY_WITH_DECL(NAME,DECL) \</span>
01541 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,int,-1,DECL)</span>
01542 <span class="preprocessor"></span>
01543 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY(NAME) \</span>
01544 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,int,-1)</span>
01545 <span class="preprocessor"></span>
01546 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
01547 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() );</span>
01548 <span class="preprocessor"></span>
01549 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY(NAME) \</span>
01550 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() );</span>
01551 <span class="preprocessor"></span>
01552 <span class="comment">// Declare basic property classes.</span>
01553 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
01554 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxIntProperty,<span class="keywordtype">long</span>,0,WXDLLIMPEXP_PG)
01555 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFloatProperty,<span class="keywordtype">double</span>,0.0,WXDLLIMPEXP_PG)
01556 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxBoolProperty,<span class="keywordtype">bool</span>,FALSE,WXDLLIMPEXP_PG)
01557 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxLongStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
01558 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFileProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
01559 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxArrayStringProperty,<span class="keyword">const</span> wxArrayString&amp;,wxArrayString(),WXDLLIMPEXP_PG)
01560 
01561 WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(wxDirProperty,WXDLLIMPEXP_PG)
01562 
01563 <span class="comment">// Enum and Flags Properties require special attention.</span>
01564 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels,
01565     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
01566 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
01567     wxPGConstants&amp; constants, <span class="keywordtype">int</span> value = 0 );
01568 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels,
01569     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
01570 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
01571     wxPGConstants&amp; constants, <span class="keywordtype">int</span> value = 0 );
01572 
01573 <span class="comment">// wxParentProperty doesn't have value argument.</span>
01574 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxParentProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
01575 
01576 <span class="comment">// wxPropertyCategory doesn't have value argument.</span>
01577 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxPropertyCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
01578 
01579 <span class="preprocessor">#ifdef __WXDEBUG__</span>
01580 <span class="preprocessor"></span><span class="keyword">inline</span> wxObject* wxPG_VariantToWxObject( wxVariant&amp; variant, wxClassInfo* classInfo )
01581 #<span class="keywordflow">else</span>
01582 <span class="keyword">inline</span> wxObject* wxPG_VariantToWxObject( wxVariant&amp; variant, wxClassInfo* )
01583 #endif
01584 {
01585     wxASSERT ( variant.GetType() == classInfo-&gt;GetClassName() );
01586     <span class="keywordflow">return</span> (wxObject*) ((wxPGVariantDataWxObj*)variant.GetData())-&gt;GetValuePtr();
01587 }
01588 
01589 <span class="preprocessor">#define WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) (CLASSNAME*)wxPG_VariantToWxObject(VARIANT,CLASSINFO(CLASSNAME))</span>
01590 <span class="preprocessor"></span>
01591 <span class="comment">// -----------------------------------------------------------------------</span>
01592 
01598 <span class="comment">// BM_STATE</span>
<a name="l01599"></a><a class="code" href="classwxPropertyGridState.htm">01599</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridState
01600 {
01601     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
01602     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01603     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
01604 <span class="keyword">public</span>:
01605 
01607     wxPropertyGridState();
01608 
01610     ~wxPropertyGridState();
01611 
01613     wxPGId Append ( wxPGProperty* property );
01614 
01615     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGPropertyWithChildren* pwc, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
01616     {
01617         wxPGProperty* p = NewProperty(label,propname,value);
01618         <span class="keywordflow">if</span> ( p ) <span class="keywordflow">return</span> Insert(pwc,-1,p);
01619         <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
01620     }
01621 
01623     wxPGId GetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
01624 
01626     <span class="keywordtype">void</span> Clear ();
01627 
01628     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGProperty* p );
01629 
01630     <span class="keyword">static</span> <span class="keywordtype">void</span> ClearPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
01631     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
01632 
01633     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGProperty* p );
01634 
01635     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
01636 
01637     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
01638 
01639     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
01640 
01642     <span class="keywordtype">bool</span> EnableProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> enable );
01643 
01644     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
01645 
01646     <span class="keywordtype">void</span> ExpandAll ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> do_expand );
01647 
<a name="l01649"></a><a class="code" href="classwxPropertyGridState.htm#a14">01649</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
01650 <span class="keyword">    </span>{
01651         wxPGProperty* p = (wxPGProperty*) NULL;
01652         <span class="keywordflow">if</span> ( m_properties-&gt;GetCount() )
01653             p = m_properties-&gt;Item(0);
01654         <span class="keywordflow">return</span> wxPGIdGen(p);
01655     }
01656 
01657     wxPGId GetFirstCategory () <span class="keyword">const</span>;
01658 
01659     wxPGId GetFirstProperty () <span class="keyword">const</span>;
01660 
01661     wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
01662 
01663     wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
01664 
01665     <span class="keyword">static</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> );
01666 
01667     <span class="keyword">static</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> );
01668 
01669     wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
01670 
01671     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name, wxPGPropertyWithChildren* parent  = (wxPGPropertyWithChildren*) NULL ) <span class="keyword">const</span>;
01672 
01673     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname, wxPGId baseparent, <span class="keywordtype">long</span> flags ) <span class="keyword">const</span>;
01674 
01676     wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* property );
01677 
01678     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsDisplayed() <span class="keyword">const</span>;
01679 
01680     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsInNonCatMode()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">bool</span>)(m_properties == m_abcArray); }
01681 
01683     <span class="keywordtype">void</span> InitNonCatMode ();
01684 
01685     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGProperty* p, <span class="keywordtype">bool</span> limit = TRUE );
01686 
01692     wxPGProperty* NewProperty ( <span class="keyword">const</span> wxString &amp;label, <span class="keyword">const</span> wxString &amp;name, wxVariant&amp; value ) <span class="keyword">const</span>;
01693 
01694     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGProperty* p, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags );
01695 
01696     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
01697 
01698     <span class="keywordtype">void</span> SetPropVal( wxPGProperty* p, wxPGVariant value );
01699 
01700     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
01701 
01702     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
01703 
01704     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; value );
01705 
01706     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxVariant&amp; value );
01707 
01708     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxObject* value );
01709 
<a name="l01711"></a><a class="code" href="classwxPropertyGridState.htm#a35">01711</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">long</span> value )
01712     {
01713         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
01714     }
<a name="l01716"></a><a class="code" href="classwxPropertyGridState.htm#a36">01716</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">int</span> value )
01717     {
01718         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
01719     }
<a name="l01721"></a><a class="code" href="classwxPropertyGridState.htm#a37">01721</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">double</span> value )
01722     {
01723         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
01724     }
<a name="l01726"></a><a class="code" href="classwxPropertyGridState.htm#a38">01726</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">bool</span> value )
01727     {
01728         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
01729     }
<a name="l01731"></a><a class="code" href="classwxPropertyGridState.htm#a39">01731</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayString&amp; value )
01732     {
01733         SetPropertyValue ( p, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
01734     }
<a name="l01736"></a><a class="code" href="classwxPropertyGridState.htm#a40">01736</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">void</span>* value )
01737     {
01738         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
01739     }
<a name="l01741"></a><a class="code" href="classwxPropertyGridState.htm#a41">01741</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPoint&amp; value )
01742     {
01743         wxASSERT ( p );
01744         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),) == 0 );</span>
01745         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
01746         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
01747     }
<a name="l01749"></a><a class="code" href="classwxPropertyGridState.htm#a42">01749</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxSize&amp; value )
01750     {
01751         wxASSERT ( p );
01752         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
01753         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
01754         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
01755     }
<a name="l01757"></a><a class="code" href="classwxPropertyGridState.htm#a43">01757</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayInt&amp; value )
01758     {
01759         wxASSERT ( p );
01760         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
01761         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
01762         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
01763     }
01764     
01765     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category );
01766 
01767     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGProperty* p );
01768 
01769     <span class="keywordtype">void</span> Sort ( wxPGProperty* p );
01770     <span class="keywordtype">void</span> Sort ();
01771 
01772 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
01773 <span class="preprocessor"></span><span class="keyword">protected</span>:
01774     
01775     <span class="keywordtype">int</span> PrepareToAddItem ( wxPGProperty* property, wxPGPropertyWithChildren* scheduled_parent );
01776 
01778     wxPropertyGrid*             m_pPropGrid;
01779 
01781     wxPGPropertyWithChildren*   m_properties;
01782 
01784     wxPGRootPropertyClass            m_regularArray;
01785 
01787     wxPGRootPropertyClass*           m_abcArray;
01788 
01790     wxPGHashMapProperty         m_dictName;
01791 
01793     wxPropertyCategoryClass*         m_currentCategory;
01794 
01796     wxPGProperty*               m_selected;
01797 
01799     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_lastCaptionBottomnest;
01804     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_itemsAdded;
01805 
01807     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_anyModified;
01808 
01809 <span class="preprocessor">#endif</span>
01810 <span class="preprocessor"></span>};
01811 
01812 <span class="comment">// -----------------------------------------------------------------------</span>
01813 
01814 <span class="comment">// Internal flags</span>
01815 <span class="preprocessor">#define wxPG_FL_INITIALIZED                 0x0001</span>
01816 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ACTIVATION_BY_CLICK         0x0002 // Set when creating editor controls if it was clicked on.</span>
01817 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DONT_CENTER_SPLITTER        0x0004</span>
01818 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_FOCUSED                     0x0008</span>
01819 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_CAPTURED              0x0010</span>
01820 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_INSIDE                0x0020</span>
01821 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_VALUE_MODIFIED              0x0040</span>
01822 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_PRIMARY_FILLS_ENTIRE        0x0080 // don't clear background of m_wndPrimary</span>
01823 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CUR_USES_CUSTOM_IMAGE       0x0100 // currently active editor uses custom image</span>
01824 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_HIDE_STATE                  0x0200 // set when hideable properties should be hidden</span>
01825 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLED                    0x0400</span>
01826 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ADDING_HIDEABLES            0x0800 // set when all added/inserted properties get hideable flag</span>
01827 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_NOSTATUSBARHELP             0x1000 // Disables showing help strings on statusbar.</span>
01828 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CREATEDSTATE                0x2000 // Marks that we created the state, so we have to destroy it too.</span>
01829 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLBAR_DETECTED          0x4000 // Set if scrollbar's existence was detected in last onresize.</span>
01830 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DESC_REFRESH_REQUIRED       0x8000 // Set if wxPGMan requires redrawing of description text box.</span>
01831 <span class="preprocessor"></span>
01832 <span class="comment">// -----------------------------------------------------------------------</span>
01833 
01834 <span class="preprocessor">#define wxPG_USE_STATE  m_pState</span>
01835 <span class="preprocessor"></span>
<a name="l01895"></a><a class="code" href="classwxPropertyGrid.htm">01895</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGrid : <span class="keyword">public</span> wxScrolledWindow
01896 {
01897     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01898     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
01899 
01900         DECLARE_CLASS(wxPropertyGrid)
01901 
01902 <span class="keyword">public</span>:
01906     wxPropertyGrid();
01907 
01912     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
01913                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
01914                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
01915                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
01916                                 <span class="comment">//const wxValidator &amp;validator = wxDefaultValidator,</span>
01917                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
01918 
01920     <span class="keyword">virtual</span> ~wxPropertyGrid();
01921 
01923     <span class="comment">//inline wxPGId Add ( wxPGProperty* property ) { return Append ( property ); }</span>
01924 
01936     wxPGId Append ( wxPGProperty* property );
01937 
01938     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
01939     {
01940         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
01941     }
01942 
01943 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
01944 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
01945     {
01946         <span class="keywordflow">return</span> Append ( wxStringProperty(label,name,value) );
01947     }
01948 
01949     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
01950     {
01951         <span class="keywordflow">return</span> Append ( wxIntProperty(label,name,value) );
01952     }
01953 
01954     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
01955     {
01956         <span class="keywordflow">return</span> Append ( wxFloatProperty(label,name,value) );
01957     }
01958 
01959     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
01960     {
01961         <span class="keywordflow">return</span> Append ( wxBoolProperty(label,name,value) );
01962     }
01963 <span class="preprocessor">#endif</span>
01964 <span class="preprocessor"></span>
01965     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, wxPGProperty* property )
01966     {
01967         <span class="keywordflow">return</span> Insert(<span class="keywordtype">id</span>,-1,property);
01968     }
01969 
01970     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, wxPGProperty* property )
01971     {
01972         <span class="keywordflow">return</span> Insert(GetPropertyByName(name),-1,property);
01973     }
01974 
01975     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
01976     {
01977         wxPGProperty* p = m_pState-&gt;NewProperty(label,propname,value);
01978         <span class="keywordflow">if</span> ( p )
01979             <span class="keywordflow">return</span> Insert(wxPGIdToPtr(<span class="keywordtype">id</span>),-1,p);
01980         <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
01981     }
01982 
01983     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
01984     {
01985         wxPGProperty* p = m_pState-&gt;NewProperty(label,propname,value);
01986         <span class="keywordflow">if</span> ( p )
01987             <span class="keywordflow">return</span> Insert(wxPGIdToPtr(GetPropertyByName(name)),-1,p);
01988         <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
01989     }
01990 
01996     <span class="keyword">static</span> <span class="keywordtype">void</span> AutoGetTranslation ( <span class="keywordtype">bool</span> enable );
01997 
02001     <span class="keywordtype">void</span> CenterSplitter ( <span class="keywordtype">bool</span> enable_auto_centering );
02002 
02007     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
02008                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
02009                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
02010                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
02011                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
02012 
02016     <span class="keywordtype">void</span> Clear ();
02017 
<a name="l02020"></a><a class="code" href="classwxPropertyGrid.htm#a16">02020</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> )
02021     {
02022         m_pState-&gt;ClearModifiedStatus(wxPGIdToPtr(<span class="keywordtype">id</span>));
02023     }
02024 
<a name="l02027"></a><a class="code" href="classwxPropertyGrid.htm#a17">02027</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
02028     {
02029         m_pState-&gt;ClearModifiedStatus(m_pState-&gt;m_properties);
02030         m_pState-&gt;m_anyModified = FALSE;
02031     }
02032 
02034     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGId <span class="keywordtype">id</span> );
02035 
<a name="l02037"></a><a class="code" href="classwxPropertyGrid.htm#a19">02037</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGNameStr name )
02038     {
02039         <span class="keywordflow">return</span> ClearPropertyValue ( GetPropertyByName(name) );
02040     }
02041 
02043     <span class="keywordtype">void</span> ClearSelection ();
02044 
<a name="l02048"></a><a class="code" href="classwxPropertyGrid.htm#a21">02048</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGId p ) { <span class="keywordflow">return</span> Collapse ( &amp;GetPropertyById(p)); }
02049 
<a name="l02053"></a><a class="code" href="classwxPropertyGrid.htm#a22">02053</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name )
02054     {
02055         <span class="keywordflow">return</span> Collapse ( wxPGIdToPtr ( GetPropertyByName(name) ) );
02056     }
02057 
<a name="l02060"></a><a class="code" href="classwxPropertyGrid.htm#a23">02060</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll () { m_pState-&gt;ExpandAll(0); }
02061 
02063     <span class="keywordtype">void</span> Compact( <span class="keywordtype">bool</span> compact );
02064 
<a name="l02066"></a><a class="code" href="classwxPropertyGrid.htm#a25">02066</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> )
02067     {
02068         Delete ( wxPGIdToPtr(<span class="keywordtype">id</span>) );
02069     }
02070 
<a name="l02072"></a><a class="code" href="classwxPropertyGrid.htm#a26">02072</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGNameStr name )
02073     {
02074         Delete ( wxPGIdToPtr ( GetPropertyByName(name) ) );
02075     }
02076 
<a name="l02078"></a><a class="code" href="classwxPropertyGrid.htm#a27">02078</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
02079 
<a name="l02081"></a><a class="code" href="classwxPropertyGrid.htm#a28">02081</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
02082 
<a name="l02084"></a><a class="code" href="classwxPropertyGrid.htm#a29">02084</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
02085 
<a name="l02087"></a><a class="code" href="classwxPropertyGrid.htm#a30">02087</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
02088 
02090     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
02091 
<a name="l02093"></a><a class="code" href="classwxPropertyGrid.htm#a32">02093</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Enable ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE )
02094     {
02095         <span class="keywordflow">return</span> EnableProperty ( <span class="keywordtype">id</span>, enable );
02096     }
02097 
<a name="l02099"></a><a class="code" href="classwxPropertyGrid.htm#a33">02099</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Enable ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE )
02100     {
02101         <span class="keywordflow">return</span> EnableProperty ( name, enable );
02102     }
02103 
02105     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
02106 
<a name="l02108"></a><a class="code" href="classwxPropertyGrid.htm#a35">02108</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE )
02109     {
02110         <span class="keywordflow">return</span> EnableProperty ( GetPropertyByName(name), enable );
02111     }
02112 
02116     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> );
02117 
<a name="l02121"></a><a class="code" href="classwxPropertyGrid.htm#a37">02121</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name ) 
02122     {
02123         <span class="keywordflow">return</span> EnsureVisible ( GetPropertyByName(name) );
02124     }
02125 
<a name="l02129"></a><a class="code" href="classwxPropertyGrid.htm#a38">02129</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> Expand ( &amp;GetPropertyById(<span class="keywordtype">id</span>) ); }
02130 
<a name="l02134"></a><a class="code" href="classwxPropertyGrid.htm#a39">02134</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGNameStr name )
02135     {
02136         <span class="keywordflow">return</span> Expand ( wxPGIdToPtr ( GetPropertyByName(name) ) );
02137     }
02138 
<a name="l02141"></a><a class="code" href="classwxPropertyGrid.htm#a40">02141</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ExpandAll () { m_pState-&gt;ExpandAll(1); }
02142 
<a name="l02151"></a><a class="code" href="classwxPropertyGrid.htm#a41">02151</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
02152         wxPGId baseparent = wxPGIdGen((wxPGProperty*)NULL), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
02153 <span class="keyword">    </span>{
02154         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyValues(listname,baseparent,flags);
02155     }
02156 
02157     <span class="keyword">inline</span> wxFont* GetCaptionFont() { <span class="keywordflow">return</span> &amp;m_captionFont; }
02158 
<a name="l02160"></a><a class="code" href="classwxPropertyGrid.htm#a43">02160</a>     <span class="keyword">inline</span> wxColour GetCaptionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapFore; }
02161 
<a name="l02163"></a><a class="code" href="classwxPropertyGrid.htm#a44">02163</a>     <span class="keyword">inline</span> wxColour GetCellBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropBack; }
02164 
<a name="l02166"></a><a class="code" href="classwxPropertyGrid.htm#a45">02166</a>     <span class="keyword">inline</span> wxColour GetCellTextColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropFore; }
02167 
<a name="l02170"></a><a class="code" href="classwxPropertyGrid.htm#a46">02170</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
02171     {
02172         <span class="keywordflow">return</span> GetChildrenCount( wxPGIdGen(m_pState-&gt;m_properties) );
02173     }
02174 
<a name="l02176"></a><a class="code" href="classwxPropertyGrid.htm#a47">02176</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02177 <span class="keyword">    </span>{
02178         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02179         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetChildCount();
02180     }
02181 
<a name="l02183"></a><a class="code" href="classwxPropertyGrid.htm#a48">02183</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( GetPropertyByName(name) ); }
02184 
<a name="l02186"></a><a class="code" href="classwxPropertyGrid.htm#a49">02186</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
02187 <span class="keyword">    </span>{
02188         <span class="keywordflow">return</span> m_pState-&gt;GetFirst();
02189     }
02190 
<a name="l02196"></a><a class="code" href="classwxPropertyGrid.htm#a50">02196</a>     <span class="keyword">inline</span> wxPGId GetFirstVisible ()<span class="keyword"> const</span>
02197 <span class="keyword">    </span>{
02198         wxPGProperty* p = NULL;
02199         <span class="keywordflow">if</span> ( m_pState-&gt;m_properties-&gt;GetCount() )
02200         {
02201             p = m_pState-&gt;m_properties-&gt;Item(0);
02202             <span class="keywordflow">if</span> ( (m_iFlags &amp; wxPG_FL_HIDE_STATE) &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga3">wxPG_PROP_HIDEABLE</a> )
02203                 p = GetNeighbourItem ( p, TRUE, 1 );
02204         }
02205         <span class="keywordflow">return</span> wxPGIdGen(p);
02206     }
02207 
<a name="l02209"></a><a class="code" href="classwxPropertyGrid.htm#a51">02209</a>     <span class="keywordtype">int</span> GetFontHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fontHeight; }
02210 
<a name="l02214"></a><a class="code" href="classwxPropertyGrid.htm#a52">02214</a>     wxPropertyGrid* GetGrid() { <span class="keywordflow">return</span> <span class="keyword">this</span>; }
02215 
<a name="l02217"></a><a class="code" href="classwxPropertyGrid.htm#a53">02217</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
02218 <span class="keyword">    </span>{
02219         <span class="keywordflow">return</span> m_pState-&gt;GetFirstCategory ();
02220     }
02221 
<a name="l02227"></a><a class="code" href="classwxPropertyGrid.htm#a54">02227</a>     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGId parent )
02228     {
02229         wxASSERT ( wxPGIdIsOk(parent) );
02230         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
02231         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#a7">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
02232         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#a8">Item</a>(0));
02233     }
02234     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetFirstChild( GetPropertyByName(name) ); }
02235 
<a name="l02237"></a><a class="code" href="classwxPropertyGrid.htm#a56">02237</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()
02238     {
02239         <span class="keywordflow">return</span> m_pState-&gt;GetFirstProperty();
02240     }
02241 
<a name="l02245"></a><a class="code" href="classwxPropertyGrid.htm#a57">02245</a>     wxPGId GetItemAtY ( <span class="keywordtype">int</span> y ) { <span class="keywordflow">return</span> wxPGIdGen(DoGetItemAtY(y)); }
02246 
<a name="l02249"></a><a class="code" href="classwxPropertyGrid.htm#a58">02249</a>     <span class="keyword">inline</span> wxPGId GetLastProperty ()
02250     {
02251         <span class="keywordflow">if</span> ( !m_pState-&gt;m_properties-&gt;GetCount() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
02252         wxPGProperty* p = GetLastItem (FALSE, FALSE);
02253         <span class="keywordflow">if</span> ( p-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &gt; 0 )
02254             <span class="keywordflow">return</span> GetPrevProperty ( wxPGIdGen(p) );
02255         <span class="keywordflow">return</span> wxPGIdGen(p);
02256     }
02257 
<a name="l02262"></a><a class="code" href="classwxPropertyGrid.htm#a59">02262</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
02263     {
02264         wxASSERT ( wxPGIdIsOk(parent) );
02265         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
02266         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#a7">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
02267         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#a9">Last</a>());
02268     }
02269     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( GetPropertyByName(name) ); }
02270 
<a name="l02273"></a><a class="code" href="classwxPropertyGrid.htm#a61">02273</a>     <span class="keyword">inline</span> wxPGId GetLastVisible ()
02274     {
02275         <span class="keywordflow">return</span> wxPGIdGen ( GetLastItem (TRUE, TRUE) );
02276     }
02277 
<a name="l02279"></a><a class="code" href="classwxPropertyGrid.htm#a62">02279</a>     <span class="keyword">inline</span> wxColour GetLineColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colLine; }
02280 
<a name="l02284"></a><a class="code" href="classwxPropertyGrid.htm#a63">02284</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )
02285     {
02286         <span class="keywordflow">return</span> m_pState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
02287     }
02288 
<a name="l02290"></a><a class="code" href="classwxPropertyGrid.htm#a64">02290</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02291 <span class="keyword">    </span>{
02292         <span class="keywordflow">return</span> m_pState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
02293     }
02294 
<a name="l02296"></a><a class="code" href="classwxPropertyGrid.htm#a65">02296</a>     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> )
02297     {
02298         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(<span class="keywordtype">id</span>);
02299     }
02300     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGNameStr name )
02301     {
02302         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(GetPropertyByName(name));
02303     }
02304 
<a name="l02310"></a><a class="code" href="classwxPropertyGrid.htm#a67">02310</a>     <span class="keyword">inline</span> wxPGId GetNextVisible ( wxPGId property )<span class="keyword"> const</span>
02311 <span class="keyword">    </span>{
02312         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
02313             TRUE, 1 ) );
02314     }
02315 
<a name="l02319"></a><a class="code" href="classwxPropertyGrid.htm#a68">02319</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )
02320     {
02321         <span class="keywordflow">return</span> m_pState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
02322     }
02323 
<a name="l02325"></a><a class="code" href="classwxPropertyGrid.htm#a69">02325</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
02326     {
02327         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
02328     }
02329     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
02330     {
02331         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(GetPropertyByName(name));
02332     }
02333 
<a name="l02336"></a><a class="code" href="classwxPropertyGrid.htm#a71">02336</a>     <span class="keyword">inline</span> wxPGId GetPrevVisible ( wxPGId property )
02337     {
02338         wxASSERT ( wxPGIdIsOk(property) );
02339         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
02340             TRUE, -1 ) );
02341     }
02342 
<a name="l02346"></a><a class="code" href="classwxPropertyGrid.htm#a72">02346</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02347 <span class="keyword">    </span>{
02348         <span class="keywordflow">return</span> wxPGIdGen ( GetPropertyCategory ( wxPGIdToPtr(<span class="keywordtype">id</span>) ) );
02349     }
02350     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGNameStr name )
02351     {
02352         <span class="keywordflow">return</span> GetPropertyCategory ( GetPropertyByName(name) );
02353     }
02354 
<a name="l02356"></a><a class="code" href="classwxPropertyGrid.htm#a74">02356</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02357 <span class="keyword">    </span>{
02358         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClassName();
02359     }
02360 
<a name="l02362"></a><a class="code" href="classwxPropertyGrid.htm#a75">02362</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGNameStr name )<span class="keyword"> const</span>
02363 <span class="keyword">    </span>{
02364         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByNameWithAssert(name))-&gt;GetClassName();
02365     }
02366 
02368     wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02369     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
02370 <span class="keyword">    </span>{
02371         <span class="keywordflow">return</span> GetPropertyColour(GetPropertyByName(name));
02372     }
02373     
<a name="l02375"></a><a class="code" href="classwxPropertyGrid.htm#a78">02375</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02376 <span class="keyword">    </span>{
02377         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02378         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_helpString;
02379     }
02380 
<a name="l02382"></a><a class="code" href="classwxPropertyGrid.htm#a79">02382</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGNameStr name )<span class="keyword"> const</span>
02383 <span class="keyword">    </span>{
02384         <span class="keywordflow">return</span> GetPropertyHelpString(GetPropertyByNameWithAssert(name));
02385     }
02386 
<a name="l02388"></a><a class="code" href="classwxPropertyGrid.htm#a80">02388</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGId <span class="keywordtype">id</span> )
02389     {
02390         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02391         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetIndexInParent();
02392     }
02393 
<a name="l02395"></a><a class="code" href="classwxPropertyGrid.htm#a81">02395</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGNameStr name )
02396     {
02397         <span class="keywordflow">return</span> GetPropertyIndex ( GetPropertyByName(name) );
02398     }
02399 
<a name="l02401"></a><a class="code" href="classwxPropertyGrid.htm#a82">02401</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGId <span class="keywordtype">id</span> )
02402     {
02403         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02404         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_label;
02405     }
02406     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGNameStr name )
02407     {
02408         <span class="keywordflow">return</span> GetPropertyLabel ( GetPropertyByName(name) );
02409     }
02410 
<a name="l02412"></a><a class="code" href="classwxPropertyGrid.htm#a84">02412</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyName ( wxPGId <span class="keywordtype">id</span> )
02413     {
02414         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02415         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetName();
02416     }
02417 
<a name="l02419"></a><a class="code" href="classwxPropertyGrid.htm#a85">02419</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGId <span class="keywordtype">id</span> )
02420     {
02421         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02422         <span class="keywordflow">return</span> wxPGIdGen(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParent());
02423     }
02424 
<a name="l02426"></a><a class="code" href="classwxPropertyGrid.htm#a86">02426</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGNameStr name )
02427     {
02428         <span class="keywordflow">return</span> GetPropertyParent ( GetPropertyByName(name) );
02429     }
02430 
<a name="l02432"></a><a class="code" href="classwxPropertyGrid.htm#a87">02432</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority ( wxPGId <span class="keywordtype">id</span> )
02433     {
02434         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02435         <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#a28">IsFlagSet</a>(<a class="code" href="group__propflags.htm#ga3">wxPG_PROP_HIDEABLE</a>) )
02436             <span class="keywordflow">return</span> wxPG_LOW;
02437         <span class="keywordflow">return</span> wxPG_HIGH;
02438     }
02439 
02446 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02447 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02448 #<span class="keywordflow">else</span>    
<a name="l02449"></a><a class="code" href="classwxPropertyGrid.htm#a88">02449</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02450 #endif
02451     {
02452         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02453         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02454     }
02455 
02463 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02464 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGNameStr name )
02465 #<span class="keywordflow">else</span>    
<a name="l02466"></a><a class="code" href="classwxPropertyGrid.htm#a89">02466</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGNameStr name )
02467 #endif
02468     {
02469         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02470         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02471         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02472     }
02473 
02474     <span class="keyword">static</span> wxString GetPropertyValueAsString ( wxPGId <span class="keywordtype">id</span> );
02475     <span class="keyword">static</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGId <span class="keywordtype">id</span> );
02476     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(<span class="keywordtype">id</span>); }
02477     <span class="keyword">static</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGId <span class="keywordtype">id</span> );
02478     <span class="keyword">static</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGId <span class="keywordtype">id</span> );
02479     <span class="keyword">static</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGId <span class="keywordtype">id</span> );
02480     <span class="keyword">static</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGId <span class="keywordtype">id</span> );
02481     <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ( wxPGId <span class="keywordtype">id</span> );
02482     
02483     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGId <span class="keywordtype">id</span> )
02484     {
02485         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02486         wxASSERT ( p );
02487     
02488         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxPoint"</span>)) != 0 )
02489         {
02490             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxPoint"</span>));
02491             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)NULL);
02492         }
02493         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a>()));
02494     }
02495 
02496     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGId <span class="keywordtype">id</span> )
02497     {
02498         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02499         wxASSERT ( p );
02500 
02501         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxSize"</span>)) != 0 )
02502         {
02503             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxSize"</span>));
02504             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)NULL);
02505         }
02506         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a>()));
02507     }
02508 
02509     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGId <span class="keywordtype">id</span> )
02510     {
02511         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02512         wxASSERT ( p );
02513 
02514         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxArrayInt"</span>)) != 0 )
02515         {
02516             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxArrayInt"</span>));
02517             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)NULL);
02518         }
02519         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a>()));
02520     }
02521 
02522     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGNameStr name )<span class="keyword"> const</span>
02523 <span class="keyword">    </span>{
02524         <span class="keywordflow">return</span> GetPropertyValueAsString ( GetPropertyByName(name) );
02525     }
02526     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGNameStr name )<span class="keyword"> const</span>
02527 <span class="keyword">    </span>{
02528         <span class="keywordflow">return</span> GetPropertyValueAsLong ( GetPropertyByName(name) );
02529     }
02530     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGNameStr name )<span class="keyword"> const</span>
02531 <span class="keyword">    </span>{
02532         <span class="keywordflow">return</span> GetPropertyValueAsInt ( GetPropertyByName(name) );
02533     }
02534     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGNameStr name )<span class="keyword"> const</span>
02535 <span class="keyword">    </span>{
02536         <span class="keywordflow">return</span> GetPropertyValueAsBool ( GetPropertyByName(name) );
02537     }
02538     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGNameStr name )<span class="keyword"> const</span>
02539 <span class="keyword">    </span>{
02540         <span class="keywordflow">return</span> GetPropertyValueAsDouble ( GetPropertyByName(name) );
02541     }
02542     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGNameStr name )<span class="keyword"> const</span>
02543 <span class="keyword">    </span>{
02544         <span class="keywordflow">return</span> GetPropertyValueAsArrayString ( GetPropertyByName(name) );
02545     }
02546     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGNameStr name )<span class="keyword"> const</span>
02547 <span class="keyword">    </span>{
02548         <span class="keywordflow">return</span> GetPropertyValueAsWxObjectPtr ( GetPropertyByName(name) );
02549     }
02550     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGNameStr name )<span class="keyword"> const</span>
02551 <span class="keyword">    </span>{
02552         <span class="keywordflow">return</span> GetPropertyValueAsPoint ( GetPropertyByName(name) );
02553     }
02554     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGNameStr name )<span class="keyword"> const</span>
02555 <span class="keyword">    </span>{
02556         <span class="keywordflow">return</span> GetPropertyValueAsSize ( GetPropertyByName(name) );
02557     }
02558     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGNameStr name )<span class="keyword"> const</span>
02559 <span class="keyword">    </span>{
02560         <span class="keywordflow">return</span> GetPropertyValueAsArrayInt ( GetPropertyByName(name) );
02561     }
02562 
<a name="l02566"></a><a class="code" href="classwxPropertyGrid.htm#a100">02566</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGId <span class="keywordtype">id</span> )
02567     {
02568         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02569         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType();
02570     }
02571     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGNameStr name )
02572     {
02573         <span class="keywordflow">return</span> wxPGIdToPtr( GetPropertyByNameWithAssert(name) )-&gt;GetValueType();
02574     }
02575 
<a name="l02581"></a><a class="code" href="classwxPropertyGrid.htm#a102">02581</a>     <span class="keyword">inline</span> wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name )<span class="keyword"> const</span>
02582 <span class="keyword">    </span>{
02583         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyByLabel(name);
02584     }
02585 
<a name="l02590"></a><a class="code" href="classwxPropertyGrid.htm#a103">02590</a>     <span class="keyword">inline</span> wxPGId GetPropertyByName ( wxPGNameStr name )<span class="keyword"> const</span>
02591 <span class="keyword">    </span>{
02592         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyByName(name);
02593     }
02594 
02595     <span class="keyword">inline</span> wxPGId GetPropertyByNameWithAssert ( wxPGNameStr name )<span class="keyword"> const</span>
02596 <span class="keyword">    </span>{
02597         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02598         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02599         <span class="keywordflow">return</span> <span class="keywordtype">id</span>;
02600     }
02601 
<a name="l02605"></a><a class="code" href="classwxPropertyGrid.htm#a105">02605</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_pState-&gt;m_properties); }
02606 
<a name="l02608"></a><a class="code" href="classwxPropertyGrid.htm#a106">02608</a>     <span class="keywordtype">int</span> GetRowHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_lineHeight; }
02609 
02610     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> GetSelection(); }
02611 
<a name="l02613"></a><a class="code" href="classwxPropertyGrid.htm#a108">02613</a>     <span class="keyword">inline</span> wxPGId GetSelection ()<span class="keyword"> const</span>
02614 <span class="keyword">    </span>{
02615         <span class="keywordflow">return</span> wxPGIdGen(m_selected);
02616     }
02617 
<a name="l02619"></a><a class="code" href="classwxPropertyGrid.htm#a109">02619</a>     <span class="keyword">inline</span> wxColour GetSelectionBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelBack; }
02620 
<a name="l02622"></a><a class="code" href="classwxPropertyGrid.htm#a110">02622</a>     <span class="keyword">inline</span> wxColour GetSelectionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelFore; }
02623 
<a name="l02625"></a><a class="code" href="classwxPropertyGrid.htm#a111">02625</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSplitterPosition ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_splitterx; }
02626 
02627     <span class="keyword">inline</span> wxPropertyGridState* GetState()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pState; }
02628 
02632     <span class="comment">//wxPropertyGridState* GetCopyOfState() const;</span>
02633 
<a name="l02635"></a><a class="code" href="classwxPropertyGrid.htm#a113">02635</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetVerticalSpacing ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)m_vspacing; }
02636 
<a name="l02638"></a><a class="code" href="classwxPropertyGrid.htm#a114">02638</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasSelection()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((m_selected!=(wxPGProperty*)NULL)?TRUE:FALSE); }
02639 
<a name="l02641"></a><a class="code" href="classwxPropertyGrid.htm#a115">02641</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideLowPriority() { Compact ( TRUE ); }
02642 
02643 <span class="preprocessor">#if wxPG_INCLUDE_ADVPROPS</span>
02644 <span class="preprocessor"></span>
02648     <span class="keyword">static</span> <span class="keywordtype">void</span> InitAllTypeHandlers ();
02649 <span class="preprocessor">#else</span>
02650 <span class="preprocessor"></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> InitAllTypeHandlers () { }
02651 <span class="preprocessor">#endif</span>
02652 <span class="preprocessor"></span>
<a name="l02703"></a><a class="code" href="classwxPropertyGrid.htm#a116">02703</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId priorthis, wxPGProperty* newproperty )
02704     {
02705         wxPGId res = Insert ( wxPGIdToPtr( priorthis ), newproperty );
02706         DrawItems ( newproperty, (wxPGProperty*) NULL );
02707         <span class="keywordflow">return</span> res;
02708     }
<a name="l02710"></a><a class="code" href="classwxPropertyGrid.htm#a117">02710</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, wxPGProperty* newproperty )
02711     {
02712         wxPGId res = Insert ( wxPGIdToPtr ( GetPropertyByName(name) ), newproperty );
02713         DrawItems ( newproperty, (wxPGProperty*) NULL );
02714         <span class="keywordflow">return</span> res;
02715     }
02716 
<a name="l02718"></a><a class="code" href="classwxPropertyGrid.htm#a118">02718</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
02719     {
02720         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr (<span class="keywordtype">id</span>), index, newproperty );
02721         DrawItems ( newproperty, (wxPGProperty*) NULL );
02722         <span class="keywordflow">return</span> res;
02723     }
02724 
<a name="l02726"></a><a class="code" href="classwxPropertyGrid.htm#a119">02726</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
02727     {
02728         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr ( GetPropertyByName(name) ), index, newproperty );
02729         DrawItems ( newproperty, (wxPGProperty*) NULL );
02730         <span class="keywordflow">return</span> res;
02731     }
02732 
02733     <span class="keyword">inline</span> wxPGId InsertCategory ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
02734     {
02735         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
02736     }
02737 
02738 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
02739 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
02740     {
02741         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxStringProperty(label,name,value) );
02742     }
02743 
02744     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
02745     {
02746         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxIntProperty(label,name,value) );
02747     }
02748 
02749     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
02750     {
02751         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxFloatProperty(label,name,value) );
02752     }
02753 
02754     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
02755     {
02756         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxBoolProperty(label,name,value) );
02757     }
02758 <span class="preprocessor">#endif</span>
02759 <span class="preprocessor"></span>
<a name="l02761"></a><a class="code" href="classwxPropertyGrid.htm#a125">02761</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsAnyModified ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pState-&gt;m_anyModified&gt;0); }
02762 
<a name="l02764"></a><a class="code" href="classwxPropertyGrid.htm#a126">02764</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02765 <span class="keyword">    </span>{
02766         <span class="keywordflow">return</span> (!(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_flags &amp; <a class="code" href="group__propflags.htm#ga1">wxPG_PROP_DISABLED</a>))?TRUE:FALSE;
02767     }
02768 
<a name="l02770"></a><a class="code" href="classwxPropertyGrid.htm#a127">02770</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyEnabled(GetPropertyByName(name)); }
02771 
<a name="l02773"></a><a class="code" href="classwxPropertyGrid.htm#a128">02773</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_frozen&gt;0)?TRUE:FALSE; }
02774 
<a name="l02776"></a><a class="code" href="classwxPropertyGrid.htm#a129">02776</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestr )
02777     {
02778         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02779         <span class="keywordflow">return</span> (wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetTypeName(),typestr) == 0);
02780     }
02781 
<a name="l02783"></a><a class="code" href="classwxPropertyGrid.htm#a130">02783</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* valuetype )
02784     {
02785         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02786         <span class="keywordflow">return</span> ( wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType() == valuetype );
02787     }
02788 
<a name="l02790"></a><a class="code" href="classwxPropertyGrid.htm#a131">02790</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxClassInfo* classinfo )
02791     {
02792         <span class="keywordflow">return</span> IsPropertyValueType(<span class="keywordtype">id</span>,classinfo-&gt;GetClassName());
02793     }
02794 
<a name="l02796"></a><a class="code" href="classwxPropertyGrid.htm#a132">02796</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxChar* typestr )
02797     {
02798         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),typestr);
02799     }
02800 
<a name="l02802"></a><a class="code" href="classwxPropertyGrid.htm#a133">02802</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxPGValueType* valuetype )
02803     {
02804         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),valuetype);
02805     }
02806 
<a name="l02808"></a><a class="code" href="classwxPropertyGrid.htm#a134">02808</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxClassInfo* classinfo )
02809     {
02810         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),classinfo);
02811     }
02812 
<a name="l02814"></a><a class="code" href="classwxPropertyGrid.htm#a135">02814</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02815 <span class="keyword">    </span>{
02816         <span class="keywordflow">return</span> ( m_selected == wxPGIdToPtr( <span class="keywordtype">id</span> ) ) ? TRUE : FALSE;
02817     }
02818 
<a name="l02820"></a><a class="code" href="classwxPropertyGrid.htm#a136">02820</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertySelected(GetPropertyByName(name)); }
02821 
02825     <span class="keyword">static</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGId <span class="keywordtype">id</span> );
02826     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyExpanded(GetPropertyByName(name)); }
02827 
<a name="l02831"></a><a class="code" href="classwxPropertyGrid.htm#a138">02831</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02832 <span class="keyword">    </span>{
02833         wxPGProperty* p = wxPGIdToPtr ( <span class="keywordtype">id</span> );
02834         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02835         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02836     }
02837 
02838     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsModified(GetPropertyByName(name)); }
02839 
<a name="l02841"></a><a class="code" href="classwxPropertyGrid.htm#a140">02841</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02842 <span class="keyword">    </span>{
02843         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
02844     }
02845     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyCategory(GetPropertyByName(name)); }
02846 
<a name="l02850"></a><a class="code" href="classwxPropertyGrid.htm#a142">02850</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02851 <span class="keyword">    </span>{
02852         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02853         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02854         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02855     }
02856     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyModified(GetPropertyByName(name)); }
02857 
<a name="l02860"></a><a class="code" href="classwxPropertyGrid.htm#a144">02860</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02861 <span class="keyword">    </span>{
02862         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02863         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02864         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga6">wxPG_PROP_UNSPECIFIED</a>) ? TRUE : FALSE );
02865     }
02866     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyValueUnspecified(GetPropertyByName(name)); }
02867 
02870     <span class="comment">/*inline bool IsSubProperty ( wxPGId property ) const</span>
02871 <span class="comment">    {</span>
02872 <span class="comment">        return property.GetProperty().IsSubProperty();</span>
02873 <span class="comment">    }</span>
02874 <span class="comment">    inline bool IsSubProperty ( wxPGNameStr name ) { return IsSubProperty(GetPropertyByName(name)); }*/</span>
02875 
02879     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
02880 
<a name="l02884"></a><a class="code" href="classwxPropertyGrid.htm#a147">02884</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE )
02885     {
02886         LimitPropertyEditing(GetPropertyByName(name),limit);
02887     }
02888 
02890     <span class="keywordtype">void</span> RedrawAllVisible ();
02891 
02898     <span class="keyword">static</span> wxPGValueType* RegisterValueType ( wxPGValueType* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
02899 
02904     <span class="keyword">static</span> wxPGEditor* RegisterEditorClass ( wxPGEditor* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
02905 
02908     <span class="keywordtype">void</span> ResetColours();
02909 
02914     <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice );
02915 
<a name="l02918"></a><a class="code" href="classwxPropertyGrid.htm#a150">02918</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
02919     {
02920         wxPropertyCategoryClass* pc = (wxPropertyCategoryClass*)wxPGIdToPtr(<span class="keywordtype">id</span>);
02921 <span class="preprocessor">#ifdef __WXDEBUG__</span>
02922 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &gt; 0 );
02923 <span class="preprocessor">#endif</span>
02924 <span class="preprocessor"></span>        m_pState-&gt;m_currentCategory = pc;
02925     }
02926 
<a name="l02929"></a><a class="code" href="classwxPropertyGrid.htm#a151">02929</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name = wxEmptyString )
02930     {
02931         SetCurrentCategory(GetPropertyByName(name));
02932     }
02933 
02935     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
02936 
<a name="l02945"></a><a class="code" href="classwxPropertyGrid.htm#a153">02945</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0 )
02946     {
02947         wxPropertyGridState::SetPropertyAttribute(wxPGIdToPtr(<span class="keywordtype">id</span>),attrid,value,arg_flags);
02948     }
02949     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGNameStr name, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0  )
02950     {
02951         SetPropertyAttribute(GetPropertyByName(name),attrid,value,arg_flags);
02952     }
02953 
02957     <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col );
02958     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
02959     {
02960         SetPropertyColour ( GetPropertyByName(name), col );
02961     }
02962 
<a name="l02964"></a><a class="code" href="classwxPropertyGrid.htm#a157">02964</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
02965     {
02966         SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
02967     }
02968     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
02969     {
02970         SetColourIndex ( wxPGIdToPtr(GetPropertyByName(name)), 0 );
02971     }
02972 
02974     <span class="keywordtype">void</span> SetCaptionForegroundColour(<span class="keyword">const</span> wxColour&amp; col);
02975 
02979     <span class="keywordtype">void</span> SetCellBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
02980 
02984     <span class="keywordtype">void</span> SetCellTextColour(<span class="keyword">const</span> wxColour&amp; col);
02985 
02987     <span class="keywordtype">void</span> SetLineColour(<span class="keyword">const</span> wxColour&amp; col);
02988 
02990     <span class="keywordtype">void</span> SetSelectionBackground(<span class="keyword">const</span> wxColour&amp; col);
02991 
02993     <span class="keywordtype">void</span> SetSelectionForeground(<span class="keyword">const</span> wxColour&amp; col);
02994 
02996     <span class="keywordtype">void</span> SetSplitterPosition ( <span class="keywordtype">int</span> newxpos, <span class="keywordtype">bool</span> refresh = TRUE );
02997 
<a name="l03004"></a><a class="code" href="classwxPropertyGrid.htm#a166">03004</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE )
03005     {
03006         SelectProperty(wxPGIdToPtr(<span class="keywordtype">id</span>),focus);
03007     }
03008     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
03009     {
03010         SelectProperty(wxPGIdToPtr(GetPropertyByName(name)),focus);
03011     }
03012 
03016     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
03017 
<a name="l03021"></a><a class="code" href="classwxPropertyGrid.htm#a169">03021</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority )
03022     {
03023         SetPropertyPriority(GetPropertyByName(name),priority);
03024     }
03025 
03028     <span class="keywordtype">void</span> SwitchState ( wxPropertyGridState* pNewState );
03029 
03030     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; help_string )
03031     {
03032         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03033         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_helpString = help_string;
03034     }
03035 
03036     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; help_string )
03037     {
03038         SetPropertyHelpString(GetPropertyByName(name),help_string);
03039     }
03040 
<a name="l03050"></a><a class="code" href="classwxPropertyGrid.htm#a173">03050</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newproplabel )
03051     {
03052         wxPGProperty* p = &amp;GetPropertyById( <span class="keywordtype">id</span> );
03053         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03054     }
<a name="l03064"></a><a class="code" href="classwxPropertyGrid.htm#a174">03064</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newproplabel )
03065     {
03066         wxPGProperty* p = wxPGIdToPtr ( GetPropertyByName(name) );
03067         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03068     }
03069 
<a name="l03079"></a><a class="code" href="classwxPropertyGrid.htm#a175">03079</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newname )
03080     {
03081         DoSetPropertyName ( wxPGIdToPtr(<span class="keywordtype">id</span>), newname );
03082     }
<a name="l03092"></a><a class="code" href="classwxPropertyGrid.htm#a176">03092</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newname )
03093     {
03094         DoSetPropertyName ( wxPGIdToPtr ( GetPropertyByName(name) ), newname );
03095     }
03096 
<a name="l03098"></a><a class="code" href="classwxPropertyGrid.htm#a177">03098</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value )
03099     {
03100         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03101     }
<a name="l03103"></a><a class="code" href="classwxPropertyGrid.htm#a178">03103</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value )
03104     {
03105         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
03106     }
<a name="l03108"></a><a class="code" href="classwxPropertyGrid.htm#a179">03108</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value )
03109     {
03110         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03111     }
<a name="l03113"></a><a class="code" href="classwxPropertyGrid.htm#a180">03113</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value )
03114     {
03115         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03116     }
03117 
03124     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
03125 
03126     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
03127     {
03128         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
03129     }
03130 
<a name="l03132"></a><a class="code" href="classwxPropertyGrid.htm#a183">03132</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value )
03133     {
03134         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03135     }
<a name="l03137"></a><a class="code" href="classwxPropertyGrid.htm#a184">03137</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value )
03138     {
03139         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03140     }
03142     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
03143     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
03144     {
03145         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
03146     }
03147 
03149     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
03150 
<a name="l03152"></a><a class="code" href="classwxPropertyGrid.htm#a188">03152</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPoint&amp; value )
03153     {
03154         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03155         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxPoint")) == 0 );</span>
03156         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03157     }
<a name="l03159"></a><a class="code" href="classwxPropertyGrid.htm#a189">03159</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxSize&amp; value )
03160     {
03161         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03162         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
03163         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03164     }
<a name="l03166"></a><a class="code" href="classwxPropertyGrid.htm#a190">03166</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayInt&amp; value )
03167     {
03168         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
03169         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03170         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03171     }
03172 
<a name="l03174"></a><a class="code" href="classwxPropertyGrid.htm#a191">03174</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value )
03175     {
03176         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03177     }
<a name="l03179"></a><a class="code" href="classwxPropertyGrid.htm#a192">03179</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value )
03180     {
03181         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03182     }
<a name="l03184"></a><a class="code" href="classwxPropertyGrid.htm#a193">03184</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value )
03185     {
03186         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03187     }
<a name="l03189"></a><a class="code" href="classwxPropertyGrid.htm#a194">03189</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value )
03190     {
03191         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03192     }
<a name="l03196"></a><a class="code" href="classwxPropertyGrid.htm#a195">03196</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value )
03197     {
03198         SetPropertyValue ( GetPropertyByName(name), value );
03199     }
<a name="l03203"></a><a class="code" href="classwxPropertyGrid.htm#a196">03203</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
03204     {
03205         SetPropertyValue ( GetPropertyByName(name), wxString(value) );
03206     }
<a name="l03208"></a><a class="code" href="classwxPropertyGrid.htm#a197">03208</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value )
03209     {
03210         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03211     }
<a name="l03213"></a><a class="code" href="classwxPropertyGrid.htm#a198">03213</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value )
03214     {
03215         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03216     }
<a name="l03218"></a><a class="code" href="classwxPropertyGrid.htm#a199">03218</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value )
03219     {
03220         SetPropertyValue ( GetPropertyByName(name), value );
03221     }
03222     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
03223     {
03224         SetPropertyValue(name,&amp;value);
03225     }
<a name="l03227"></a><a class="code" href="classwxPropertyGrid.htm#a201">03227</a>     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value )
03228     {
03229         SetPropertyValue ( GetPropertyByName(name), value );
03230     }
<a name="l03232"></a><a class="code" href="classwxPropertyGrid.htm#a202">03232</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxPoint&amp; value )
03233     {
03234         SetPropertyValue ( GetPropertyByName(name), value );
03235     }
<a name="l03237"></a><a class="code" href="classwxPropertyGrid.htm#a203">03237</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxSize&amp; value )
03238     {
03239         SetPropertyValue ( GetPropertyByName(name), value );
03240     }
<a name="l03242"></a><a class="code" href="classwxPropertyGrid.htm#a204">03242</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayInt&amp; value )
03243     {
03244         SetPropertyValue ( GetPropertyByName(name), value );
03245     }
03246 
03250     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
03251     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyUnspecified ( wxPGNameStr name )
03252     {
03253         SetPropertyValueUnspecified ( GetPropertyByName(name) );
03254     }
03255 
<a name="l03260"></a><a class="code" href="classwxPropertyGrid.htm#a207">03260</a>     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
03261     {
03262         m_pState-&gt;SetPropertyValues(list,default_category);
03263     }
03264 
03265     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
03266     {
03267         SetPropertyValues (list.GetList(),default_category);
03268     }
03269     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
03270     {
03271         SetPropertyValues (list,GetPropertyByName(default_category));
03272     }
03273     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
03274     {
03275         SetPropertyValues (list.GetList(),GetPropertyByName(default_category));
03276     }
03277 
<a name="l03284"></a><a class="code" href="classwxPropertyGrid.htm#a211">03284</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetVerticalSpacing ( <span class="keywordtype">int</span> vspacing )
03285     {
03286         m_vspacing = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)vspacing;
03287         CalculateFontAndBitmapStuff ( vspacing );
03288         <span class="keywordflow">if</span> ( !m_pState-&gt;m_itemsAdded ) Refresh();
03289     }
03290 
<a name="l03292"></a><a class="code" href="classwxPropertyGrid.htm#a212">03292</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowLowPriority() { Compact ( FALSE ); }
03293 
03295     <span class="keywordtype">void</span> Sort ();
03296 
03299     <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> );
03300 
<a name="l03303"></a><a class="code" href="classwxPropertyGrid.htm#a215">03303</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
03304     {
03305         Sort ( GetPropertyByName(name) );
03306     }
03307 
03311     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag( <span class="keywordtype">long</span> style );
03312 
<a name="l03317"></a><a class="code" href="classwxPropertyGrid.htm#a217">03317</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
03318     {
03319         <span class="keywordflow">if</span> ( priority == wxPG_LOW )
03320             m_iFlags |= wxPG_FL_ADDING_HIDEABLES;
03321         <span class="keywordflow">else</span>
03322             m_iFlags &amp;= ~(wxPG_FL_ADDING_HIDEABLES);
03323     }
03324 
<a name="l03327"></a><a class="code" href="classwxPropertyGrid.htm#a218">03327</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
03328     {
03329         <span class="keywordtype">int</span> priority = wxPG_LOW;
03330         <span class="keywordflow">if</span> ( GetPropertyPriority(<span class="keywordtype">id</span>) == wxPG_LOW )
03331             priority = wxPG_HIGH;
03332         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
03333     }
03334 
<a name="l03337"></a><a class="code" href="classwxPropertyGrid.htm#a219">03337</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
03338     {
03339         TogglePropertyPriority(GetPropertyByName(name));
03340     }
03341 
<a name="l03343"></a><a class="code" href="classwxPropertyGrid.htm#a220">03343</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
03344     {
03345         SetDefaultPriority(wxPG_HIGH);
03346     }
03347 
03349     <span class="comment">//inline void StopAddingHideables() { m_iFlags &amp;= ~(wxPG_FL_ADDING_HIDEABLES); }</span>
03350 
<a name="l03359"></a><a class="code" href="classwxPropertyGrid.htm#z0_0">03359</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasModified() { m_iFlags |= wxPG_FL_VALUE_MODIFIED; }
<a name="l03361"></a><a class="code" href="classwxPropertyGrid.htm#z0_1">03361</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasNotModified() { m_iFlags &amp;= ~(wxPG_FL_VALUE_MODIFIED); }
<a name="l03367"></a><a class="code" href="classwxPropertyGrid.htm#z0_2">03367</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsEditorsValueModified()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>  ( m_iFlags &amp; wxPG_FL_VALUE_MODIFIED ) ? TRUE : FALSE; }
03368     wxPGCtrlClass* GenerateEditorButton ( <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
03383     wxPGCtrlClass* GenerateEditorTextCtrl ( <span class="keyword">const</span> wxPoint&amp; pos,
03384         <span class="keyword">const</span> wxSize&amp; sz, <span class="keyword">const</span> wxString&amp; value, wxPGCtrlClass* secondary,
03385         <span class="keyword">const</span> wxSize&amp; imsz = wxDefaultSize );
03386 
03387     <span class="comment">/* Generates both textctrl and button.</span>
03388 <span class="comment">    */</span>
03389     wxPGCtrlClass* GenerateEditorTextCtrlAndButton( <span class="keyword">const</span> wxPoint&amp; pos,
03390         <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary, <span class="keywordtype">int</span> limited_editing,
03391         wxPGProperty* property );
03392 
03401     wxPoint GetGoodEditorDialogPosition ( wxPGProperty* p,
03402         <span class="keyword">const</span> wxSize&amp; sz );
03403 
03404     <span class="comment">// Converts escape sequences in src_str to newlines,</span>
03405     <span class="comment">// tabs, etc. and copies result to dst_str.</span>
03406     <span class="keyword">static</span> wxString&amp; ExpandEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
03407 
03408     <span class="comment">// Converts newlines, tabs, etc. in src_str to escape</span>
03409     <span class="comment">// sequences, and copies result to dst_str.</span>
03410     <span class="keyword">static</span> wxString&amp; CreateEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
03411 
03417     <span class="keyword">static</span> <span class="keywordtype">void</span> ArrayStringToString ( wxString&amp; dst, <span class="keyword">const</span> wxArrayString&amp; src,
03418                                       wxChar preDelim, wxChar postDelim,
03419                                       <span class="keywordtype">int</span> flags );
03420 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
03421 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxCustomControlManager* GetCCManager() { <span class="keywordflow">return</span> &amp;m_ccManager; }
03422 <span class="preprocessor">#endif</span>
03423 <span class="preprocessor"></span>
03426     <span class="keywordtype">void</span> OnCustomEditorEvent ( wxEvent &amp;event );
03428     <span class="keywordtype">void</span> SLAlloc ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount, <span class="keyword">const</span> wxChar** items );
<a name="l03430"></a><a class="code" href="classwxPropertyGrid.htm#z0_10">03430</a>     <span class="keyword">inline</span> wxArrayString&amp; SLGet () { <span class="keywordflow">return</span> m_sl; }
03432 
03433     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetInternalFlags ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_iFlags; }
03434     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearInternalFlag ( <span class="keywordtype">long</span> flag ) { m_iFlags &amp;= ~(flag); }
03435     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBottomY ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_bottomy; }
03436     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetBottomY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y ) { m_bottomy = y; }
03437 
03440     <span class="keywordtype">void</span> PropertyWasModified ( wxPGProperty* p );
03441 
03442     <span class="comment">//wxArrayPtrVoid* GetCatArray () { return &amp;m_pState-&gt;m_catArray; }</span>
03443 
03444 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
03445 <span class="preprocessor"></span><span class="comment">// Simple way to make doxygen skip protected members</span>
03446 <span class="comment">// Used wx/window.h include guard because had trouble</span>
03447 <span class="comment">// getting doxygen definitions work.</span>
03448 
03449     <span class="comment">//</span>
03450     <span class="comment">// Overridden functions - no documentation required.</span>
03451     <span class="comment">//</span>
03452 
03453     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
03454 
03455     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
03456 
03457     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
03458 
03459     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
03460 
03461     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
03462 
03463 <span class="keyword">protected</span>:
03464 
03466     <span class="comment">//wxPropertyGridState         m_state;</span>
03467     wxPropertyGridState*         m_pState;
03468 
03473     <span class="comment">//unsigned char               m_itemsAdded;</span>
03474 
03476     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_processingEvent;
03477 
03478     <span class="comment">//wxPGPropertyWithChildren*   m_properties;</span>
03479     <span class="comment">//wxPropertyCategoryClass          m_regularArray;</span>
03480     <span class="comment">//wxPGPropertyWithChildren*   m_abcArray; // for different kind of display</span>
03481 
03483     <span class="comment">//wxPGHashMapProperty         m_dictName;</span>
03484 
03485 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
03486 <span class="preprocessor"></span>        wxBitmap            *m_expandbmp, *m_collbmp;
03487 <span class="preprocessor">#endif</span>
03488 <span class="preprocessor"></span>
03489     wxCursor            *m_cursor_sizewe;
03490 
03492     wxPGCtrlClass       *m_wndPrimary;
03493     wxPGCtrlClass       *m_wndSecondary;
03494 
03495 <span class="preprocessor">#if wxPG_DOUBLE_BUFFER</span>
03496 <span class="preprocessor"></span>    wxBitmap            *m_doubleBuffer;
03497 <span class="preprocessor">#endif</span>
03498 <span class="preprocessor"></span>
03501     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_bottomy;
03502 
03504         <span class="keywordtype">int</span>                 m_spacingy;
03505 
03507     <span class="keywordtype">int</span>                 m_width;
03508 
03510     <span class="keywordtype">int</span>                 m_height;
03511 
03513     wxPGArrayProperty   m_arrVisible;
03514 
03516     <span class="keywordtype">int</span>                 m_prevVY;
03517 
03519     <span class="keywordtype">int</span>                 m_calcVisHeight;
03520 
03523         <span class="keywordtype">int</span>                 m_gutterwidth;
03524 
03526     <span class="keywordtype">int</span>                 m_lineHeight;
03527 
03530     <span class="keywordtype">int</span>                 m_marginwidth;
03531 
03532     <span class="keywordtype">int</span>                 m_buttonSpacingY; <span class="comment">// y spacing for expand/collapse button.</span>
03533 
03535     <span class="keywordtype">int</span>                 m_subgroup_extramargin;
03536 
03538         <span class="keywordtype">int</span>                 m_iconwidth;
03539 
03540 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
03541 <span class="preprocessor"></span>
03543         <span class="keywordtype">int</span>                 m_iconheight;
03544 <span class="preprocessor">#endif</span>
03545 <span class="preprocessor"></span>
03547     <span class="keywordtype">int</span>                 m_curcursor;
03548 
03551         wxFont              m_captionFont;
03552 
03553 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
03554 <span class="preprocessor"></span>
03555     wxArrayPtrVoid              m_catArray;
03556 <span class="preprocessor">#endif</span>
03557 <span class="preprocessor"></span>
03558 <span class="preprocessor">#if !wxPG_HEAVY_GFX</span>
03559 <span class="preprocessor"></span>    <span class="keywordtype">int</span>                 m_splitterprevdrawnx;
03560 
03562     wxPen               m_splitterpen;
03563 
03564 <span class="preprocessor">#endif</span>
03565 <span class="preprocessor"></span>
03566         <span class="keywordtype">int</span>                 m_fontHeight;  <span class="comment">// height of the font</span>
03567     
03568     <span class="comment">// Most recently added category.</span>
03569     <span class="comment">//wxPGPropertyWithChildren*   m_currentCategory;</span>
03570 
03571     <span class="comment">//</span>
03572     <span class="comment">// Temporary values</span>
03573     <span class="comment">//</span>
03574 
03576     <span class="keywordtype">int</span>                 m_startingSplitterX;
03577 
03579     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_dragStatus;
03580 
03582     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>         m_dragOffset;
03583 
03585     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_mouseSide;
03586 
03588     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_editorFocused;
03589 
03591     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_coloursCustomized;
03592 
03594     <span class="comment">//unsigned char       m_lastCaptionBottomnest;</span>
03595 
03597     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_frozen;
03598 
03599     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_vspacing;
03600 
03602     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        m_iFlags;
03603 
03605     <span class="keywordtype">int</span>                 m_clearThisMany;
03606     
03611     wxPGProperty*       m_selected;
03612 
03613     wxPGProperty*       m_propHover;    <span class="comment">// pointer to property that has mouse on it self</span>
03614 
03615     <span class="keywordtype">int</span>                 m_splitterx; <span class="comment">// x position for the vertical line dividing name and value</span>
03616             
03617 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
03618 <span class="preprocessor"></span>            
03619     <span class="keywordtype">int</span>                 m_ctrlXAdjust; <span class="comment">// x relative to splitter (needed for resize).</span>
03620 <span class="preprocessor">#endif</span>
03621 <span class="preprocessor"></span>
03622     wxColour            m_colLine;     <span class="comment">// lines between cells</span>
03623     wxColour            m_colPropFore; <span class="comment">// property names and texts are written in this color</span>
03624     wxColour            m_colPropBack; <span class="comment">// background for m_colPropFore</span>
03625     wxColour            m_colCapFore;  <span class="comment">// text color for captions</span>
03626     wxColour            m_colSelFore;  <span class="comment">// foreground for selected property</span>
03627     wxColour            m_colSelBack;  <span class="comment">// background for selected property (actually use background color when control out-of-focus)</span>
03628 
03629     wxArrayPtrVoid      m_arrBgBrushes; <span class="comment">// Array of background colour brushes.</span>
03630 
03631 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
03632 <span class="preprocessor"></span>    wxCustomControlManager  m_ccManager;
03633 <span class="preprocessor">#endif</span>
03634 <span class="preprocessor"></span>
03635     wxArrayString       m_sl;           <span class="comment">// string control helper</span>
03636 
03637 <span class="keyword">protected</span>:
03638 
03639     <span class="comment">// Sets some members to defaults.</span>
03640         <span class="keywordtype">void</span> Init1();
03641 
03642     <span class="comment">// Initializes some members.</span>
03643         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
03644 
03645         <span class="keywordtype">void</span> OnPaint (wxPaintEvent &amp;event );
03646 
03647     <span class="comment">// main event receivers</span>
03648 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
03649 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseEvent ( wxMouseEvent &amp;event );
03650 <span class="preprocessor">#else</span>
03651 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
03652     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
03653     <span class="keywordtype">void</span> OnMouseRightClick ( wxMouseEvent &amp;event );
03654     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
03655 <span class="preprocessor">#endif</span>
03656 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnKey ( wxKeyEvent &amp;event );
03657     <span class="keywordtype">void</span> OnResize ( wxSizeEvent &amp;event );
03658     <span class="comment">//virtual void OnSize ( wxSizeEvent &amp;event );</span>
03659 
03660     <span class="comment">// event handlers</span>
03661     <span class="keywordtype">bool</span> HandleMouseMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
03662     <span class="keywordtype">bool</span> HandleMouseClick ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
03663     <span class="keywordtype">bool</span> HandleMouseRightClick( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
03664     <span class="keywordtype">bool</span> HandleMouseUp ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
03665     <span class="keywordtype">void</span> HandleKeyEvent( wxKeyEvent &amp;event );
03666     <span class="keywordtype">bool</span> HandleChildKey ( wxKeyEvent&amp; event ); <span class="comment">// Handle TAB and ESCAPE in control</span>
03667     
03668     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
03669 
03670     <span class="keywordtype">void</span> OnSetFocus ( wxFocusEvent &amp;event );
03671     <span class="keywordtype">void</span> OnKillFocus ( wxFocusEvent &amp;event );
03672 
03673 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
03674 <span class="preprocessor"></span>
03675     <span class="keywordtype">bool</span> OnMouseCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
03676     <span class="keywordtype">bool</span> OnMouseChildCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
03677 
03678     <span class="comment">// sub-control event handlers</span>
03679     <span class="keywordtype">void</span> OnMouseEntryChild ( wxMouseEvent &amp;event );
03680     <span class="keywordtype">void</span> OnMouseClickChild ( wxMouseEvent &amp;event );
03681     <span class="keywordtype">void</span> OnMouseRightClickChild ( wxMouseEvent &amp;event );
03682     <span class="keywordtype">void</span> OnMouseMoveChild ( wxMouseEvent &amp;event );
03683     <span class="keywordtype">void</span> OnMouseUpChild ( wxMouseEvent &amp;event );
03684     <span class="keywordtype">void</span> OnKeyChild ( wxKeyEvent &amp;event );
03685     <span class="keywordtype">void</span> OnFocusChild ( wxFocusEvent &amp;event );
03686 
03687     <span class="keywordtype">void</span> OnCaptureChange ( wxMouseCaptureChangedEvent &amp;event );
03688 <span class="preprocessor">#endif // !wxPG_USE_CUSTOM_CONTROLS</span>
03689 <span class="preprocessor"></span>
03690     <span class="keywordtype">void</span> OnScrollEvent ( wxScrollWinEvent &amp;event );
03691 
03692     <span class="keywordtype">void</span> OnSysColourChanged ( wxSysColourChangedEvent &amp;event );
03693 
03694 <span class="keyword">protected</span>:
03695 <span class="comment">//private:</span>
03696 
03701         <span class="keywordtype">void</span> CalculateFontAndBitmapStuff( <span class="keywordtype">int</span> vspacing );
03702 
03703     <span class="comment">//void ClearValueBackground ( wxDC&amp; dc, wxPGProperty* p );</span>
03704 
03705     <span class="keyword">inline</span> wxRect GetEditorWidgetRect ( wxPGProperty* p );
03706 
03707     <span class="comment">//inline wxSize GetEditorWidgetSize ( wxPGProperty* p );</span>
03708 
03709     <span class="comment">//void CorrectEditorWidgetSizeX ( int cx, int cw );</span>
03710     <span class="keywordtype">void</span> CorrectEditorWidgetSizeX ( <span class="keywordtype">int</span> new_splitterx, <span class="keywordtype">int</span> new_width );
03711     
03712     <span class="keywordtype">void</span> CorrectEditorWidgetSizeY ( <span class="keywordtype">int</span> cy );
03713 
03714 <span class="preprocessor">#ifdef __WXDEBUG__</span>
03715 <span class="preprocessor"></span>    <span class="keywordtype">void</span> _log_items ();
03716     <span class="keywordtype">void</span> OnScreenNote ( <span class="keyword">const</span> wxChar* format, ... );
03717 <span class="preprocessor">#endif</span>
03718 <span class="preprocessor"></span>
03719     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
03720 
03721     <span class="keywordtype">void</span> SelectProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> focus = FALSE, <span class="keywordtype">bool</span> forceswitch = FALSE );
03722 
03723     <span class="keywordtype">void</span> DoDelete ( wxPGProperty* item );
03724 
03725     <span class="keywordtype">void</span> DoDrawItems ( wxDC&amp; dc,
03726         wxPGProperty* first_item, wxPGProperty* last_item,
03727         <span class="keyword">const</span> wxRect* clip_rect );
03728 
03730     <span class="keywordtype">void</span> DrawItems ( wxDC&amp; dc, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> topitemy, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bottomitemy,
03731         <span class="keyword">const</span> wxRect* clip_rect = NULL );
03732 
03733     <span class="keywordtype">void</span> DrawItems ( wxPGProperty* p1, wxPGProperty* p2 );
03734 
03735     <span class="keywordtype">void</span> DrawItem ( wxDC&amp; dc, wxPGProperty* p );
03736 
03737     <span class="keywordtype">void</span> DrawItemAndChildren ( wxDC&amp; dc, wxPGProperty* p );
03738 
03739     <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawItem ( wxPGProperty* p );
03740 
03741     <span class="keywordtype">void</span> DrawItemAndChildren ( wxPGProperty* p );
03742 
03744     <span class="keyword">inline</span> wxPGProperty&amp; GetPropertyById ( wxPGId <span class="keywordtype">id</span> )
03745     {
03746         <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty();
03747     }
03748 
03749 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
03750 <span class="preprocessor"></span>    wxPropertyCategoryClass* GetPropertyCategory ( wxPGProperty* p ) <span class="keyword">const</span>;
03751 <span class="preprocessor">#else</span>
03752 <span class="preprocessor"></span>    <span class="keyword">static</span> wxPropertyCategoryClass* GetPropertyCategory ( wxPGProperty* p );
03753 <span class="preprocessor">#endif</span>
03754 <span class="preprocessor"></span>
03755     <span class="keywordtype">void</span> ImprovedClientToScreen ( <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span>* py );
03756 
03757     wxPGId Insert ( wxPGProperty* priorthis, wxPGProperty* newproperty );
03758 
03759     <span class="keyword">inline</span> wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03760     {
03761         <span class="keywordflow">return</span> m_pState-&gt;Insert(parent,index,newproperty);
03762     }
03763 
03765     <span class="keywordtype">void</span> RegainColours ();
03766 
03767     wxPGProperty* DoGetItemAtY ( <span class="keywordtype">int</span> y );
03768 
03769     <span class="keyword">inline</span> wxPGProperty* DoGetItemAtY_Full ( <span class="keywordtype">int</span> y )
03770     {
03771         wxASSERT ( y &gt;= 0 );
03772 
03773         <span class="keywordflow">if</span> ( (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)y &gt;= m_bottomy )
03774             <span class="keywordflow">return</span> NULL;
03775 
03776         <span class="keywordflow">return</span> m_pState-&gt;m_properties-&gt;GetItemAtY ( y, m_lineHeight );
03777     }
03778 
03779     <span class="keywordtype">void</span> DoPropertyChanged ( wxDC&amp; dc, wxPGProperty* p );
03780 
03781     <span class="keywordtype">void</span> DoSetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
03782 
03783     wxPGProperty* GetLastItem ( <span class="keywordtype">bool</span> need_visible, <span class="keywordtype">bool</span> allow_subprops = TRUE );
03784 
03785     <span class="keywordtype">void</span> CalculateVisibles ( <span class="keywordtype">int</span> vy, <span class="keywordtype">bool</span> full_recalc );
03786 
03787     <span class="keywordtype">void</span> CalculateYs ( wxPGPropertyWithChildren* startparent,
03788         <span class="keywordtype">int</span> startindex );
03789 
03790     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
03791 
03792     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
03793 
03794     <span class="comment">// Returns nearest paint visible property (such that will be painted unless</span>
03795     <span class="comment">// window is scrolled or resized). If given property is paint visible, then</span>
03796     <span class="comment">// it itself will be returned.</span>
03797     wxPGProperty* GetNearestPaintVisible ( wxPGProperty* p );
03798 
03799     <span class="comment">/*</span>
03800 <span class="comment">    inline wxPropertyCategoryClass* GetPropertyCategory ( wxPGProperty* p ) const</span>
03801 <span class="comment">    {</span>
03802 <span class="comment">        return (wxPropertyCategoryClass*) wxPGIdToPtr(m_pState-&gt;GetPropertyCategory(p));</span>
03803 <span class="comment">    }</span>
03804 <span class="comment">    */</span>
03805 
03806     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultEditors();
03807 
03808     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultValues();
03809 
03810     <span class="comment">// Sets m_bgColIndex to this property and all its children.</span>
03811     <span class="keywordtype">void</span> SetColourIndex ( wxPGProperty* p, <span class="keywordtype">int</span> index );
03812 
03813     <span class="keywordtype">void</span> SetPropertyLabel ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newproplabel );
03814 
03815     <span class="keywordtype">void</span> DoSetPropertyName ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newname );
03816 
03817     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
03818 
03819     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
03820 
03821     <span class="comment">// Setups event handling for child control</span>
03822     <span class="keywordtype">void</span> SetupEventHandling ( wxPGCtrlClass* wnd, <span class="keywordtype">int</span> <span class="keywordtype">id</span> );
03823 
03824     <span class="comment">//void Sort ( bool recalcys );</span>
03825 
03826     <span class="comment">//void Sort ( wxPGProperty* p, bool recalcys );</span>
03827 
03828     <span class="keywordtype">void</span> CustSetCursor ( <span class="keywordtype">int</span> type );
03829 
03830     <span class="keywordtype">void</span> RecalculateVirtualSize();
03831 
03832     <span class="keywordtype">void</span> AdjustScrollbars ( <span class="keywordtype">int</span> y );
03833 
03835     <span class="keywordtype">void</span> DrawSplitterDragColumn ( wxDC&amp; dc, <span class="keywordtype">int</span> x );
03836 
03838     <span class="comment">//int GetNearestValidItem ( int index, int dir );</span>
03839     wxPGProperty* GetNeighbourItem ( wxPGProperty* item, <span class="keywordtype">bool</span> need_visible,
03840         <span class="keywordtype">int</span> dir ) <span class="keyword">const</span>;
03841 
03842     <span class="comment">//inline int PrepareToAddItem( wxPGProperty* property, wxPGPropertyWithChildren* category );</span>
03843 
03844     <span class="keywordtype">void</span> PrepareAfterItemsAdded();
03845 
03846 <span class="preprocessor">#endif // DOXYGEN_SHOULD_SKIP_THIS</span>
03847 <span class="preprocessor"></span>
03848 <span class="keyword">private</span>:
03849     DECLARE_EVENT_TABLE()
03850 };
03851 
03852 <span class="preprocessor">#undef wxPG_USE_STATE</span>
03853 <span class="preprocessor"></span>
03854 <span class="comment">// -----------------------------------------------------------------------</span>
03855 
03856 <span class="keyword">inline</span> <span class="keywordtype">bool</span> wxPropertyGridState::IsDisplayed()<span class="keyword"> const</span>
03857 <span class="keyword"></span>{
03858     <span class="keywordflow">return</span> ( <span class="keyword">this</span> == m_pPropGrid-&gt;GetState() );
03859 }
03860 
03861 <span class="comment">// -----------------------------------------------------------------------</span>
03862 
<a name="l03879"></a><a class="code" href="classwxPropertyGridEvent.htm">03879</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridEvent : <span class="keyword">public</span> wxCommandEvent
03880 {
03881 <span class="keyword">public</span>:
03882 
03884     wxPropertyGridEvent(wxEventType commandType=0, <span class="keywordtype">int</span> <span class="keywordtype">id</span>=0);
03885 <span class="preprocessor">#ifndef SWIG</span>
03886 <span class="preprocessor"></span>
03887     wxPropertyGridEvent(<span class="keyword">const</span> wxPropertyGridEvent&amp; event);
03888 <span class="preprocessor">#endif</span>
03889 <span class="preprocessor"></span>
03890     ~wxPropertyGridEvent();
03891 
03893     <span class="keyword">virtual</span> wxEvent* Clone() <span class="keyword">const</span>;
03894 
<a name="l03896"></a><a class="code" href="classwxPropertyGridEvent.htm#a4">03896</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EnableProperty( <span class="keywordtype">bool</span> enable = TRUE )
03897     {
03898         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),enable);
03899     }
03900 
<a name="l03902"></a><a class="code" href="classwxPropertyGridEvent.htm#a5">03902</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> DisableProperty()
03903     {
03904         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),FALSE);
03905     }
03906 
<a name="l03908"></a><a class="code" href="classwxPropertyGridEvent.htm#a6">03908</a>     wxPGId GetProperty()<span class="keyword"> const</span>
03909 <span class="keyword">    </span>{
03910         <span class="keywordflow">return</span> wxPGIdGen(m_property);
03911     }
03912 
<a name="l03914"></a><a class="code" href="classwxPropertyGridEvent.htm#a7">03914</a>     wxPGProperty* GetPropertyPtr()<span class="keyword"> const</span>
03915 <span class="keyword">    </span>{
03916         <span class="keywordflow">return</span> m_property;
03917     }
03918 
<a name="l03920"></a><a class="code" href="classwxPropertyGridEvent.htm#a8">03920</a>     <span class="keyword">const</span> wxString&amp; GetPropertyLabel()<span class="keyword"> const</span>
03921 <span class="keyword">    </span>{
03922         wxASSERT ( m_property );
03923         <span class="keywordflow">return</span> m_property-&gt;GetLabel();
03924     }
03925 
<a name="l03927"></a><a class="code" href="classwxPropertyGridEvent.htm#a9">03927</a>     <span class="keyword">const</span> wxString&amp; GetPropertyName()<span class="keyword"> const</span>
03928 <span class="keyword">    </span>{
03929         wxASSERT ( m_property );
03930         <span class="keywordflow">return</span> m_property-&gt;GetName();
03931     }
03932 
03934 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
03935 <span class="preprocessor"></span>    <span class="keyword">const</span> wxVariant&amp; GetPropertyValue() <span class="keyword">const</span>
03936 <span class="preprocessor">#else</span>
<a name="l03937"></a><a class="code" href="classwxPropertyGridEvent.htm#a10">03937</a> <span class="preprocessor"></span>    wxVariant GetPropertyValue() <span class="keyword">const</span>
03938 <span class="preprocessor">#endif</span>
03939 <span class="preprocessor"></span>    {
03940         wxASSERT ( m_property );
03941         <span class="keywordflow">return</span> m_property-&gt;GetValueAsVariant();
03942     }
03943 
03944     <span class="keyword">inline</span> wxString GetPropertyValueAsString ()<span class="keyword"> const</span>
03945 <span class="keyword">    </span>{
03946         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsString( wxPGIdGen(m_property) );
03947     }
03948     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ()<span class="keyword"> const</span>
03949 <span class="keyword">    </span>{
03950         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsLong( wxPGIdGen(m_property) );
03951     }
03952     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt () { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(); }
03953     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsBool ()<span class="keyword"> const</span>
03954 <span class="keyword">    </span>{
03955         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsBool( wxPGIdGen(m_property) );
03956     }
03957     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ()<span class="keyword"> const</span>
03958 <span class="keyword">    </span>{
03959         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsDouble( wxPGIdGen(m_property) );
03960     }
03961     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ()<span class="keyword"> const</span>
03962 <span class="keyword">    </span>{
03963         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayString( wxPGIdGen(m_property) );
03964     }
03965     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ()<span class="keyword"> const</span>
03966 <span class="keyword">    </span>{
03967         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsWxObjectPtr( wxPGIdGen(m_property) );
03968     }
03969     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ()<span class="keyword"> const</span>
03970 <span class="keyword">    </span>{
03971         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsVoidPtr( wxPGIdGen(m_property) );
03972     }
03973     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ()<span class="keyword"> const</span>
03974 <span class="keyword">    </span>{
03975         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsPoint( wxPGIdGen(m_property) );
03976     }
03977     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ()<span class="keyword"> const</span>
03978 <span class="keyword">    </span>{
03979         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsSize( wxPGIdGen(m_property) );
03980     }
03981     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ()<span class="keyword"> const</span>
03982 <span class="keyword">    </span>{
03983         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayInt( wxPGIdGen(m_property) );
03984     }
03985 
<a name="l03987"></a><a class="code" href="classwxPropertyGridEvent.htm#a22">03987</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType()<span class="keyword"> const</span>
03988 <span class="keyword">    </span>{
03989         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueType( wxPGIdGen(m_property) );
03990     }
03991 
<a name="l03993"></a><a class="code" href="classwxPropertyGridEvent.htm#a23">03993</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasProperty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_property != (wxPGProperty*) NULL ); }
03994 
03995     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled()<span class="keyword"> const</span>
03996 <span class="keyword">    </span>{
03997         <span class="keywordflow">return</span> m_pg-&gt;IsPropertyEnabled(wxPGIdGen(m_property));
03998     }
03999 
<a name="l04001"></a><a class="code" href="classwxPropertyGridEvent.htm#a25">04001</a>     <span class="keywordtype">void</span> SetProperty ( wxPGId <span class="keywordtype">id</span> ) { m_property = wxPGIdToPtr(<span class="keywordtype">id</span>); }
04002 
<a name="l04004"></a><a class="code" href="classwxPropertyGridEvent.htm#a26">04004</a>     <span class="keywordtype">void</span> SetProperty ( wxPGProperty* p ) { m_property = p; }
04005 
04006     <span class="keywordtype">void</span> SetPropertyGrid ( wxPropertyGrid* pg ) { m_pg = pg; }
04007 
04008 <span class="preprocessor">#ifndef SWIG</span>
04009 <span class="preprocessor"></span><span class="keyword">private</span>:
04010     DECLARE_DYNAMIC_CLASS(wxPropertyGridEvent)
04011 
04012     wxPGProperty*       m_property;
04013     wxPropertyGrid*     m_pg;
04014 <span class="preprocessor">#endif</span>
04015 <span class="preprocessor"></span>};
04016 
04017 <span class="preprocessor">#ifndef SWIG</span>
04018 <span class="preprocessor"></span>BEGIN_DECLARE_EVENT_TYPES()
04019     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_SELECTED,           1775)
04020     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_CHANGED,            1776)
04021     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_HIGHLIGHTED,        1777)
04022     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_RIGHT_CLICK,        1778)
04023     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_PAGE_CHANGED,       1779)
04024     
04025 END_DECLARE_EVENT_TYPES()
04026 #<span class="keywordflow">else</span>
04027     <span class="keyword">enum</span> {
04028         wxEVT_PG_SELECTED = 1775,
04029         wxEVT_PG_CHANGED,
04030         wxEVT_PG_HIGHLIGHTED,
04031         wxEVT_PG_RIGHT_CLICK,
04032         wxEVT_PG_PAGE_CHANGED,
04033     };
04034 <span class="preprocessor">#endif</span>
04035 <span class="preprocessor"></span>
04036 
04037 
04038 <span class="preprocessor">#ifndef SWIG</span>
04039 <span class="preprocessor"></span><span class="keyword">typedef</span> void (wxEvtHandler::*wxPropertyGridEventFunction)(wxPropertyGridEvent&amp;);
04040 
04041 <span class="preprocessor">#define EVT_PG_SELECTED(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_SELECTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04042 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_CHANGED(id, fn)               DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04043 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_HIGHLIGHTED(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_HIGHLIGHTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04044 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_RIGHT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_RIGHT_CLICK, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04045 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_PAGE_CHANGED(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_PAGE_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04046 <span class="preprocessor"></span>
04047 <span class="preprocessor">#endif</span>
04048 <span class="preprocessor"></span>
04049 
04050 <span class="comment">// -----------------------------------------------------------------------</span>
04051 
04052 <span class="comment">//</span>
04053 <span class="comment">// Undefine macros that are not needed outside propertygrid sources</span>
04054 <span class="comment">//</span>
04055 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
04056 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DESC_REFRESH_REQUIRED</span>
04057 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLBAR_DETECTED</span>
04058 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CREATEDSTATE</span>
04059 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_NOSTATUSBARHELP</span>
04060 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLED</span>
04061 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_HIDE_STATE</span>
04062 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE_CHILD</span>
04063 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE</span>
04064 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE_CHILD</span>
04065 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CUR_USES_CUSTOM_IMAGE</span>
04066 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_PRIMARY_FILLS_ENTIRE</span>
04067 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_VALUE_MODIFIED</span>
04068 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE</span>
04069 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUSED</span>
04070 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_CAPTURED</span>
04071 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_INITIALIZED</span>
04072 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_ACTIVATION_BY_CLICK</span>
04073 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DONT_CENTER_SPLITTER</span>
04074 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
04075 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_CUSTOM_CONTROLS</span>
04076 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_DOUBLE_BUFFER</span>
04077 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_HEAVY_GFX</span>
04078 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_ICON_WIDTH</span>
04079 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_RENDERER_NATIVE</span>
04080 <span class="preprocessor"></span><span class="preprocessor"># undef wxPGIdGen</span>
04081 <span class="preprocessor"></span><span class="preprocessor"># undef wxPGNameStr</span>
04082 <span class="preprocessor"></span><span class="preprocessor"># undef wxPGIdToPtr</span>
04083 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
04084 <span class="preprocessor"></span>
04085 <span class="comment">// -----------------------------------------------------------------------</span>
04086 
04087 <span class="preprocessor">#endif // __WX_PROPGRID_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Jan 24 11:39:47 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
