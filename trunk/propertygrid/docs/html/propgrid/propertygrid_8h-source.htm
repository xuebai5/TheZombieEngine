<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propertygrid.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propertygrid.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propertygrid.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid (v0.9.9)</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Sep-25-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_PROPERTYGRID_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_PROPERTYGRID_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "propertygrid.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">/*</span>
00020 <span class="comment"></span>
00021 <span class="comment">  -- IMPORTANT API NOTES --</span>
00022 <span class="comment"></span>
00023 <span class="comment">  * While properties are created as pointers ('cause thats the way to</span>
00024 <span class="comment">    instantiate classes in C++), they should be accessed via property</span>
00025 <span class="comment">    manipulator methods (such as SetPropertyValue and GetPropertyValue)</span>
00026 <span class="comment">    of wxPropertyGrid and wxPropertyGridManager.</span>
00027 <span class="comment"></span>
00028 <span class="comment">  * Intermediate property classes that should only be inherited from</span>
00029 <span class="comment">    have names that begin with wxPG (for example, wxPGProperty and</span>
00030 <span class="comment">    wxPGPropertyWithChildren).</span>
00031 <span class="comment"></span>
00032 <span class="comment">  * As a rule of thumb, OnChange events are not triggered when value</span>
00033 <span class="comment">    is set by the program (with SetPropertyValue, ClearPropertyValue) etc.</span>
00034 <span class="comment"></span>
00035 <span class="comment">*/</span>
00036 
00037 <span class="preprocessor">#include &lt;wx/filename.h&gt;</span>
00038 
00039 <span class="preprocessor">#include &lt;wx/dynarray.h&gt;</span>
00040 
00041 <span class="preprocessor">#include &lt;wx/hashmap.h&gt;</span>
00042 
00043 <span class="preprocessor">#include &lt;wx/variant.h&gt;</span>
00044 
00045 <span class="preprocessor">#include &lt;wx/tooltip.h&gt;</span>
00046 
00047 <span class="comment">// Doxygen special</span>
00048 <span class="preprocessor">#ifndef _WX_WINDOW_H_BASE_</span>
00049 <span class="preprocessor"></span><span class="preprocessor">#include "pg_dox_mainpage.h"</span>
00050 <span class="preprocessor">#endif</span>
00051 <span class="preprocessor"></span>
00052 <span class="comment">// -----------------------------------------------------------------------</span>
00053 
00054 
00055 <span class="comment">//</span>
00056 <span class="comment">// Here are some platform dependent defines</span>
00057 <span class="comment">// NOTE: More in propertygrid.cpp</span>
00058 <span class="comment">//</span>
00059 
00060 <span class="preprocessor">#if defined(__WXMSW__)</span>
00061 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00062 
00063     <span class="comment">// default splitter position</span>
00064 <span class="preprocessor">    #define wxPG_DEFAULT_SPLITTERX      110</span>
00065 <span class="preprocessor"></span>
00066 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00067 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00068 <span class="preprocessor"></span>
00069 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00070 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00071 <span class="preprocessor"></span>
00072 <span class="preprocessor"># if defined(__WXWINCE__)</span>
00073 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00074 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00075 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00076 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00079 <span class="preprocessor"></span>
00080 <span class="preprocessor">    #define wxPG_CREATE_CONTROLS_HIDDEN 1 // 1 to create controls out of sight, hide them, and then move them into correct position</span>
00081 <span class="preprocessor"></span>
00082 <span class="preprocessor">    #define wxPG_NO_CHILD_EVT_MOTION    0 // 1 if splitter drag detect margin and control cannot overlap</span>
00083 <span class="preprocessor"></span>
00084 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00085 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00086 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00087 <span class="preprocessor"></span>
00088 <span class="preprocessor">    #define wxPG_CUSTOM_IMAGE_WIDTH     20 // for wxColourProperty etc.</span>
00089 <span class="preprocessor"></span>
00090 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00091 <span class="preprocessor"></span>
00092 <span class="preprocessor">    #define wxPG_ALLOW_EMPTY_TOOLTIPS   1  // If 1, then setting empty tooltip actually hides it</span>
00093 <span class="preprocessor"></span>
00094 <span class="preprocessor">#elif defined(__WXGTK__)</span>
00095 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00096 
00097 <span class="preprocessor">    #define wxPG_DEFAULT_SPLITTERX      110</span>
00098 <span class="preprocessor"></span>
00099 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9  // comment to use bitmap buttons</span>
00100 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00101 <span class="preprocessor"></span>
00102 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00103 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00104 <span class="preprocessor"></span>
00105 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00106 <span class="preprocessor"></span>
00107 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00108 <span class="preprocessor"></span>
00109 <span class="preprocessor">    #define wxPG_CREATE_CONTROLS_HIDDEN 0 // 1 to create controls out of sight, hide them, and then move them into correct position</span>
00110 <span class="preprocessor"></span>
00111 <span class="preprocessor">    #define wxPG_NO_CHILD_EVT_MOTION    1 // 1 if splitter drag detect margin and control cannot overlap</span>
00112 <span class="preprocessor"></span>
00113 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00114 <span class="preprocessor"></span><span class="preprocessor">  #if defined(__WXGTK20__)</span>
00115 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00116 <span class="preprocessor"></span><span class="preprocessor">  #else</span>
00117 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // This (sub)platform works much better with wxCustomControls</span>
00118 <span class="preprocessor"></span><span class="preprocessor">  #endif</span>
00119 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00120 <span class="preprocessor"></span>
00121 <span class="preprocessor">    #define wxPG_CUSTOM_IMAGE_WIDTH     20 // for wxColourProperty etc.</span>
00122 <span class="preprocessor"></span>
00123 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00124 <span class="preprocessor"></span>
00125 <span class="preprocessor">    #define wxPG_ALLOW_EMPTY_TOOLTIPS   0  // If 1, then setting empty tooltip actually hides it</span>
00126 <span class="preprocessor"></span>
00127 <span class="preprocessor">#elif defined(__WXMAC__)</span>
00128 <span class="preprocessor"></span>    <span class="comment">// *not* tested</span>
00129 
00130 <span class="preprocessor">    #define wxPG_DEFAULT_SPLITTERX      110</span>
00131 <span class="preprocessor"></span>
00132 <span class="preprocessor">    #define wxPG_ICON_WIDTH             11  // comment to use bitmap buttons</span>
00133 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    1 // 1 if wxRendererNative should be employed</span>
00134 <span class="preprocessor"></span>
00135 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00136 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00137 <span class="preprocessor"></span>
00138 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00139 <span class="preprocessor"></span>
00140 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00141 <span class="preprocessor"></span>
00142 <span class="preprocessor">    #define wxPG_CREATE_CONTROLS_HIDDEN 0 // 1 to create controls out of sight, hide them, and then move them into correct position</span>
00143 <span class="preprocessor"></span>
00144 <span class="preprocessor">    #define wxPG_NO_CHILD_EVT_MOTION    0 // 1 if splitter drag detect margin and control cannot overlap</span>
00145 <span class="preprocessor"></span>
00146 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00147 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00148 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00149 <span class="preprocessor"></span>
00150 <span class="preprocessor">    #define wxPG_CUSTOM_IMAGE_WIDTH     20 // for wxColourProperty etc.</span>
00151 <span class="preprocessor"></span>
00152 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00153 <span class="preprocessor"></span>
00154 <span class="preprocessor">    #define wxPG_ALLOW_EMPTY_TOOLTIPS   1  // If 1, then setting empty tooltip actually hides it</span>
00155 <span class="preprocessor"></span>
00156 <span class="preprocessor">#else</span>
00157 <span class="preprocessor"></span>    <span class="comment">// defaults</span>
00158     <span class="comment">// tested on: none.</span>
00159 
00160 <span class="preprocessor">    #define wxPG_DEFAULT_SPLITTERX      110</span>
00161 <span class="preprocessor"></span>
00162 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00163 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00164 <span class="preprocessor"></span>
00165 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00166 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00167 <span class="preprocessor"></span>
00168 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00169 <span class="preprocessor"></span>
00170 <span class="preprocessor">    #define wxPG_HEAVY_GFX              0 // 1 for prettier appearance</span>
00171 <span class="preprocessor"></span>
00172 <span class="preprocessor">    #define wxPG_CREATE_CONTROLS_HIDDEN 0 // 1 to create controls out of sight, hide them, and then move them into correct position</span>
00173 <span class="preprocessor"></span>
00174 <span class="preprocessor">    #define wxPG_NO_CHILD_EVT_MOTION    1 // 1 if splitter drag detect margin and control cannot overlap</span>
00175 <span class="preprocessor"></span>
00176 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00177 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00178 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00179 <span class="preprocessor"></span>
00180 <span class="preprocessor">    #define wxPG_CUSTOM_IMAGE_WIDTH     20 // for wxColourProperty etc.</span>
00181 <span class="preprocessor"></span>
00182 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00183 <span class="preprocessor"></span>
00184 <span class="preprocessor">    #define wxPG_ALLOW_EMPTY_TOOLTIPS   0  // If 1, then setting empty tooltip actually hides it</span>
00185 <span class="preprocessor"></span>
00186 <span class="preprocessor">#endif</span>
00187 <span class="preprocessor"></span>
00188 <span class="comment">// Undefine wxPG_ICON_WIDTH to use supplied xpm bitmaps instead</span>
00189 <span class="comment">//#undef wxPG_ICON_WIDTH</span>
00190 
00191 <span class="comment">// Need to force disable tooltips?</span>
00192 <span class="preprocessor">#if !wxUSE_TOOLTIPS</span>
00193 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
00194 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SUPPORT_TOOLTIPS       0</span>
00195 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00196 <span class="preprocessor"></span>
00197 <span class="comment">// Set 1 to include basic properties ( ~48k in 0.9.9.2 )</span>
00198 <span class="preprocessor">#define wxPG_INCLUDE_BASICPROPS         1</span>
00199 <span class="preprocessor"></span>
00200 <span class="comment">// Set 1 to include advanced properties (wxFontProperty, wxColourProperty, etc.) ( ~32k in 0.9.9.2 )</span>
00201 <span class="preprocessor">#define wxPG_INCLUDE_ADVPROPS           1</span>
00202 <span class="preprocessor"></span>
00203 <span class="comment">// Set 1 include wxPropertyGridManager ( ~36k in 0.9.9.1 )</span>
00204 <span class="preprocessor">#define wxPG_INCLUDE_MANAGER            1</span>
00205 <span class="preprocessor"></span>
00206 <span class="comment">// Set 1 to include checkbox editor class ( ~4k in 0.9.9.1 )</span>
00207 <span class="preprocessor">#define wxPG_INCLUDE_CHECKBOX           1</span>
00208 <span class="preprocessor"></span>
00209 <span class="preprocessor">#ifndef wxPG_USE_DOTNET_ICONS</span>
00210 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_USE_DOTNET_ICONS          0</span>
00211 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00212 <span class="preprocessor"></span>
00213 <span class="comment">// 1 if use array for categories. Limits number of categories</span>
00214 <span class="comment">// to 256, but improves GetPropertyCategory performance (used</span>
00215 <span class="comment">// a lot in DoDrawItems).</span>
00216 <span class="comment">// No significant code size difference (&lt;1kb).</span>
00217 <span class="preprocessor">#define wxPG_USE_CATEGORY_ARRAY         1</span>
00218 <span class="preprocessor"></span>
00219 <span class="comment">// NOTE: Currently advantages granted by wxPG_EMBED_VARIANT are probably minimal.</span>
00220 <span class="preprocessor">#define wxPG_EMBED_VARIANT              0 // 1 if wxVariant is in wxPGProperty (should be better if used a lot)</span>
00221 <span class="preprocessor"></span>
00222 <span class="comment">// NOTE: Use this only if you really need wxDynamicCast etc. Property class name</span>
00223 <span class="comment">//   can be acquired with wxPropertyGrid::GetPropertyClassName() anyway.</span>
00224 <span class="comment">// ALSO NOTE: Causes quite a code size increase (~20k in main object file) considering what</span>
00225 <span class="comment">//   it does. </span>
00226 <span class="preprocessor">#define wxPG_INCLUDE_WXOBJECT           0 // 1 if inherit wxPGProperty from wxObject - always 1 if wxPG_EMBED_VARIANT</span>
00227 <span class="preprocessor"></span>
00228 
00229 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00230 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_EMBED_VARIANT is currently broken."</span>
00231 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_INCLUDE_WXOBJECT</span>
00232 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_INCLUDE_WXOBJECT           1</span>
00233 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00234 <span class="preprocessor"></span>
00235 <span class="comment">// Our very custom dynamic object macros. Should only be used</span>
00236 <span class="comment">// directly in an abstract (typeless etc.) base property classes.</span>
00237 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00238 <span class="preprocessor"></span><span class="preprocessor"># define _DECLARE_PROPERTY_CLASS(A)       DECLARE_CLASS(A)</span>
00239 <span class="preprocessor"></span><span class="preprocessor"># define _IMPLEMENT_PROPERTY_CLASS(A,B)   IMPLEMENT_CLASS(A,B)</span>
00240 <span class="preprocessor"></span><span class="preprocessor"># define _DECLARE_GETCLASSNAME()</span>
00241 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00242 <span class="preprocessor"></span><span class="preprocessor"># define _DECLARE_PROPERTY_CLASS(A)</span>
00243 <span class="preprocessor"></span><span class="preprocessor"># define _IMPLEMENT_PROPERTY_CLASS(A,B)</span>
00244 <span class="preprocessor"></span><span class="preprocessor"># define _DECLARE_GETCLASSNAME()          virtual const wxChar* GetClassName() const;</span>
00245 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00246 <span class="preprocessor"></span>
00247 <span class="keyword">typedef</span> <span class="keywordtype">double</span> wxPGFloat;
00248 
00249 <span class="comment">// -----------------------------------------------------------------------</span>
00250 
00251 <span class="preprocessor">#ifdef WXMAKINGDLL_PROPERTYGRID</span>
00252 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXEXPORT</span>
00253 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00254 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXIMPORT</span>
00255 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00256 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG</span>
00257 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00258 <span class="preprocessor"></span>
00259 <span class="comment">// -----------------------------------------------------------------------</span>
00260 
00261 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
00262 <span class="preprocessor"></span><span class="preprocessor"># include "wx/propertygrid/custctrl.h"</span>
00263 <span class="preprocessor"># define wxPGCtrlClass wxCustomControl</span>
00264 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00265 <span class="preprocessor"></span><span class="preprocessor"># define wxPGCtrlClass wxWindow</span>
00266 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomTextCtrl wxTextCtrl</span>
00267 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomComboBox wxComboBox</span>
00268 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomChoice wxChoice</span>
00269 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomButton wxButton</span>
00270 <span class="preprocessor"></span><span class="preprocessor"># define wxCC_CUSTOM_IMAGE_MARGIN1     2  // before image</span>
00271 <span class="preprocessor"></span><span class="preprocessor"># define wxCC_CUSTOM_IMAGE_MARGIN2     7  // after image</span>
00272 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00273 <span class="preprocessor"></span>
00274 <span class="comment">// -----------------------------------------------------------------------</span>
00275 
00276 <span class="comment">// This is similar to as in stc.h</span>
00277 <span class="preprocessor">#ifndef SWIG</span>
00278 <span class="preprocessor"></span><span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGVariant;
00279 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGValueType;
00280 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGEditor;
00281 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGProperty;
00282 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyCategory;
00283 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren;
00284 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridState;
00285 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGrid;
00286 <span class="preprocessor">#if wxPG_INCLUDE_MANAGER</span>
00287 <span class="preprocessor"></span><span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridManager;
00288 <span class="preprocessor">#endif</span>
00289 <span class="preprocessor"></span><span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridEvent;
00290 
00291 <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>;
00292 
00293 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridNameStr;
00294 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridManagerNameStr;
00295 
00296 <span class="comment">/*</span>
00297 <span class="comment">extern WXDLLIMPEXP_PG const wxChar *wxPGTypeName_long;</span>
00298 <span class="comment">extern WXDLLIMPEXP_PG const wxChar *wxPGTypeName_bool;</span>
00299 <span class="comment">extern WXDLLIMPEXP_PG const wxChar *wxPGTypeName_double;</span>
00300 <span class="comment">extern WXDLLIMPEXP_PG const wxChar *wxPGTypeName_wxString;</span>
00301 <span class="comment">extern WXDLLIMPEXP_PG const wxChar *wxPGTypeName_wxArrayString;</span>
00302 <span class="comment">*/</span>
00303 
00305 <span class="preprocessor">#define wxPG_LABEL (*((const wxString*)NULL))</span>
00306 <span class="preprocessor"></span>
00307 <span class="preprocessor">#define wxPG_EmptyString wxEmptyString</span>
00308 <span class="preprocessor"></span>
00309 <span class="preprocessor">#define wxPG_COLOUR(R,G,B) (unsigned long)(R+(G&lt;&lt;8)+(B&lt;&lt;16))</span>
00310 <span class="preprocessor"></span>
00311 <span class="comment">// -----------------------------------------------------------------------</span>
00312 
<a name="l00323"></a><a class="code" href="group__wndflags.htm#ga0">00323</a> <span class="preprocessor">#define wxPG_AUTOSORT               0x00000010</span>
00324 <span class="preprocessor"></span>
<a name="l00329"></a><a class="code" href="group__wndflags.htm#ga1">00329</a> <span class="preprocessor">#define wxPG_NOCATEGORIES           0x00000020</span>
00330 <span class="preprocessor"></span>
00331 <span class="comment">/* This style combines non-categoric mode and automatic sorting.</span>
00332 <span class="comment">*/</span>
00333 <span class="preprocessor">#define wxPG_ALPHABETIC_MODE        (wxPG_NOCATEGORIES|wxPG_AUTOSORT)</span>
00334 <span class="preprocessor"></span>
<a name="l00338"></a><a class="code" href="group__wndflags.htm#ga3">00338</a> <span class="preprocessor">#define wxPG_BOLDMODIFIED           0x00000040</span>
00339 <span class="preprocessor"></span>
<a name="l00343"></a><a class="code" href="group__wndflags.htm#ga4">00343</a> <span class="preprocessor">#define wxPG_SPLITTERAUTOCENTER     0x00000080</span>
00344 <span class="preprocessor"></span>
<a name="l00348"></a><a class="code" href="group__wndflags.htm#ga5">00348</a> <span class="preprocessor">#define wxPG_TOOLTIPS               0x00000100</span>
00349 <span class="preprocessor"></span>
<a name="l00354"></a><a class="code" href="group__wndflags.htm#ga6">00354</a> <span class="preprocessor">#define wxPG_HIDE_MARGIN            0x00000200</span>
00355 <span class="preprocessor"></span>
<a name="l00358"></a><a class="code" href="group__wndflags.htm#ga7">00358</a> <span class="preprocessor">#define wxPG_STATIC_SPLITTER        0x00000400</span>
00359 <span class="preprocessor"></span>
<a name="l00363"></a><a class="code" href="group__wndflags.htm#ga8">00363</a> <span class="preprocessor">#define wxPG_STATIC_LAYOUT          (wxPG_HIDE_MARGIN|wxPG_STATIC_SPLITTER)</span>
00364 <span class="preprocessor"></span>
<a name="l00369"></a><a class="code" href="group__wndflags.htm#ga9">00369</a> <span class="preprocessor">#define wxPG_LIMITED_EDITING        0x00000800</span>
00370 <span class="preprocessor"></span>
<a name="l00372"></a><a class="code" href="group__wndflags.htm#ga10">00372</a> <span class="preprocessor">#define wxPG_TOOLBAR                0x00001000</span>
00373 <span class="preprocessor"></span>
<a name="l00377"></a><a class="code" href="group__wndflags.htm#ga11">00377</a> <span class="preprocessor">#define wxPG_DESCRIPTION            0x00002000</span>
00378 <span class="preprocessor"></span>
<a name="l00382"></a><a class="code" href="group__wndflags.htm#ga12">00382</a> <span class="preprocessor">#define wxPG_COMPACTOR              0x00004000</span>
00383 <span class="preprocessor"></span>
<a name="l00391"></a><a class="code" href="group__wndflags.htm#ga13">00391</a> <span class="preprocessor">#define wxPG_EX_INIT_NOCAT          0x00001000</span>
00392 <span class="preprocessor"></span>
<a name="l00396"></a><a class="code" href="group__wndflags.htm#ga14">00396</a> <span class="preprocessor">#define wxPG_EX_FLAT_TOOLBAR        0x00002000</span>
00397 <span class="preprocessor"></span>
<a name="l00400"></a><a class="code" href="group__wndflags.htm#ga15">00400</a> <span class="preprocessor">#define wxPG_EX_CLASSIC_SPACING     0x00004000</span>
00401 <span class="preprocessor"></span>
<a name="l00404"></a><a class="code" href="group__wndflags.htm#ga16">00404</a> <span class="preprocessor">#define wxPG_DEFAULT_STYLE              (wxSIMPLE_BORDER|wxCLIP_CHILDREN|wxNO_FULL_REPAINT_ON_RESIZE)</span>
00405 <span class="preprocessor"></span>
<a name="l00408"></a><a class="code" href="group__wndflags.htm#ga17">00408</a> <span class="preprocessor">#define wxPGMAN_DEFAULT_STYLE       (wxCLIP_CHILDREN|wxNO_FULL_REPAINT_ON_RESIZE)</span>
00409 <span class="preprocessor"></span>
00415 <span class="preprocessor">#ifndef wxKEEP_STRUCTURE</span>
00416 <span class="preprocessor"></span><span class="preprocessor"># define wxKEEP_STRUCTURE            0x00000010</span>
00417 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00418 <span class="preprocessor"></span>
00420 <span class="preprocessor">#ifndef wxALSO_CHILDREN</span>
00421 <span class="preprocessor"></span><span class="preprocessor"># define wxALSO_CHILDREN              0x00000020</span>
00422 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00423 <span class="preprocessor"></span>
00424 <span class="comment">// -----------------------------------------------------------------------</span>
00425 
00426 <span class="comment">// Property priorities</span>
00427 <span class="preprocessor">#define wxPG_LOW                    1</span>
00428 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_HIGH                   2</span>
00429 <span class="preprocessor"></span>
00430 <span class="comment">// -----------------------------------------------------------------------</span>
00431 
00432 <span class="comment">// Misc argument flags.</span>
00433 <span class="preprocessor">#define wxPG_FULL_VALUE             0x00000001 // Get/Store full value instead of displayed value.</span>
00434 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_REPORT_ERROR           0x00000002</span>
00435 <span class="preprocessor"></span>
00436 <span class="comment">// -----------------------------------------------------------------------</span>
00437 
00438 <span class="comment">// Simple class to hold the wxPGProperty pointer.</span>
00439 <span class="keyword">class </span>wxPGId
00440 {
00441     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
00442 <span class="keyword">public</span>:
00443     wxPGId() { m_ptr = NULL; }
00444     wxPGId ( wxPGProperty* ptr ) { m_ptr = ptr; }
00445     wxPGId ( wxPGProperty&amp; ref ) { m_ptr = &amp;ref; }
00446     ~wxPGId() {}
00447 
00448     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_ptr != NULL ); }
00449 
00450     <span class="keywordtype">bool</span> operator == (<span class="keyword">const</span> wxPGId&amp; other)
00451     {
00452         <span class="keywordflow">return</span> m_ptr == other.m_ptr;
00453     }
00454 
00455     wxPGProperty&amp; GetProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_ptr; }
00456     wxPGProperty* GetPropertyPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ptr; }
00457 <span class="keyword">private</span>:
00458     wxPGProperty* m_ptr;
00459 };
00460 
00461 <span class="preprocessor">#define wxPGIdGen(PTR) wxPGId(PTR)</span>
00462 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdToRef(ID) ID.GetProperty()</span>
00463 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdToPtr(ID) ID.GetPropertyPtr()</span>
00464 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdIsOk(ID) ID.IsOk()</span>
00465 <span class="preprocessor"></span>
00466 <span class="comment">// -----------------------------------------------------------------------</span>
00467 
00468 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGTypeOperationFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr, <span class="keyword">const</span> wxChar* op );
00469 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGGetFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr );
00470 
00471 <span class="comment">// -----------------------------------------------------------------------</span>
00472 
00473 <span class="comment">/*</span>
00474 <span class="comment">#define wxPG_CURSOR_FROM_FILE       0xFFFFFE</span>
00475 <span class="comment"></span>
00476 <span class="comment">#define wxPG_CURSOR_FROM_RESOURCE   0xFFFFFF</span>
00477 <span class="comment">*/</span>
00478 
00479 <span class="comment">// -----------------------------------------------------------------------</span>
00480 
<a name="l00487"></a><a class="code" href="group__propflags.htm#ga0">00487</a> <span class="preprocessor">#define wxPG_PROP_MODIFIED          0x0001</span>
00488 <span class="preprocessor"></span>
<a name="l00491"></a><a class="code" href="group__propflags.htm#ga1">00491</a> <span class="preprocessor">#define wxPG_PROP_DISABLED          0x0002</span>
00492 <span class="preprocessor"></span>
<a name="l00495"></a><a class="code" href="group__propflags.htm#ga2">00495</a> <span class="preprocessor">#define wxPG_PROP_CUSTCOLBG         0x0004</span>
00496 <span class="preprocessor"></span>
<a name="l00499"></a><a class="code" href="group__propflags.htm#ga3">00499</a> <span class="preprocessor">#define wxPG_PROP_HIDEABLE          0x0008</span>
00500 <span class="preprocessor"></span>
<a name="l00505"></a><a class="code" href="group__propflags.htm#ga4">00505</a> <span class="preprocessor">#define wxPG_PROP_CUSTOMIMAGE       0x0010</span>
00506 <span class="preprocessor"></span>
<a name="l00510"></a><a class="code" href="group__propflags.htm#ga5">00510</a> <span class="preprocessor">#define wxPG_PROP_NOEDITOR          0x0020</span>
00511 <span class="preprocessor"></span>
<a name="l00514"></a><a class="code" href="group__propflags.htm#ga6">00514</a> <span class="preprocessor">#define wxPG_PROP_UNSPECIFIED       0x0040</span>
00515 <span class="preprocessor"></span>
<a name="l00519"></a><a class="code" href="group__propflags.htm#ga7">00519</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC    0x0080</span>
00520 <span class="preprocessor"></span>
<a name="l00533"></a><a class="code" href="group__attrids.htm#ga0">00533</a> <span class="preprocessor">#define wxPG_BOOL_USE_CHECKBOX      64</span>
00534 <span class="preprocessor"></span>
<a name="l00538"></a><a class="code" href="group__attrids.htm#ga1">00538</a> <span class="preprocessor">#define wxPG_FLOAT_PRECISION        65</span>
00539 <span class="preprocessor"></span>
<a name="l00544"></a><a class="code" href="group__attrids.htm#ga2">00544</a> <span class="preprocessor">#define wxPG_FILE_WILDCARD          66</span>
00545 <span class="preprocessor"></span>
<a name="l00549"></a><a class="code" href="group__attrids.htm#ga3">00549</a> <span class="preprocessor">#define wxPG_FILE_SHOW_FULL_PATH    67</span>
00550 <span class="preprocessor"></span>
<a name="l00554"></a><a class="code" href="group__attrids.htm#ga4">00554</a> <span class="preprocessor">#define wxPG_USER_ATTRIBUTE        192</span>
00555 <span class="preprocessor"></span>
00559 <span class="comment">// -----------------------------------------------------------------------</span>
00560 <span class="comment">// Value type.</span>
00561 
00562 <span class="preprocessor">#define wxPG_DECLARE_VALUE_TYPE_WITH_DECL(VALUETYPE,DECL) \</span>
00563 <span class="preprocessor">    extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00564 <span class="preprocessor"></span>
00565 <span class="preprocessor">#define wxPG_DECLARE_VALUE_TYPE(VALUETYPE) \</span>
00566 <span class="preprocessor">    extern const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00567 <span class="preprocessor"></span>
00568 <span class="preprocessor">#define wxPG_VALUETYPE(T)       wxPGValueType_##T</span>
00569 <span class="preprocessor"></span>
00570 <span class="comment">// Like wxPG_VALUETYPE, but casts pointer to exact class.</span>
00571 <span class="preprocessor">#define wxPG_VALUETYPE_EXACT(T) ((wxPGValueType##VALUETYPE##Class)wxPGValueType##T)</span>
00572 <span class="preprocessor"></span>
00573 wxPG_DECLARE_VALUE_TYPE_WITH_DECL(none,WXDLLIMPEXP_PG)
00574 wxPG_DECLARE_VALUE_TYPE_WITH_DECL(wxString,WXDLLIMPEXP_PG)
00575 wxPG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">long</span>,WXDLLIMPEXP_PG)
00576 wxPG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">bool</span>,WXDLLIMPEXP_PG)
00577 wxPG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">double</span>,WXDLLIMPEXP_PG)
00578 wxPG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">void</span>,WXDLLIMPEXP_PG)
00579 wxPG_DECLARE_VALUE_TYPE_WITH_DECL(wxArrayString,WXDLLIMPEXP_PG)
00580 
00581 <span class="comment">// Override this to do custom declaration for your macro</span>
00582 <span class="comment">// declared property classes.</span>
00583 #define wxPG_CUSTOM_PROPERTY_CLASS_DECL
00584 
00585 <span class="comment">// Property class declaration helper macros.</span>
00586 
00587 <span class="preprocessor">#define DECLARE_PROPERTY_CLASS(CLASSNAME) \</span>
00588 <span class="preprocessor">    _DECLARE_PROPERTY_CLASS(CLASSNAME) \</span>
00589 <span class="preprocessor">public: \</span>
00590 <span class="preprocessor">    virtual const wxPGValueType* GetValueType () const; \</span>
00591 <span class="preprocessor">    virtual const wxPGEditor* GetEditorClass () const; \</span>
00592 <span class="preprocessor">    _DECLARE_GETCLASSNAME() \</span>
00593 <span class="preprocessor">private:</span>
00594 <span class="preprocessor"></span>
00595 <span class="preprocessor">#define DECLARE_ABSTRACT_PROPERTY_CLASS(CLASSNAME) \</span>
00596 <span class="preprocessor">    _DECLARE_PROPERTY_CLASS(CLASSNAME)</span>
00597 <span class="preprocessor"></span>
00598 <span class="preprocessor">#define DECLARE_DERIVED_PROPERTY_CLASS(CLASSNAME) \</span>
00599 <span class="preprocessor">    _DECLARE_PROPERTY_CLASS(CLASSNAME) \</span>
00600 <span class="preprocessor">public: \</span>
00601 <span class="preprocessor">    _DECLARE_GETCLASSNAME() \</span>
00602 <span class="preprocessor">private:</span>
00603 <span class="preprocessor"></span>
00604 <span class="preprocessor">#define DECLARE_STRING_PROPERTY_WITH_DECL(CLASSNAME,DECL) \</span>
00605 <span class="preprocessor">DECL CLASSNAME : public wxLongStringProperty \</span>
00606 <span class="preprocessor">{ \</span>
00607 <span class="preprocessor">    DECLARE_DERIVED_PROPERTY_CLASS(CLASSNAME) \</span>
00608 <span class="preprocessor">public: \</span>
00609 <span class="preprocessor">    CLASSNAME( const wxString&amp; name, const wxString&amp; label = wxPG_LABEL, const wxString&amp; value = wxPG_EmptyString ); \</span>
00610 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00611 <span class="preprocessor">    virtual bool OnButtonClick ( wxPropertyGrid* propgrid, wxString&amp; value ); \</span>
00612 <span class="preprocessor">};</span>
00613 <span class="preprocessor"></span>
00614 <span class="preprocessor">#define DECLARE_STRING_PROPERTY(CLASSNAME) \</span>
00615 <span class="preprocessor">DECLARE_STRING_PROPERTY_WITH_DECL(CLASSNAME,class)</span>
00616 <span class="preprocessor"></span>
00617 <span class="comment">// -----------------------------------------------------------------------</span>
00618 <span class="comment">// Editor class.</span>
00619 
00620 <span class="preprocessor">#define wxPG_EDITOR(T)          wxPGEditor_##T</span>
00621 <span class="preprocessor"></span>
00622 <span class="preprocessor">#define wxPG_DECLARE_EDITOR_CLASS_WITH_DECL(EDITOR,DECL) \</span>
00623 <span class="preprocessor">extern DECL wxPGEditor* wxPGEditor_##EDITOR; \</span>
00624 <span class="preprocessor">extern DECL wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00625 <span class="preprocessor"></span>
00626 <span class="preprocessor">#define wxPG_DECLARE_EDITOR_CLASS(EDITOR) \</span>
00627 <span class="preprocessor">extern wxPGEditor* wxPGEditor_##EDITOR; \</span>
00628 <span class="preprocessor">extern wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00629 <span class="preprocessor"></span>
00630 wxPG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrl,WXDLLIMPEXP_PG)
00631 wxPG_DECLARE_EDITOR_CLASS_WITH_DECL(Choice,WXDLLIMPEXP_PG)
00632 wxPG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrlAndButton,WXDLLIMPEXP_PG)
00633 #<span class="keywordflow">if</span> wxPG_INCLUDE_CHECKBOX
00634 wxPG_DECLARE_EDITOR_CLASS_WITH_DECL(CheckBox,WXDLLIMPEXP_PG)
00635 #endif
00636 
00637 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGArrEditorClass : <span class="keyword">public</span> wxArrayPtrVoid
00638 {
00639 <span class="keyword">public</span>:
00640     <span class="keyword">inline</span> wxPGEditor&amp; Item(size_t index)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *((wxPGEditor*)wxArrayPtrVoid::Item(index)); }
00641     ~wxPGArrEditorClass();
00642 };
00643 
00644 <span class="comment">// -----------------------------------------------------------------------</span>
00645 
00646 <span class="comment">// This will create interface for wxFlagsProperty derived class</span>
00647 <span class="comment">// named CLASSNAME.</span>
00648 <span class="preprocessor">#define DECLARE_CUSTOM_FLAGS_PROPERTY(CLASSNAME) \</span>
00649 <span class="preprocessor">extern wxPG_CUSTOM_PROPERTY_CLASS_DECL const wxPGValueType *wxPGValueTypelong_##CLASSNAME; \</span>
00650 <span class="preprocessor">class wxPG_CUSTOM_PROPERTY_CLASS_DECL CLASSNAME : public wxFlagsProperty \</span>
00651 <span class="preprocessor">{ \</span>
00652 <span class="preprocessor">    DECLARE_PROPERTY_CLASS(CLASSNAME) \</span>
00653 <span class="preprocessor">public: \</span>
00654 <span class="preprocessor">    CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value = -1 ); \</span>
00655 <span class="preprocessor">    virtual ~CLASSNAME (); \</span>
00656 <span class="preprocessor">};</span>
00657 <span class="preprocessor"></span>
00658 <span class="comment">// -----------------------------------------------------------------------</span>
00659 
00660 <span class="comment">// This will create interface for wxEnumProperty derived class</span>
00661 <span class="comment">// named CLASSNAME.</span>
00662 <span class="preprocessor">#define DECLARE_CUSTOM_ENUM_PROPERTY(CLASSNAME) \</span>
00663 <span class="preprocessor">extern wxPG_CUSTOM_PROPERTY_CLASS_DECL const wxPGValueType *wxPGValueTypelong_##CLASSNAME; \</span>
00664 <span class="preprocessor">class wxPG_CUSTOM_PROPERTY_CLASS_DECL CLASSNAME : public wxEnumProperty \</span>
00665 <span class="preprocessor">{ \</span>
00666 <span class="preprocessor">    DECLARE_PROPERTY_CLASS(CLASSNAME) \</span>
00667 <span class="preprocessor">public: \</span>
00668 <span class="preprocessor">    CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value = -1 ); \</span>
00669 <span class="preprocessor">    virtual ~CLASSNAME (); \</span>
00670 <span class="preprocessor">};</span>
00671 <span class="preprocessor"></span>
00672 <span class="comment">// -----------------------------------------------------------------------</span>
00673 
<a name="l00679"></a><a class="code" href="classwxPGValueType.htm">00679</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGValueType
00680 {
00681 <span class="keyword">public</span>:
00682 
00683     <span class="keyword">virtual</span> ~wxPGValueType() = 0;
00684 
00687     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetTypeName() <span class="keyword">const</span> = 0;
00688 
00693     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetCustomTypeName() <span class="keyword">const</span>;
00694 
00700     <span class="keyword">virtual</span> size_t GetTypeSize() <span class="keyword">const</span> = 0;
00701 
00704     <span class="comment">//virtual bool HasBigData() const = 0;</span>
00705 
00708     <span class="keyword">virtual</span> wxPGVariant GetDefaultValue () <span class="keyword">const</span> = 0;
00709 
00712     <span class="keyword">virtual</span> wxVariant GenerateVariant ( wxPGVariant value, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00713 
00717     <span class="keyword">virtual</span> wxPGProperty* GenerateProperty ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, wxVariant&amp; value ) <span class="keyword">const</span> = 0;
00718 
00721     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) <span class="keyword">const</span> = 0;
00722 
00723 <span class="keyword">protected</span>:
00724 };
00725 
00726 <span class="comment">// -----------------------------------------------------------------------</span>
00727 
00728 
00729 <span class="comment">// Structure for relaying choice/list info.</span>
00730 <span class="keyword">struct </span>wxPGChoiceInfo
00731 {
00732     <span class="keywordtype">int</span>             m_itemCount;
00733     <span class="keyword">const</span> wxChar**  m_arrWxChars;
00734     wxString*       m_arrWxString;
00735 };
00736 
00749 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00750 <span class="preprocessor"></span><span class="comment">// TODO: When time is right, remove public.</span>
00751 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxVariant
00752 #elif wxPG_INCLUDE_WXOBJECT
00753 class WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxObject
00754 #else
<a name="l00755"></a><a class="code" href="classwxPGProperty.htm">00755</a> class WXDLLIMPEXP_PG wxPGProperty
00756 #endif
00757 {
00758     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGPropertyWithChildren;
00759     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
00760     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
00761     _DECLARE_PROPERTY_CLASS(wxPGProperty)
00762 <span class="keyword">public</span>:
00763 
00766     <a class="code" href="classwxPGProperty.htm#a0">wxPGProperty</a>();
00767 
00794     <a class="code" href="classwxPGProperty.htm#a0">wxPGProperty</a>( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
00795 
00797     <span class="keyword">virtual</span> <a class="code" href="classwxPGProperty.htm#a2">~wxPGProperty</a>();
00798 
00840     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
00841 
00844     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
00845 
00846 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00847 <span class="preprocessor"></span>
00849     <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; <a class="code" href="classwxPGProperty.htm#a5">GetValueAsVariant</a> ()<span class="keyword"> const</span>
00850 <span class="keyword">    </span>{
00851         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00852     }
00853 <span class="preprocessor">#else</span>
00854 <span class="preprocessor"></span>
00856     <span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#a5">GetValueAsVariant</a> () <span class="keyword">const</span>;
00857 <span class="preprocessor">#endif</span>
00858 <span class="preprocessor"></span>
00868     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
00869 
00879     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
00880 
00890     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a8">DoSetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">long</span> flags );
00891 
00915     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos,</span>
00916     <span class="comment">//    const wxSize&amp; sz, wxPGCtrlClass** psecondary );</span>
00917 
00922     <span class="keyword">virtual</span> wxSize <a class="code" href="classwxPGProperty.htm#a9">GetImageSize</a>() <span class="keyword">const</span>;
00923 
00942     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a10">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
00943 
00956     <span class="comment">//virtual bool CopyValueFromControl ( wxPGCtrlClass* primary );</span>
00957 
00958 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00959 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#a11">GetClassName</a> ()<span class="keyword"> const</span>
00960 <span class="keyword">    </span>{
00961         <span class="keywordflow">return</span> GetClassInfo()-&gt;GetClassName();
00962     }
00963 <span class="preprocessor">#else</span>
00964 <span class="preprocessor"></span>
00967     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#a11">GetClassName</a> () <span class="keyword">const</span> = 0;
00968 <span class="preprocessor">#endif</span>
00969 <span class="preprocessor"></span>
00981     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGValueType* <a class="code" href="classwxPGProperty.htm#a12">GetValueType</a> () <span class="keyword">const</span> = 0;
00982 
00985     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGEditor* <a class="code" href="classwxPGProperty.htm#a13">GetEditorClass</a> () <span class="keyword">const</span>;
00986 
00989     <span class="comment">//virtual void* GetValuePointer () const;</span>
00990 
00996     <span class="comment">//virtual int GetParentingType() const;</span>
<a name="l00997"></a><a class="code" href="classwxPGProperty.htm#a14">00997</a>     <span class="keyword">inline</span> <span class="keywordtype">signed</span> <span class="keywordtype">char</span> <a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentingType; }
00998 
01003     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a15">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
01004 
01023     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a16">OnCustomPaint</a> ( wxDC&amp; dc,
01024         <span class="keyword">const</span> wxRect&amp; rect, <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata );
01025 
01034     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a17">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxPGVariant value );
01035 
<a name="l01037"></a><a class="code" href="classwxPGProperty.htm#a18">01037</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#a18">GetLabel</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_label; }
01038 
01040     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#a19">GetParentState</a>() <span class="keyword">const</span>;
01041 
01042 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
01043 <span class="preprocessor"></span>
01044     <span class="comment">//inline const wxString&amp; GetName() const { return wxVariant::GetName(); }</span>
01045     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { SetName(str); }
01046 <span class="preprocessor">#else</span>
01047 <span class="preprocessor"></span>
<a name="l01048"></a><a class="code" href="classwxPGProperty.htm#a20">01048</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#a20">GetName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_name; }
01049     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { m_name = str; }
01050 <span class="preprocessor">#endif</span>
01051 <span class="preprocessor"></span>
<a name="l01056"></a><a class="code" href="classwxPGProperty.htm#a22">01056</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a22">GetY</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_y; }
01057 
01058     <span class="comment">//inline void SetValue ( wxPGVariant value, wxPGCtrlClass* primary = (wxPGCtrlClass*)NULL );</span>
01059     <span class="keyword">inline</span> <span class="keywordtype">void</span> UpdateControlValue ( wxPGCtrlClass* primary );
01060 
01061     <span class="keyword">inline</span> wxString GetDisplayedString ()<span class="keyword"> const</span>
01062 <span class="keyword">    </span>{
01063         wxString str;
01064         <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a>(str,FALSE);
01065         <span class="keywordflow">return</span> str;
01066     }
01067 
<a name="l01069"></a><a class="code" href="classwxPGProperty.htm#a25">01069</a>     <span class="keyword">inline</span> wxPGId <a class="code" href="classwxPGProperty.htm#a25">GetId</a>() { <span class="keywordflow">return</span> wxPGIdGen(<span class="keyword">this</span>); }
01070 
<a name="l01072"></a><a class="code" href="classwxPGProperty.htm#a26">01072</a>     <span class="keyword">inline</span> wxPGPropertyWithChildren* <a class="code" href="classwxPGProperty.htm#a26">GetParent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parent; }
01073 
<a name="l01077"></a><a class="code" href="classwxPGProperty.htm#a27">01077</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a27">IsOk</a>()<span class="keyword"> const</span>
01078 <span class="keyword">    </span>{
01079         <span class="keywordflow">return</span> (( m_y &gt;= -1 )?TRUE:FALSE);
01080     }
01081 
01082     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFlagSet( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag )<span class="keyword"> const</span>
01083 <span class="keyword">    </span>{
01084         <span class="keywordflow">return</span> ( m_flags &amp; flag ) ? TRUE : FALSE;
01085     }
01086 
01087     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetFlags()<span class="keyword"> const</span>
01088 <span class="keyword">    </span>{
01089         <span class="keywordflow">return</span> (<span class="keywordtype">long</span>)m_flags;
01090     }
01091 
<a name="l01093"></a><a class="code" href="classwxPGProperty.htm#a30">01093</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a30">IsSubProperty</a>()<span class="keyword"> const</span>
01094 <span class="keyword">    </span>{
01095         wxPGProperty* parent = (wxPGProperty*)m_parent;
01096         <span class="keywordflow">if</span> ( parent &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &lt; 0 &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#p5">m_y</a> &gt; -2 )
01097             <span class="keywordflow">return</span> TRUE;
01098         <span class="keywordflow">return</span> FALSE;
01099     }
01101     <span class="comment">/*inline bool HasCategory() const</span>
01102 <span class="comment">    {</span>
01103 <span class="comment">        return ( (((wxPGProperty*)m_parent)-&gt;GetParentingType()&gt;0) ? TRUE : FALSE );</span>
01104 <span class="comment">    }*/</span>
01105 
01107     size_t <a class="code" href="classwxPGProperty.htm#a31">GetChildCount</a>() <span class="keyword">const</span>;
01108 
01109     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetArrIndex()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrIndex; }
01110 
01111     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetDepth()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_depth; }
01112 
01114 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01115 <span class="preprocessor"></span>
<a name="l01116"></a><a class="code" href="classwxPGProperty.htm#a34">01116</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a34">GetCatIndex</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_category; }
01117 
01118     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCatIndex(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ind) { m_category = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)ind; }
01119 <span class="preprocessor">#endif</span>
01120 <span class="preprocessor"></span>
<a name="l01122"></a><a class="code" href="classwxPGProperty.htm#a36">01122</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a36">GetIndexInParent</a>()<span class="keyword"> const</span>
01123 <span class="keyword">    </span>{
01124         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_arrIndex;
01125     }
01126 
01127     <span class="comment">//inline void SetAsHideable () { m_flags |= wxPG_PROP_HIDEABLE; }</span>
01128 
01129     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags |= flag; }
01130 
01131     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetHelpString ( <span class="keyword">const</span> wxString&amp; help_string ) { m_helpString = help_string; }
01132 
01133     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetHelpString ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_helpString; }
01134 
01135     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags &amp;= ~(flag); }
01136 
01137     <span class="comment">//wxPGPropertyWithChildren* GetNearestVisibleParent ( long hide_state ) const;</span>
01138 
01139     <span class="comment">// Use, for example, to detect if item is inside collapsed section.</span>
01140     <span class="keywordtype">bool</span> IsSomeParent ( wxPGProperty* candidate_parent ) <span class="keyword">const</span>;
01141 
01142     <span class="comment">//inline wxColour GetCellBgColour ( wxPropertyGrid* pg );</span>
01143 
01144 <span class="keyword">protected</span>:
01145 
01146     <span class="comment">// Called in constructors.</span>
01147     <span class="keywordtype">void</span> Init ();
01148 
01149     wxString                    m_label;
01150 <span class="comment">//#if wxPG_EMBED_VARIANT</span>
01151 <span class="comment">//    wxVariant                   m_variant;</span>
01152 <span class="comment">//#else</span>
01153     wxString                    m_name;
01154 <span class="preprocessor">#endif</span>
01155 <span class="preprocessor"></span>    wxPGPropertyWithChildren*   m_parent;
01156     wxString                    m_helpString; <span class="comment">// Help shown in statusbar or help box.</span>
01157     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                m_arrIndex; <span class="comment">// Index in parent.</span>
01158     <span class="keywordtype">int</span>                         m_y; <span class="comment">// This could be short int.</span>
01159     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_flags; <span class="comment">// This could be short int.</span>
01160 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01161 <span class="preprocessor"></span>    <span class="comment">// 0xFF if doesn't belong to a category and is not a category;</span>
01162     <span class="comment">// otherwise index to category table (if is category, then own index)</span>
01163     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_category;
01164 <span class="preprocessor">#endif</span>
01165 <span class="preprocessor"></span>
01166     <span class="comment">// 1 = category</span>
01167     <span class="comment">// 0 = no children</span>
01168     <span class="comment">// -1 = has fixed-set of sub-properties</span>
01169     <span class="comment">// -2 = this is wxParentProperty (sub-properties can be added)</span>
01170     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>                 m_parentingType;
01171 
01172     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depth; <span class="comment">// Root has 0, categories etc. at that level 1, etc.</span>
01173 
01174     <span class="comment">// m_depthBgCol indicates width of background colour between margin and item</span>
01175     <span class="comment">// (essentially this is category's depth, if none then equals m_depth).</span>
01176     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depthBgCol;
01177 
01178     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_bgColIndex; <span class="comment">// Cell background brush index.</span>
01179 
01180 };
01181 
01182 <span class="comment">//</span>
01183 <span class="comment">// wxPGId comparison operators.</span>
01184 <span class="comment">//</span>
01185 
01186 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; b)
01187 {
01188     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01189     <span class="keyword">const</span> wxString&amp; a = <span class="keywordtype">id</span>.GetProperty().GetName();
01190     <span class="keywordflow">return</span> (a.Len() == b.Len()) &amp;&amp; (a.Cmp(b) == 0);
01191 }
01192 
01193 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* b)
01194 {
01195     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01196     <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty().GetName().Cmp(b) == 0;
01197 }
01198 
01199 
01200 <span class="comment">// For dual-pointer-usage reasons, we need to use this trickery</span>
01201 <span class="comment">// instead of wxObjArray.</span>
01202 <span class="keyword">typedef</span> wxArrayPtrVoid wxPGArrayProperty;
01203 
01204 <span class="preprocessor">#if wxUSE_UNICODE</span>
01205 <span class="preprocessor"></span>
01206 <span class="comment">// Always use wxString based hashmap with unicode</span>
01207 WX_DECLARE_STRING_HASH_MAP_WITH_DECL( wxPGProperty*, wxPGHashMapProperty, <span class="keyword">class</span> WXDLLIMPEXP_PG );
01208 <span class="preprocessor"># define wxPGNameStr            const wxString&amp;</span>
01209 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)      STR</span>
01210 <span class="preprocessor"></span>
01211 WX_DECLARE_STRING_HASH_MAP_WITH_DECL( wxPGValueType*, wxPGDictValClassBase, <span class="keyword">class</span> WXDLLIMPEXP_PG );
01212 
01213 <span class="preprocessor">#else</span>
01214 <span class="preprocessor"></span>
01215 WX_DECLARE_HASH_MAP_WITH_DECL( wxChar*,         <span class="comment">// type of the keys</span>
01216                      wxPGProperty*,         <span class="comment">// type of the values</span>
01217                      wxStringHash,          <span class="comment">// hasher</span>
01218                      wxStringEqual,         <span class="comment">// key equality predicate</span>
01219                      wxPGHashMapProperty,   <span class="comment">// name of the class</span>
01220                      <span class="keyword">class</span> WXDLLIMPEXP_PG );
01221 
01222 WX_DECLARE_HASH_MAP_WITH_DECL( wxChar*,         <span class="comment">// type of the keys</span>
01223                      wxPGValueType*,         <span class="comment">// type of the values</span>
01224                      wxStringHash,          <span class="comment">// hasher</span>
01225                      wxStringEqual,         <span class="comment">// key equality predicate</span>
01226                      wxPGDictValClassBase,   <span class="comment">// name of the class</span>
01227                      <span class="keyword">class</span> WXDLLIMPEXP_PG );
01228 
01229 <span class="preprocessor"># define wxPGNameStr         const wxChar*       // Should be same as hashmap type</span>
01230 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)   ((char * const)STR.c_str())</span>
01231 <span class="preprocessor"></span>
01232 <span class="preprocessor">#endif</span>
01233 <span class="preprocessor"></span>
01234 <span class="comment">// Needs a custom destructor.</span>
01235 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGDictValClass : <span class="keyword">public</span> wxPGDictValClassBase
01236 {
01237 <span class="keyword">public</span>:
01238     wxPGDictValClass();
01239     ~wxPGDictValClass();
01240 };
01241 
01242 <span class="comment">// -----------------------------------------------------------------------</span>
01243 
01244 <span class="keyword">union </span>wxPGVariantUnion
01245 {
01246     <span class="keywordtype">long</span>        m_long;
01247     <span class="keywordtype">void</span>*       m_ptr;
01248     <span class="keywordtype">bool</span>        m_bool;
01249 };
01250 
01251 <span class="comment">// Very simple value wrapper.</span>
01252 <span class="keyword">class </span>wxPGVariant
01253 {
01254 <span class="keyword">public</span>:
01255 
01257     wxPGVariant ()
01258     {
01259         m_v.m_ptr = (<span class="keywordtype">void</span>*)NULL;
01260     }
01262     wxPGVariant ( <span class="keywordtype">long</span> v_long )
01263     {
01264         m_v.m_long = v_long;
01265     }
01267     wxPGVariant ( <span class="keywordtype">int</span> v_long )
01268     {
01269         m_v.m_long = v_long;
01270     }
01272     wxPGVariant ( <span class="keywordtype">bool</span> value )
01273     {
01274         m_v.m_bool = value;
01275     }
01277     wxPGVariant ( <span class="keyword">const</span> wxPGFloat&amp; v_ptr )
01278     {
01279         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01280     }
01282     wxPGVariant ( <span class="keyword">const</span> wxString&amp; v_ptr )
01283     {
01284         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01285     }
01287     wxPGVariant ( <span class="keyword">const</span> wxArrayString&amp; v_ptr )
01288     {
01289         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01290     }
01292     wxPGVariant ( <span class="keyword">const</span> wxObject&amp; v_ptr )
01293     {
01294         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01295     }
01297     wxPGVariant ( <span class="keyword">const</span> wxObject* v_ptr )
01298     {
01299         m_v.m_ptr = (<span class="keywordtype">void</span>*)v_ptr;
01300     }
01302     wxPGVariant ( <span class="keywordtype">void</span>* v_ptr )
01303     {
01304         m_v.m_ptr = v_ptr;
01305     }
01306 
01308     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetLong ()<span class="keyword"> const</span>
01309 <span class="keyword">    </span>{
01310         <span class="keywordflow">return</span> m_v.m_long;
01311     }
01313     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetBool ()<span class="keyword"> const</span>
01314 <span class="keyword">    </span>{
01315         <span class="keywordflow">return</span> m_v.m_bool;
01316     }
01318     <span class="keyword">inline</span> wxPGFloat GetDouble ()<span class="keyword"> const</span>
01319 <span class="keyword">    </span>{
01320         <span class="keywordflow">return</span> *((wxPGFloat*)m_v.m_ptr);
01321     }
01323     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetString ()<span class="keyword"> const</span>
01324 <span class="keyword">    </span>{
01325         <span class="comment">//wxPG_ASSERT_VARIANT_GET(wxPGTypePString,m_property-&gt;GetLabel())</span>
01326         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxString*)m_v.m_ptr);
01327         <span class="comment">//wxString temp;</span>
01328         <span class="comment">//m_property-&gt;GetValueAsString(temp);</span>
01329         <span class="comment">//return temp;</span>
01330     }
01332     <span class="keyword">inline</span> wxArrayString&amp; GetArrayString ()<span class="keyword"> const</span>
01333 <span class="keyword">    </span>{
01334         wxArrayString* temp = (wxArrayString*)m_v.m_ptr;
01335         <span class="keywordflow">return</span> *temp;
01336     }
01337 
01338     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject&amp; GetWxObject()<span class="keyword"> const</span>
01339 <span class="keyword">    </span>{
01340         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxObject*)m_v.m_ptr);
01341     }
01342 
01343     <span class="keyword">inline</span> wxObject* GetWxObjectPtr()<span class="keyword"> const</span>
01344 <span class="keyword">    </span>{
01345         <span class="keywordflow">return</span> (wxObject*)m_v.m_ptr;
01346     }
01347 
01349     <span class="comment">//wxVariant GetVariant () const;</span>
01350 
01352     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetVoidPtr ()<span class="keyword"> const</span>
01353 <span class="keyword">    </span>{
01354         <span class="keywordflow">return</span> m_v.m_ptr;
01355     }
01356 
01358     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetRawLong ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_long; }
01359 
01361     <span class="comment">//inline wxPGFloat GetRawFloat () const { return m_v.m_float; }</span>
01362 
01364     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetRawPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_ptr; }
01365 
01367     <span class="comment">//wxObject* GetWxObjectPtr () const;</span>
01368 
01369 <span class="preprocessor">#undef wxPG_ASSERT_VARIANT_GET</span>
01370 <span class="preprocessor"></span>
01372     <span class="comment">//const wxPGProperty*       m_property;</span>
01373 
01375     wxPGVariantUnion          m_v;
01376 };
01377 
01378 <span class="preprocessor">#define wxPGVariantToString(A)      A.GetString()</span>
01379 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToLong(A)        A.GetLong()</span>
01380 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToBool(A)        A.GetBool()</span>
01381 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToDouble(A)      A.GetDouble()</span>
01382 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToArrayString(A) A.GetArrayString()</span>
01383 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObject(A)        A.GetWxObject()</span>
01384 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObjectPtr(A,B)   wxDynamicCast((wxObject*)A.GetRawPtr(),B);</span>
01385 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToVoidPtr(A)     A.GetVoidPtr()</span>
01386 <span class="preprocessor"></span>
01387 <span class="preprocessor">#define wxPGVariantFromString(A)        A</span>
01388 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromLong(A)          A</span>
01389 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromDouble(A)        A</span>
01390 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromArrayString(A)   A</span>
01391 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromBool(A)          A</span>
01392 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromWxObject(A)      *((const wxObject*)A)</span>
01393 <span class="preprocessor"></span>
01394 <span class="comment">// -----------------------------------------------------------------------</span>
01395 
01396 <span class="preprocessor">#if !wxPG_EMBED_VARIANT</span>
<a name="l01397"></a><a class="code" href="classwxPGProperty.htm#a5">01397</a> <span class="preprocessor"></span><span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#a5">wxPGProperty::GetValueAsVariant</a> ()<span class="keyword"> const</span>
01398 <span class="keyword"></span>{
01399     wxPGVariant value = <a class="code" href="classwxPGProperty.htm#a4">GetValue</a>();
01400     <span class="keyword">const</span> wxPGValueType* typeclass = <a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>();
01401     wxASSERT_MSG ( typeclass, wxT(<span class="stringliteral">"Did you forgot to use wxPG_INIT_REQUIRED_TYPE(T) in constructor?"</span>) );
01402     <span class="keywordflow">return</span> typeclass-&gt;<a class="code" href="classwxPGValueType.htm#a5">GenerateVariant</a>(value,m_name);
01403     <span class="comment">//return GetValueType()-&gt;GenerateVariant(GetValue(),m_name);</span>
01404 }
01405 <span class="preprocessor">#endif</span>
01406 <span class="preprocessor"></span>
01407 <span class="comment">// -----------------------------------------------------------------------</span>
01408 
<a name="l01414"></a><a class="code" href="classwxPGPropertyWithChildren.htm">01414</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren : <span class="keyword">public</span> wxPGProperty
01415 {
01416     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
01417     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01418     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01419     _DECLARE_PROPERTY_CLASS(wxPGPropertyWithChildren)
01420 <span class="keyword">public</span>:
01421 
01423     wxPGPropertyWithChildren();
01424 
01429     wxPGPropertyWithChildren( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01430 
01432     <span class="keyword">virtual</span> ~wxPGPropertyWithChildren();
01433 
01434     <span class="comment">//virtual int GetParentingType() const;</span>
01435 
01438     <span class="comment">//int GetTotalChildCount () const;</span>
01439 
01443     <span class="comment">// Advanced version that gives property list and index to this item</span>
01444     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01445 
01449     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01450 
01453     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshChildren();
01454 
01458     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ChildChanged ( wxPGProperty* p );
01459 
<a name="l01461"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a7">01461</a>     <span class="keyword">inline</span> size_t GetCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.GetCount(); }
01462 
<a name="l01464"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a8">01464</a>     <span class="keyword">inline</span> wxPGProperty* Item ( size_t i )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Item(i); }
01465 
<a name="l01467"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a9">01467</a>     <span class="keyword">inline</span> wxPGProperty* Last ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Last(); }
01468 
<a name="l01470"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a10">01470</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> Index ( <span class="keyword">const</span> wxPGProperty* p )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.Index((<span class="keywordtype">void</span>*)p); }
01471 
01473     <span class="comment">//void DoRefreshChildren();</span>
01474 
01476     <span class="keywordtype">void</span> Empty();
01477 
01478     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsExpanded()<span class="keyword"> const</span>
01479 <span class="keyword">    </span>{
01480         <span class="keywordflow">return</span> ( m_expanded &gt; 0 ) ? TRUE : FALSE;
01481     }
01482 
<a name="l01483"></a><a class="code" href="classwxPGPropertyWithChildren.htm#a13">01483</a>     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#a19">GetParentState</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentState; }
01484 
01485     <span class="comment">// Puts correct indexes to children</span>
01486     <span class="keywordtype">void</span> FixIndexesOfChildren ( size_t starthere = 0 );
01487 
01488     wxPGProperty* GetItemAtY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lh );
01489 
01490     <span class="keywordtype">void</span> AddChild ( wxPGProperty* prop, <span class="keywordtype">int</span> index = -1, <span class="keywordtype">bool</span> correct_mode = TRUE );
01491 
01492     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetParentState ( wxPropertyGridState* pstate ) { m_parentState = pstate; }
01493 
01494 <span class="keyword">protected</span>:
01495 
01496     wxPropertyGridState*    m_parentState;
01497 
01498     wxPGArrayProperty   m_children;
01499     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_expanded;
01500 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01501 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_ctIndex; <span class="comment">// index in category table, 0xFF if not category</span>
01502 <span class="preprocessor">#endif</span>
01503 <span class="preprocessor"></span>};
01504 
01505 <span class="comment">// -----------------------------------------------------------------------</span>
01506 
<a name="l01511"></a><a class="code" href="classwxPGRootProperty.htm">01511</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGRootProperty : <span class="keyword">public</span> wxPGPropertyWithChildren
01512 {
01513     DECLARE_PROPERTY_CLASS(wxPGRootProperty)
01514 <span class="keyword">public</span>:
01515 
01517     wxPGRootProperty();
01518     <span class="keyword">virtual</span> ~wxPGRootProperty();
01519 
01521     <span class="comment">//virtual int GetParentingType() const;</span>
01522 
01523 <span class="keyword">protected</span>:
01524 };
01525 
01526 <span class="comment">// -----------------------------------------------------------------------</span>
01527 
<a name="l01532"></a><a class="code" href="classwxPropertyCategory.htm">01532</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyCategory : <span class="keyword">public</span> wxPGPropertyWithChildren
01533 {
01534     DECLARE_PROPERTY_CLASS(wxPropertyCategory)
01535 <span class="keyword">public</span>:
01536 
01538     wxPropertyCategory();
01539 
01547     wxPropertyCategory( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
01548     ~wxPropertyCategory();
01549 
01551     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a3">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01552 
01553     <span class="comment">//virtual int GetParentingType() const;</span>
01554 
01555     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetTextExtent()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_textExtent; }
01556 
01557     <span class="keyword">inline</span> <span class="keywordtype">void</span> CalculateTextExtent ( wxWindow* wnd, wxFont&amp; font )
01558     {
01559         <span class="keywordtype">int</span> x = 0, y = 0;
01560             wnd-&gt;GetTextExtent( m_label, &amp;x, &amp;y, 0, 0, &amp;font );
01561         m_textExtent = x;
01562     }
01563 
01564 <span class="keyword">protected</span>:
01565     <span class="keywordtype">int</span> m_textExtent; <span class="comment">// pre-calculated length of text</span>
01566 };
01567 
01568 <span class="comment">// -----------------------------------------------------------------------</span>
01569 
<a name="l01574"></a><a class="code" href="classwxPGConstants.htm">01574</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGConstants
01575 {
01576 <span class="keyword">public</span>:
01577     
01579     wxPGConstants();
01580 
01582     wxPGConstants( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01583 
01587     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01588 
01590     <span class="keywordtype">void</span> Add ( wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL );
01591 
<a name="l01593"></a><a class="code" href="classwxPGConstants.htm#a4">01593</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Add ( wxArrayString&amp; arr, <span class="keyword">const</span> wxArrayInt&amp; arrint )
01594     {
01595         Add ( arr, (<span class="keyword">const</span> <span class="keywordtype">long</span>*)(&amp;arrint.Item(0)) );
01596     }
01597 
01599     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar* label, <span class="keywordtype">long</span> value = -1 );
01600 
<a name="l01602"></a><a class="code" href="classwxPGConstants.htm#a6">01602</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 )
01603     {
01604         Free();
01605         Add(labels,values,itemcount);
01606     }
01607 
<a name="l01609"></a><a class="code" href="classwxPGConstants.htm#a7">01609</a>     <span class="keywordtype">void</span> Set ( wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL )
01610     {
01611         Free();
01612         Add(arr,values);
01613     }
01614 
01615   
01616     <span class="keyword">const</span> wxChar** GetStrArrBase () { <span class="keywordflow">return</span> (<span class="keyword">const</span> wxChar**)(&amp;m_arrLabels.Item(0)); }
01617     <span class="keyword">const</span> <span class="keywordtype">long</span>* GetIntArrBase ()
01618     {
01619         <span class="keywordflow">if</span> ( m_arrValues.GetCount() &lt; 1 )
01620             <span class="keywordflow">return</span> NULL;
01621         <span class="keywordflow">return</span> (<span class="keyword">const</span> <span class="keywordtype">long</span>*)(&amp;m_arrValues.Item(0));
01622     }
01623     size_t GetCount () { <span class="keywordflow">return</span> m_arrLabels.GetCount(); }
01624 
01626     ~wxPGConstants();
01627 
01628 <span class="keyword">protected</span>:
01629 
01630     wxArrayString   m_arrLabels;
01631     wxArrayLong     m_arrValues;
01632 
01633     <span class="keywordtype">void</span> Init () { }
01634     <span class="keywordtype">void</span> Free ();
01635 
01636 };
01637 
01638 <span class="comment">// -----------------------------------------------------------------------</span>
01639 
01640 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
01641 <span class="preprocessor"></span>
01642 <span class="comment">// This is a simple property which holds sub-properties. Has default editing textctrl</span>
01643 <span class="comment">// based editing capability. In essence, it is a category that has look and feel</span>
01644 <span class="comment">// of a property, and which children can be edited via the textctrl.</span>
01645 <span class="keyword">class </span>WXDLLIMPEXP_PG wxParentProperty : <span class="keyword">public</span> wxPGPropertyWithChildren
01646 {
01647     DECLARE_PROPERTY_CLASS(wxParentProperty)
01648 <span class="keyword">public</span>:
01649 
01650     wxParentProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
01651     <span class="keyword">virtual</span> ~wxParentProperty ();
01652 
01653     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01654     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01655     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** secondary );</span>
01656 
01657     <span class="comment">//virtual int GetParentingType() const;</span>
01658     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a6">ChildChanged</a> ( wxPGProperty* p );
01659 
01660     <span class="comment">//void RefreshChildren();</span>
01661 
01662 <span class="keyword">protected</span>:
01663     wxString    m_string;
01664 };
01665 
01666 <span class="comment">// -----------------------------------------------------------------------</span>
01667 
01668 <span class="comment">//typedef wxPGProperty wxPGTextCtrlProperty;</span>
01669 <span class="comment">//typedef wxPGProperty wxPGChoiceProperty;</span>
01670 
01671 <span class="comment">// -----------------------------------------------------------------------</span>
01672 
01673 <span class="keyword">class </span>WXDLLIMPEXP_PG wxStringProperty : <span class="keyword">public</span> wxPGProperty
01674 {
01675     DECLARE_PROPERTY_CLASS(wxStringProperty)
01676 <span class="keyword">public</span>:
01677 
01678     wxStringProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL, <span class="keyword">const</span> wxString&amp; value = wxPG_EmptyString );
01679     <span class="keyword">virtual</span> ~wxStringProperty();
01680 
01681     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01682     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01683     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01684     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01685     <span class="comment">//virtual bool CopyValueFromControl ( wxPGCtrlClass* primary );</span>
01686 
01687 <span class="keyword">protected</span>:
01688     wxString    m_value;
01689 };
01690 
01691 <span class="keyword">typedef</span> wxPGProperty <a class="code" href="classwxPGProperty.htm">wxPGBaseTextCtrlProperty</a>;
01692 
01693 <span class="comment">// -----------------------------------------------------------------------</span>
01694 
01695 <span class="keyword">class </span>WXDLLIMPEXP_PG wxIntProperty : <span class="keyword">public</span> wxPGProperty
01696 {
01697     DECLARE_PROPERTY_CLASS(wxIntProperty)
01698 <span class="keyword">public</span>:
01699 
01700     wxIntProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL, <span class="keywordtype">long</span> value = 0 );
01701     <span class="keyword">virtual</span> ~wxIntProperty ();
01702 
01703     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01704     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01705     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01706     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01707 
01708 <span class="keyword">protected</span>:
01709     <span class="keywordtype">long</span>        m_long;
01710 };
01711 
01712 <span class="comment">// -----------------------------------------------------------------------</span>
01713 
01714 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFloatProperty : <span class="keyword">public</span> wxPGProperty
01715 {
01716     DECLARE_PROPERTY_CLASS(wxFloatProperty)
01717 <span class="keyword">public</span>:
01718 
01719     wxFloatProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
01720         <span class="keywordtype">int</span> precision = 6, wxPGFloat value = 0.0 );
01721     wxFloatProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
01722         wxPGFloat value = 0.0 );
01723     <span class="keyword">virtual</span> ~wxFloatProperty ();
01724 
01725     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01726     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01727     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01728     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01729     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a17">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxPGVariant value );
01730 
01731 <span class="keyword">protected</span>:
01732     <span class="keywordtype">double</span>          m_float;
01733     <span class="keywordtype">int</span>             m_precision;
01734 };
01735 
01736 <span class="comment">// -----------------------------------------------------------------------</span>
01737 
01738 <span class="preprocessor">#define wxPG_PROP_USE_CHECKBOX      wxPG_PROP_CLASS_SPECIFIC</span>
01739 <span class="preprocessor"></span>
01740 <span class="keyword">class </span>WXDLLIMPEXP_PG wxBoolProperty : <span class="keyword">public</span> wxPGProperty
01741 {
01742     DECLARE_PROPERTY_CLASS(wxBoolProperty)
01743 <span class="keyword">public</span>:
01744 
01745     wxBoolProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL, <span class="keywordtype">bool</span> value = FALSE );
01746     <span class="keyword">virtual</span> ~wxBoolProperty ();
01747 
01748     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01749     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01750     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01751     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01752     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a8">DoSetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">long</span> flags );
01753     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** secondary );</span>
01754     <span class="comment">//virtual bool CopyValueFromControl ( wxPGCtrlClass* primary );</span>
01755     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a15">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
01756     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a17">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxPGVariant value );
01757 
01759     <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice );
01760 
01761     <span class="comment">/*static inline void SetEditor ( wxPGEditor* editor )</span>
01762 <span class="comment">    {</span>
01763 <span class="comment">        wxASSERT ( editor );</span>
01764 <span class="comment">        ms_pEditorClass = editor;</span>
01765 <span class="comment">    }*/</span>
01766 
01767 <span class="keyword">protected</span>:
01768     <span class="keywordtype">int</span>                     m_index;
01769 
01770     <span class="comment">//bool                    m_value_bool;</span>
01771 
01772     <span class="keyword">static</span> wxString         ms_bool_prop_items[2];
01773     <span class="keyword">static</span> wxPGEditor*      ms_pEditorClass;
01774 };
01775 
01776 <span class="comment">// -----------------------------------------------------------------------</span>
01777 
01778 <span class="keyword">class </span>WXDLLIMPEXP_PG wxEnumProperty : <span class="keyword">public</span> wxPGProperty
01779 {
01780     DECLARE_PROPERTY_CLASS(wxEnumProperty)
01781 <span class="keyword">public</span>:
01782 
01783     wxEnumProperty() { }
01784 
01785     wxEnumProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxChar** labels,
01786         <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
01787     wxEnumProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
01788         wxPGConstants&amp; constants, <span class="keywordtype">int</span> value = 0 );
01789     <span class="keyword">virtual</span> ~wxEnumProperty ();
01790 
01791     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01792     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01793     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01794     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01795     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a8">DoSetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">long</span> flags );
01796     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a15">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
01797     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** secondary );</span>
01798     <span class="comment">//virtual bool CopyValueFromControl ( wxPGCtrlClass* primary );</span>
01799 
01800 <span class="keyword">protected</span>:
01801     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>            m_itemCount;
01802     <span class="keyword">const</span> wxChar**          m_arrLabels;
01803     <span class="keyword">const</span> <span class="keywordtype">long</span>*             m_arrValues;
01804 
01805     <span class="keywordtype">int</span>                       m_index;
01806 };
01807 
01808 <span class="comment">// -----------------------------------------------------------------------</span>
01809 
01810 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFlagsProperty : <span class="keyword">public</span> wxPGPropertyWithChildren
01811 {
01812     DECLARE_PROPERTY_CLASS(wxFlagsProperty)
01813 <span class="keyword">public</span>:
01814 
01815     wxFlagsProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxChar** labels,
01816         <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">long</span> value = 0 );
01817     wxFlagsProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
01818         wxPGConstants&amp; constants, <span class="keywordtype">long</span> value = 0 );
01819     <span class="keyword">virtual</span> ~wxFlagsProperty ();
01820 
01821     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01822     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01823     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a3">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01824     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a4">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01825     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** psecondary );</span>
01826     <span class="comment">//virtual bool CopyValueFromControl ( wxPGCtrlClass* primary );</span>
01827 
01828     <span class="comment">//virtual int GenerateChildren ( wxPropertyGrid* propgrid );</span>
01829     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a6">ChildChanged</a> ( wxPGProperty* p );
01830 
01831     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a5">RefreshChildren</a>();
01832 
01833 <span class="keyword">protected</span>:
01834     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>            m_itemCount;
01835     <span class="keyword">const</span> wxChar**          m_arrLabels;
01836     <span class="keyword">const</span> <span class="keywordtype">long</span>*             m_arrValues;
01837 
01838     <span class="keywordtype">long</span>                    m_value;
01839 
01840     <span class="comment">// Converts string id to a relevant bit.</span>
01841     <span class="keywordtype">long</span> IdToBit ( <span class="keyword">const</span> wxString&amp; <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
01842 
01843     <span class="comment">// Creates children and sets value.</span>
01844     <span class="keywordtype">void</span> Init ( <span class="keywordtype">long</span> value );
01845 
01846 };
01847 
01848 <span class="comment">// -----------------------------------------------------------------------</span>
01849 
01851 <span class="preprocessor">#define wxPG_PROP_SHOWFULLFILENAME  wxPG_PROP_CLASS_SPECIFIC</span>
01852 <span class="preprocessor"></span>
01853 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFileProperty : <span class="keyword">public</span> wxPGProperty
01854 {
01855     DECLARE_PROPERTY_CLASS(wxFileProperty)
01856 <span class="keyword">public</span>:
01857 
01858     wxFileProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL, <span class="keyword">const</span> wxString&amp; wildcard = wxT(<span class="stringliteral">"*.*"</span>),
01859         <span class="keywordtype">bool</span> showfullpath = FALSE, <span class="keyword">const</span> wxString&amp; value = wxPG_EmptyString );
01860     <span class="keyword">virtual</span> ~wxFileProperty ();
01861 
01862     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01863     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01864     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01865     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01866     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** secondary );</span>
01867     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a10">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
01868     <span class="comment">//virtual bool CopyValueFromControl ( wxPGCtrlClass* primary );</span>
01869 
01870     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a17">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxPGVariant value );
01871     <span class="comment">//inline void SetWildcard ( const wxChar* wildcard ) { m_wildcard = wildcard; };</span>
01872 
01873 <span class="keyword">protected</span>:
01874     wxString    m_wildcard;
01875     wxString    m_fnstr; <span class="comment">// needed for return value</span>
01876     wxFileName  m_filename; <span class="comment">// used as primary storage</span>
01877     <span class="keywordtype">int</span>         m_indFilter; <span class="comment">// index to the selected filter</span>
01878 };
01879 
01880 <span class="comment">// -----------------------------------------------------------------------</span>
01881 
01882 <span class="keyword">class </span>WXDLLIMPEXP_PG wxLongStringProperty : <span class="keyword">public</span> wxPGProperty
01883 {
01884     DECLARE_PROPERTY_CLASS(wxLongStringProperty)
01885 <span class="keyword">public</span>:
01886 
01887     wxLongStringProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL, <span class="keyword">const</span> wxString&amp; value = wxPG_EmptyString );
01888     <span class="keyword">virtual</span> ~wxLongStringProperty ();
01889 
01890     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01891     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01892     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01893     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01894     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** secondary );</span>
01895     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a10">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
01896     <span class="comment">//virtual bool CopyValueFromControl ( wxPGCtrlClass* primary );</span>
01897 
01902     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnButtonClick ( wxPropertyGrid* propgrid, wxString&amp; value );
01903 
01905     <span class="keyword">static</span> wxString&amp; ExpandEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
01906 
01908     <span class="keyword">static</span> wxString&amp; CreateEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
01909 
01910 <span class="keyword">protected</span>:
01911     wxString    m_value;
01912 };
01913 
01914 <span class="comment">// -----------------------------------------------------------------------</span>
01915 
01916 DECLARE_STRING_PROPERTY_WITH_DECL(wxDirProperty,<span class="keyword">class</span> WXDLLIMPEXP_PG)
01917 
01918 <span class="comment">// -----------------------------------------------------------------------</span>
01919 
01920 
<a name="l01927"></a><a class="code" href="classwxArrayStringProperty.htm">01927</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxArrayStringProperty : <span class="keyword">public</span> wxPGProperty
01928 {
01929     DECLARE_PROPERTY_CLASS(wxArrayStringProperty)
01930 <span class="keyword">public</span>:
01931 
01932     wxArrayStringProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
01933         <span class="keyword">const</span> wxArrayString&amp; array = wxArrayString() );
01934     <span class="keyword">virtual</span> ~wxArrayStringProperty ();
01935 
01936     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
01937     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">GetValue</a> () <span class="keyword">const</span>;
01938     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( wxString&amp; dst, <span class="keywordtype">bool</span> full = FALSE ) <span class="keyword">const</span>;
01939     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">long</span> flags );
01940     <span class="comment">//virtual wxPGCtrlClass* CreateEditor ( wxPropertyGrid* propgrid, const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** secondary );</span>
01941     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a10">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
01942 
01943 <span class="keyword">protected</span>:
01944 
01945     <span class="keywordtype">void</span> GenerateValueAsString ();
01946 
01947     wxArrayString   m_array;
01948     wxString        m_display; <span class="comment">// Cache displayed text since generating it is relatively complicated.</span>
01949 };
01950 
01951 
01952 <span class="preprocessor">#endif // wxPG_INCLUDE_BASICPROPS</span>
01953 <span class="preprocessor"></span>
01954 <span class="comment">// -----------------------------------------------------------------------</span>
01955 
01961 <span class="comment">// BM_STATE</span>
<a name="l01962"></a><a class="code" href="classwxPropertyGridState.htm">01962</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridState
01963 {
01964     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
01965     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01966 <span class="preprocessor">#if wxPG_INCLUDE_MANAGER</span>
01967 <span class="preprocessor"></span>    <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
01968 <span class="preprocessor">#endif</span>
01969 <span class="preprocessor"></span><span class="keyword">public</span>:
01970 
01972     wxPropertyGridState();
01973 
01975     ~wxPropertyGridState();
01976 
01978     wxPGId Append ( wxPGProperty* property );
01979 
01980     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGPropertyWithChildren* pwc, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
01981     {
01982         wxPGProperty* p = NewProperty(label,propname,value);
01983         <span class="keywordflow">if</span> ( p ) <span class="keywordflow">return</span> Insert(pwc,-1,p);
01984         <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
01985     }
01986 
01988     wxPGId GetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
01989 
01991     <span class="keywordtype">void</span> Clear ();
01992 
01993     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGProperty* p );
01994 
01995     <span class="keyword">static</span> <span class="keywordtype">void</span> ClearPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
01996     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
01997 
01998     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGProperty* p );
01999 
02000     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
02001 
02002     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
02003 
02004     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
02005 
02007     <span class="keywordtype">bool</span> EnableProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> enable );
02008 
02009     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
02010 
02011     <span class="keywordtype">void</span> ExpandAll ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> do_expand );
02012 
<a name="l02014"></a><a class="code" href="classwxPropertyGridState.htm#a14">02014</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
02015 <span class="keyword">    </span>{
02016         wxPGProperty* p = (wxPGProperty*) NULL;
02017         <span class="keywordflow">if</span> ( m_properties-&gt;GetCount() )
02018             p = m_properties-&gt;Item(0);
02019         <span class="keywordflow">return</span> wxPGIdGen(p);
02020     }
02021 
02022     wxPGId GetFirstCategory () <span class="keyword">const</span>;
02023 
02024     wxPGId GetFirstProperty () <span class="keyword">const</span>;
02025 
02026     wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02027 
02028     wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02029 
02030     <span class="keyword">static</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> );
02031 
02032     <span class="keyword">static</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> );
02033 
02034     wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02035 
02036     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name, wxPGPropertyWithChildren* parent  = (wxPGPropertyWithChildren*) NULL ) <span class="keyword">const</span>;
02037 
02038     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname, wxPGId baseparent, <span class="keywordtype">long</span> flags ) <span class="keyword">const</span>;
02039 
02041     wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* property );
02042 
02043     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsDisplayed() <span class="keyword">const</span>;
02044 
02045     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsInNonCatMode()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">bool</span>)(m_properties == m_abcArray); }
02046 
02048     <span class="keywordtype">void</span> InitNonCatMode ();
02049 
02050     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGProperty* p, <span class="keywordtype">bool</span> limit = TRUE );
02051 
02057     wxPGProperty* NewProperty ( <span class="keyword">const</span> wxString &amp;label, <span class="keyword">const</span> wxString &amp;name, wxVariant&amp; value ) <span class="keyword">const</span>;
02058 
02059     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGProperty* p, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags );
02060 
02061     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
02062 
02063     <span class="keywordtype">void</span> SetPropVal( wxPGProperty* p, wxPGVariant value );
02064 
02065     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
02066 
02067     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
02068 
02069     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; value );
02070 
02071     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxVariant&amp; value );
02072 
02073     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxObject* value );
02074 
<a name="l02076"></a><a class="code" href="classwxPropertyGridState.htm#a35">02076</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">long</span> value )
02077     {
02078         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
02079     }
<a name="l02081"></a><a class="code" href="classwxPropertyGridState.htm#a36">02081</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">int</span> value )
02082     {
02083         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
02084     }
<a name="l02086"></a><a class="code" href="classwxPropertyGridState.htm#a37">02086</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, wxPGFloat value )
02087     {
02088         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
02089     }
<a name="l02091"></a><a class="code" href="classwxPropertyGridState.htm#a38">02091</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">bool</span> value )
02092     {
02093         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
02094     }
<a name="l02096"></a><a class="code" href="classwxPropertyGridState.htm#a39">02096</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayString&amp; value )
02097     {
02098         SetPropertyValue ( p, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
02099     }
<a name="l02101"></a><a class="code" href="classwxPropertyGridState.htm#a40">02101</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">void</span>* value )
02102     {
02103         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
02104     }
<a name="l02106"></a><a class="code" href="classwxPropertyGridState.htm#a41">02106</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPoint&amp; value )
02107     {
02108         wxASSERT ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxPoint"</span>)) == 0 );
02109         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), (<span class="keywordtype">void</span>*)&amp;value );
02110     }
<a name="l02112"></a><a class="code" href="classwxPropertyGridState.htm#a42">02112</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxSize&amp; value )
02113     {
02114         wxASSERT ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxSize"</span>)) == 0 );
02115         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), (<span class="keywordtype">void</span>*)&amp;value );
02116     }
<a name="l02118"></a><a class="code" href="classwxPropertyGridState.htm#a43">02118</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayInt&amp; value )
02119     {
02120         wxASSERT ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxArrayInt"</span>)) == 0 );
02121         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), (<span class="keywordtype">void</span>*)&amp;value );
02122     }
02123     
02124     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category );
02125 
02126     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGProperty* p );
02127 
02128     <span class="keywordtype">void</span> Sort ( wxPGProperty* p );
02129     <span class="keywordtype">void</span> Sort ();
02130 
02131 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
02132 <span class="preprocessor"></span><span class="keyword">protected</span>:
02133     
02134     <span class="keywordtype">int</span> PrepareToAddItem ( wxPGProperty* property, wxPGPropertyWithChildren* scheduled_parent );
02135 
02137     wxPropertyGrid*             m_pPropGrid;
02138 
02140     wxPGPropertyWithChildren*   m_properties;
02141 
02143     wxPGRootProperty            m_regularArray;
02144 
02146     wxPGRootProperty*           m_abcArray;
02147 
02149     wxPGHashMapProperty         m_dictName;
02150 
02152     wxPropertyCategory*         m_currentCategory;
02153 
02155     wxPGProperty*               m_selected;
02156 
02158     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_lastCaptionBottomnest;
02163     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_itemsAdded;
02164 
02166     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_anyModified;
02167 
02168 <span class="preprocessor">#endif</span>
02169 <span class="preprocessor"></span>};
02170 
02171 <span class="comment">// -----------------------------------------------------------------------</span>
02172 
02173 <span class="comment">// Internal flags</span>
02174 <span class="preprocessor">#define wxPG_FL_INITIALIZED                 0x0001</span>
02175 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ACTIVATION_BY_CLICK         0x0002 // Set when creating editor controls if it was clicked on.</span>
02176 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DONT_CENTER_SPLITTER        0x0004</span>
02177 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_FOCUSED                     0x0008</span>
02178 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_CAPTURED              0x0010</span>
02179 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_INSIDE                0x0020</span>
02180 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_VALUE_MODIFIED              0x0040</span>
02181 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_PRIMARY_FILLS_ENTIRE        0x0080 // don't clear background of m_wnd_primary</span>
02182 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CUR_USES_CUSTOM_IMAGE       0x0100 // currently active editor uses custom image</span>
02183 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_HIDE_STATE                  0x0200 // set when hideable properties should be hidden</span>
02184 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLED                    0x0400</span>
02185 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ADDING_HIDEABLES            0x0800 // set when all added/inserted properties get hideable flag</span>
02186 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_NOSTATUSBARHELP             0x1000 // Disables showing help strings on statusbar.</span>
02187 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CREATEDSTATE                0x2000 // Marks that we created the state, so we have to destroy it too.</span>
02188 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLBAR_DETECTED          0x4000 // Set if scrollbar's existence was detected in last onresize.</span>
02189 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DESC_REFRESH_REQUIRED       0x8000 // Set if wxPGMan requires redrawing of description text box.</span>
02190 <span class="preprocessor"></span>
02191 <span class="comment">// -----------------------------------------------------------------------</span>
02192 
02193 <span class="preprocessor">#define wxPG_USE_STATE  m_pState</span>
02194 <span class="preprocessor"></span>
<a name="l02254"></a><a class="code" href="classwxPropertyGrid.htm">02254</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGrid : <span class="keyword">public</span> wxScrolledWindow
02255 {
02256     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
02257 <span class="preprocessor">#if wxPG_INCLUDE_MANAGER</span>
02258 <span class="preprocessor"></span>    <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
02259 <span class="preprocessor">#endif</span>
02260 <span class="preprocessor"></span>
02261         DECLARE_CLASS(wxPropertyGrid)
02262 
02263 <span class="keyword">public</span>:
02267     wxPropertyGrid();
02268 
02273     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
02274                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
02275                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
02276                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga16">wxPG_DEFAULT_STYLE</a>,
02277                                 <span class="comment">//const wxValidator &amp;validator = wxDefaultValidator,</span>
02278                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
02279 
02281     <span class="keyword">virtual</span> ~wxPropertyGrid();
02282 
02284     <span class="comment">//inline wxPGId Add ( wxPGProperty* property ) { return Append ( property ); }</span>
02285 
02297     wxPGId Append ( wxPGProperty* property );
02298 
02299     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
02300     {
02301         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxPropertyCategory(label,name) );
02302     }
02303 
02304 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
02305 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxPG_EmptyString )
02306     {
02307         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxStringProperty(label,name,value) );
02308     }
02309 
02310     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
02311     {
02312         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxIntProperty(label,name,value) );
02313     }
02314 
02315     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
02316     {
02317         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxFloatProperty(label,name,6,value) );
02318     }
02319 
02320     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
02321     {
02322         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxBoolProperty(label,name,value) );
02323     }
02324 <span class="preprocessor">#endif</span>
02325 <span class="preprocessor"></span>
02326     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, wxPGProperty* property )
02327     {
02328         <span class="keywordflow">return</span> Insert(<span class="keywordtype">id</span>,-1,property);
02329     }
02330 
02331     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, wxPGProperty* property )
02332     {
02333         <span class="keywordflow">return</span> Insert(GetPropertyByName(name),-1,property);
02334     }
02335 
02336     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
02337     {
02338         wxPGProperty* p = m_pState-&gt;NewProperty(label,propname,value);
02339         <span class="keywordflow">if</span> ( p )
02340             <span class="keywordflow">return</span> Insert(wxPGIdToPtr(<span class="keywordtype">id</span>),-1,p);
02341         <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
02342     }
02343 
02344     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
02345     {
02346         wxPGProperty* p = m_pState-&gt;NewProperty(label,propname,value);
02347         <span class="keywordflow">if</span> ( p )
02348             <span class="keywordflow">return</span> Insert(wxPGIdToPtr(GetPropertyByName(name)),-1,p);
02349         <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
02350     }
02351 
02357     <span class="keyword">static</span> <span class="keywordtype">void</span> AutoGetTranslation ( <span class="keywordtype">bool</span> enable );
02358 
02362     <span class="keywordtype">void</span> CenterSplitter ( <span class="keywordtype">bool</span> enable_auto_centering );
02363 
02368     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
02369                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
02370                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
02371                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga16">wxPG_DEFAULT_STYLE</a>,
02372                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
02373 
02377     <span class="keywordtype">void</span> Clear ();
02378 
<a name="l02381"></a><a class="code" href="classwxPropertyGrid.htm#a16">02381</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> )
02382     {
02383         m_pState-&gt;ClearModifiedStatus(wxPGIdToPtr(<span class="keywordtype">id</span>));
02384     }
02385 
<a name="l02388"></a><a class="code" href="classwxPropertyGrid.htm#a17">02388</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
02389     {
02390         m_pState-&gt;ClearModifiedStatus(m_pState-&gt;m_properties);
02391         m_pState-&gt;m_anyModified = FALSE;
02392     }
02393 
02395     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGId <span class="keywordtype">id</span> );
02396 
<a name="l02398"></a><a class="code" href="classwxPropertyGrid.htm#a19">02398</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGNameStr name )
02399     {
02400         <span class="keywordflow">return</span> ClearPropertyValue ( GetPropertyByName(name) );
02401     }
02402 
02404     <span class="keywordtype">void</span> ClearSelection ();
02405 
<a name="l02409"></a><a class="code" href="classwxPropertyGrid.htm#a21">02409</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGId p ) { <span class="keywordflow">return</span> Collapse ( &amp;GetPropertyById(p)); }
02410 
<a name="l02414"></a><a class="code" href="classwxPropertyGrid.htm#a22">02414</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name )
02415     {
02416         <span class="keywordflow">return</span> Collapse ( wxPGIdToPtr ( GetPropertyByName(name) ) );
02417     }
02418 
<a name="l02421"></a><a class="code" href="classwxPropertyGrid.htm#a23">02421</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll () { m_pState-&gt;ExpandAll(0); }
02422 
02424     <span class="keywordtype">void</span> Compact( <span class="keywordtype">bool</span> compact );
02425 
<a name="l02427"></a><a class="code" href="classwxPropertyGrid.htm#a25">02427</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> )
02428     {
02429         Delete ( wxPGIdToPtr(<span class="keywordtype">id</span>) );
02430     }
02431 
<a name="l02433"></a><a class="code" href="classwxPropertyGrid.htm#a26">02433</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGNameStr name )
02434     {
02435         Delete ( wxPGIdToPtr ( GetPropertyByName(name) ) );
02436     }
02437 
<a name="l02439"></a><a class="code" href="classwxPropertyGrid.htm#a27">02439</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
02440 
<a name="l02442"></a><a class="code" href="classwxPropertyGrid.htm#a28">02442</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
02443 
<a name="l02445"></a><a class="code" href="classwxPropertyGrid.htm#a29">02445</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
02446 
<a name="l02448"></a><a class="code" href="classwxPropertyGrid.htm#a30">02448</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
02449 
02451     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
02452 
<a name="l02454"></a><a class="code" href="classwxPropertyGrid.htm#a32">02454</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Enable ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE )
02455     {
02456         <span class="keywordflow">return</span> EnableProperty ( <span class="keywordtype">id</span>, enable );
02457     }
02458 
<a name="l02460"></a><a class="code" href="classwxPropertyGrid.htm#a33">02460</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Enable ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE )
02461     {
02462         <span class="keywordflow">return</span> EnableProperty ( name, enable );
02463     }
02464 
02466     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
02467 
<a name="l02469"></a><a class="code" href="classwxPropertyGrid.htm#a35">02469</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE )
02470     {
02471         <span class="keywordflow">return</span> EnableProperty ( GetPropertyByName(name), enable );
02472     }
02473 
02477     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> );
02478 
<a name="l02482"></a><a class="code" href="classwxPropertyGrid.htm#a37">02482</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name ) 
02483     {
02484         <span class="keywordflow">return</span> EnsureVisible ( GetPropertyByName(name) );
02485     }
02486 
<a name="l02490"></a><a class="code" href="classwxPropertyGrid.htm#a38">02490</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> Expand ( &amp;GetPropertyById(<span class="keywordtype">id</span>) ); }
02491 
<a name="l02495"></a><a class="code" href="classwxPropertyGrid.htm#a39">02495</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGNameStr name )
02496     {
02497         <span class="keywordflow">return</span> Expand ( wxPGIdToPtr ( GetPropertyByName(name) ) );
02498     }
02499 
<a name="l02502"></a><a class="code" href="classwxPropertyGrid.htm#a40">02502</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ExpandAll () { m_pState-&gt;ExpandAll(1); }
02503 
<a name="l02512"></a><a class="code" href="classwxPropertyGrid.htm#a41">02512</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxPG_EmptyString,
02513         wxPGId baseparent = wxPGIdGen((wxPGProperty*)NULL), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
02514 <span class="keyword">    </span>{
02515         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyValues(listname,baseparent,flags);
02516     }
02517 
02518     <span class="keyword">inline</span> wxFont* GetCaptionFont() { <span class="keywordflow">return</span> &amp;m_captionFont; }
02519 
<a name="l02521"></a><a class="code" href="classwxPropertyGrid.htm#a43">02521</a>     <span class="keyword">inline</span> wxColour GetCaptionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapFore; }
02522 
<a name="l02524"></a><a class="code" href="classwxPropertyGrid.htm#a44">02524</a>     <span class="keyword">inline</span> wxColour GetCellBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropBack; }
02525 
<a name="l02527"></a><a class="code" href="classwxPropertyGrid.htm#a45">02527</a>     <span class="keyword">inline</span> wxColour GetCellTextColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropFore; }
02528 
<a name="l02531"></a><a class="code" href="classwxPropertyGrid.htm#a46">02531</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
02532     {
02533         <span class="keywordflow">return</span> GetChildrenCount( wxPGIdGen(m_pState-&gt;m_properties) );
02534     }
02535 
<a name="l02537"></a><a class="code" href="classwxPropertyGrid.htm#a47">02537</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02538 <span class="keyword">    </span>{
02539         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02540         <span class="keywordflow">return</span> wxPGIdToRef(<span class="keywordtype">id</span>).GetChildCount();
02541     }
02542 
<a name="l02544"></a><a class="code" href="classwxPropertyGrid.htm#a48">02544</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( GetPropertyByName(name) ); }
02545 
<a name="l02547"></a><a class="code" href="classwxPropertyGrid.htm#a49">02547</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
02548 <span class="keyword">    </span>{
02549         <span class="keywordflow">return</span> m_pState-&gt;GetFirst();
02550     }
02551 
<a name="l02557"></a><a class="code" href="classwxPropertyGrid.htm#a50">02557</a>     <span class="keyword">inline</span> wxPGId GetFirstVisible ()<span class="keyword"> const</span>
02558 <span class="keyword">    </span>{
02559         wxPGProperty* p = NULL;
02560         <span class="keywordflow">if</span> ( m_pState-&gt;m_properties-&gt;GetCount() )
02561         {
02562             p = m_pState-&gt;m_properties-&gt;Item(0);
02563             <span class="keywordflow">if</span> ( (m_iFlags &amp; wxPG_FL_HIDE_STATE) &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga3">wxPG_PROP_HIDEABLE</a> )
02564                 p = GetNeighbourItem ( p, TRUE, 1 );
02565         }
02566         <span class="keywordflow">return</span> wxPGIdGen(p);
02567     }
02568 
<a name="l02570"></a><a class="code" href="classwxPropertyGrid.htm#a51">02570</a>     <span class="keywordtype">int</span> GetFontHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fontHeight; }
02571 
<a name="l02575"></a><a class="code" href="classwxPropertyGrid.htm#a52">02575</a>     wxPropertyGrid* GetGrid() { <span class="keywordflow">return</span> <span class="keyword">this</span>; }
02576 
<a name="l02578"></a><a class="code" href="classwxPropertyGrid.htm#a53">02578</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
02579 <span class="keyword">    </span>{
02580         <span class="keywordflow">return</span> m_pState-&gt;GetFirstCategory ();
02581     }
02582 
<a name="l02588"></a><a class="code" href="classwxPropertyGrid.htm#a54">02588</a>     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGId parent )
02589     {
02590         wxASSERT ( wxPGIdIsOk(parent) );
02591         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
02592         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#a7">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
02593         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#a8">Item</a>(0));
02594     }
02595     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetFirstChild( GetPropertyByName(name) ); }
02596 
<a name="l02598"></a><a class="code" href="classwxPropertyGrid.htm#a56">02598</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()
02599     {
02600         <span class="keywordflow">return</span> m_pState-&gt;GetFirstProperty();
02601     }
02602 
<a name="l02606"></a><a class="code" href="classwxPropertyGrid.htm#a57">02606</a>     wxPGId GetItemAtY ( <span class="keywordtype">int</span> y ) { <span class="keywordflow">return</span> wxPGIdGen(DoGetItemAtY(y)); }
02607 
<a name="l02610"></a><a class="code" href="classwxPropertyGrid.htm#a58">02610</a>     <span class="keyword">inline</span> wxPGId GetLastProperty ()
02611     {
02612         <span class="keywordflow">if</span> ( !m_pState-&gt;m_properties-&gt;GetCount() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
02613         wxPGProperty* p = GetLastItem (FALSE, FALSE);
02614         <span class="keywordflow">if</span> ( p-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &gt; 0 )
02615             <span class="keywordflow">return</span> GetPrevProperty ( wxPGIdGen(p) );
02616         <span class="keywordflow">return</span> wxPGIdGen(p);
02617     }
02618 
<a name="l02623"></a><a class="code" href="classwxPropertyGrid.htm#a59">02623</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
02624     {
02625         wxASSERT ( wxPGIdIsOk(parent) );
02626         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
02627         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#a7">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
02628         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#a9">Last</a>());
02629     }
02630     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( GetPropertyByName(name) ); }
02631 
<a name="l02634"></a><a class="code" href="classwxPropertyGrid.htm#a61">02634</a>     <span class="keyword">inline</span> wxPGId GetLastVisible ()
02635     {
02636         <span class="keywordflow">return</span> wxPGIdGen ( GetLastItem (TRUE, TRUE) );
02637     }
02638 
<a name="l02640"></a><a class="code" href="classwxPropertyGrid.htm#a62">02640</a>     <span class="keyword">inline</span> wxColour GetLineColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colLine; }
02641 
<a name="l02645"></a><a class="code" href="classwxPropertyGrid.htm#a63">02645</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )
02646     {
02647         <span class="keywordflow">return</span> m_pState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
02648     }
02649 
<a name="l02651"></a><a class="code" href="classwxPropertyGrid.htm#a64">02651</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02652 <span class="keyword">    </span>{
02653         <span class="keywordflow">return</span> m_pState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
02654     }
02655 
<a name="l02657"></a><a class="code" href="classwxPropertyGrid.htm#a65">02657</a>     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> )
02658     {
02659         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(<span class="keywordtype">id</span>);
02660     }
02661     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGNameStr name )
02662     {
02663         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(GetPropertyByName(name));
02664     }
02665 
<a name="l02671"></a><a class="code" href="classwxPropertyGrid.htm#a67">02671</a>     <span class="keyword">inline</span> wxPGId GetNextVisible ( wxPGId property )<span class="keyword"> const</span>
02672 <span class="keyword">    </span>{
02673         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
02674             TRUE, 1 ) );
02675     }
02676 
<a name="l02680"></a><a class="code" href="classwxPropertyGrid.htm#a68">02680</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )
02681     {
02682         <span class="keywordflow">return</span> m_pState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
02683     }
02684 
<a name="l02686"></a><a class="code" href="classwxPropertyGrid.htm#a69">02686</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
02687     {
02688         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
02689     }
02690     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
02691     {
02692         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(GetPropertyByName(name));
02693     }
02694 
<a name="l02697"></a><a class="code" href="classwxPropertyGrid.htm#a71">02697</a>     <span class="keyword">inline</span> wxPGId GetPrevVisible ( wxPGId property )
02698     {
02699         wxASSERT ( wxPGIdIsOk(property) );
02700         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
02701             TRUE, -1 ) );
02702     }
02703 
<a name="l02707"></a><a class="code" href="classwxPropertyGrid.htm#a72">02707</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02708 <span class="keyword">    </span>{
02709         <span class="keywordflow">return</span> wxPGIdGen ( GetPropertyCategory ( wxPGIdToPtr(<span class="keywordtype">id</span>) ) );
02710     }
02711     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGNameStr name )
02712     {
02713         <span class="keywordflow">return</span> GetPropertyCategory ( GetPropertyByName(name) );
02714     }
02715 
<a name="l02717"></a><a class="code" href="classwxPropertyGrid.htm#a74">02717</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02718 <span class="keyword">    </span>{
02719         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClassName();
02720     }
02721 
<a name="l02723"></a><a class="code" href="classwxPropertyGrid.htm#a75">02723</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGNameStr name )<span class="keyword"> const</span>
02724 <span class="keyword">    </span>{
02725         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByNameWithAssert(name))-&gt;GetClassName();
02726     }
02727 
02729     wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02730     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
02731 <span class="keyword">    </span>{
02732         <span class="keywordflow">return</span> GetPropertyColour(GetPropertyByName(name));
02733     }
02734     
<a name="l02736"></a><a class="code" href="classwxPropertyGrid.htm#a78">02736</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02737 <span class="keyword">    </span>{
02738         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02739         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_helpString;
02740     }
02741 
<a name="l02743"></a><a class="code" href="classwxPropertyGrid.htm#a79">02743</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGNameStr name )<span class="keyword"> const</span>
02744 <span class="keyword">    </span>{
02745         <span class="keywordflow">return</span> GetPropertyHelpString(GetPropertyByNameWithAssert(name));
02746     }
02747 
<a name="l02749"></a><a class="code" href="classwxPropertyGrid.htm#a80">02749</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGId <span class="keywordtype">id</span> )
02750     {
02751         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02752         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetIndexInParent();
02753     }
02754 
<a name="l02756"></a><a class="code" href="classwxPropertyGrid.htm#a81">02756</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGNameStr name )
02757     {
02758         <span class="keywordflow">return</span> GetPropertyIndex ( GetPropertyByName(name) );
02759     }
02760 
<a name="l02762"></a><a class="code" href="classwxPropertyGrid.htm#a82">02762</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGId <span class="keywordtype">id</span> )
02763     {
02764         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02765         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_label;
02766     }
02767     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGNameStr name )
02768     {
02769         <span class="keywordflow">return</span> GetPropertyLabel ( GetPropertyByName(name) );
02770     }
02771 
<a name="l02773"></a><a class="code" href="classwxPropertyGrid.htm#a84">02773</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyName ( wxPGId <span class="keywordtype">id</span> )
02774     {
02775         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02776         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetName();
02777     }
02778 
<a name="l02780"></a><a class="code" href="classwxPropertyGrid.htm#a85">02780</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGId <span class="keywordtype">id</span> )
02781     {
02782         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02783         <span class="keywordflow">return</span> wxPGIdGen(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParent());
02784     }
02785 
<a name="l02787"></a><a class="code" href="classwxPropertyGrid.htm#a86">02787</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGNameStr name )
02788     {
02789         <span class="keywordflow">return</span> GetPropertyParent ( GetPropertyByName(name) );
02790     }
02791 
<a name="l02793"></a><a class="code" href="classwxPropertyGrid.htm#a87">02793</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority ( wxPGId <span class="keywordtype">id</span> )
02794     {
02795         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02796         <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#a28">IsFlagSet</a>(<a class="code" href="group__propflags.htm#ga3">wxPG_PROP_HIDEABLE</a>) )
02797             <span class="keywordflow">return</span> wxPG_LOW;
02798         <span class="keywordflow">return</span> wxPG_HIGH;
02799     }
02800 
02807 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02808 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02809 #<span class="keywordflow">else</span>    
<a name="l02810"></a><a class="code" href="classwxPropertyGrid.htm#a88">02810</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02811 #endif
02812     {
02813         <span class="comment">//return wxPGVariant ( wxPGIdToPtr ( id )-&gt;GetValue() );</span>
02814         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02815         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02816     }
02817 
02825 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02826 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGNameStr name )
02827 #<span class="keywordflow">else</span>    
<a name="l02828"></a><a class="code" href="classwxPropertyGrid.htm#a89">02828</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGNameStr name )
02829 #endif
02830     {
02831         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02832         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02833         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02834     }
02835 
02836     <span class="keyword">static</span> wxString GetPropertyValueAsString ( wxPGId <span class="keywordtype">id</span> );
02837     <span class="keyword">static</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGId <span class="keywordtype">id</span> );
02838     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(<span class="keywordtype">id</span>); }
02839     <span class="keyword">static</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGId <span class="keywordtype">id</span> );
02840     <span class="keyword">static</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGId <span class="keywordtype">id</span> );
02841     <span class="keyword">static</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGId <span class="keywordtype">id</span> );
02842     <span class="keyword">static</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGId <span class="keywordtype">id</span> );
02843     <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ( wxPGId <span class="keywordtype">id</span> );
02844     
02845     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGId <span class="keywordtype">id</span> )
02846     {
02847         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02848         wxASSERT ( p );
02849     
02850         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxPoint"</span>)) != 0 )
02851         {
02852             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxPoint"</span>));
02853             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)NULL);
02854         }
02855         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#a4">GetValue</a>()));
02856     }
02857 
02858     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGId <span class="keywordtype">id</span> )
02859     {
02860         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02861         wxASSERT ( p );
02862 
02863         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxSize"</span>)) != 0 )
02864         {
02865             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxSize"</span>));
02866             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)NULL);
02867         }
02868         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#a4">GetValue</a>()));
02869     }
02870 
02871     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGId <span class="keywordtype">id</span> )
02872     {
02873         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02874         wxASSERT ( p );
02875 
02876         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#a12">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#a2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxArrayInt"</span>)) != 0 )
02877         {
02878             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxArrayInt"</span>));
02879             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)NULL);
02880         }
02881         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#a4">GetValue</a>()));
02882     }
02883 
02884     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGNameStr name )<span class="keyword"> const</span>
02885 <span class="keyword">    </span>{
02886         <span class="keywordflow">return</span> GetPropertyValueAsString ( GetPropertyByName(name) );
02887     }
02888     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGNameStr name )<span class="keyword"> const</span>
02889 <span class="keyword">    </span>{
02890         <span class="keywordflow">return</span> GetPropertyValueAsLong ( GetPropertyByName(name) );
02891     }
02892     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGNameStr name )<span class="keyword"> const</span>
02893 <span class="keyword">    </span>{
02894         <span class="keywordflow">return</span> GetPropertyValueAsInt ( GetPropertyByName(name) );
02895     }
02896     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGNameStr name )<span class="keyword"> const</span>
02897 <span class="keyword">    </span>{
02898         <span class="keywordflow">return</span> GetPropertyValueAsBool ( GetPropertyByName(name) );
02899     }
02900     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGNameStr name )<span class="keyword"> const</span>
02901 <span class="keyword">    </span>{
02902         <span class="keywordflow">return</span> GetPropertyValueAsDouble ( GetPropertyByName(name) );
02903     }
02904     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGNameStr name )<span class="keyword"> const</span>
02905 <span class="keyword">    </span>{
02906         <span class="keywordflow">return</span> GetPropertyValueAsArrayString ( GetPropertyByName(name) );
02907     }
02908     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGNameStr name )<span class="keyword"> const</span>
02909 <span class="keyword">    </span>{
02910         <span class="keywordflow">return</span> GetPropertyValueAsWxObjectPtr ( GetPropertyByName(name) );
02911     }
02912     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGNameStr name )<span class="keyword"> const</span>
02913 <span class="keyword">    </span>{
02914         <span class="keywordflow">return</span> GetPropertyValueAsPoint ( GetPropertyByName(name) );
02915     }
02916     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGNameStr name )<span class="keyword"> const</span>
02917 <span class="keyword">    </span>{
02918         <span class="keywordflow">return</span> GetPropertyValueAsSize ( GetPropertyByName(name) );
02919     }
02920     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGNameStr name )<span class="keyword"> const</span>
02921 <span class="keyword">    </span>{
02922         <span class="keywordflow">return</span> GetPropertyValueAsArrayInt ( GetPropertyByName(name) );
02923     }
02924 
<a name="l02928"></a><a class="code" href="classwxPropertyGrid.htm#a100">02928</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGId <span class="keywordtype">id</span> )
02929     {
02930         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02931         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType();
02932     }
02933     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGNameStr name )
02934     {
02935         <span class="keywordflow">return</span> wxPGIdToPtr( GetPropertyByNameWithAssert(name) )-&gt;GetValueType();
02936     }
02937 
<a name="l02943"></a><a class="code" href="classwxPropertyGrid.htm#a102">02943</a>     <span class="keyword">inline</span> wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name )<span class="keyword"> const</span>
02944 <span class="keyword">    </span>{
02945         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyByLabel(name);
02946     }
02947 
<a name="l02952"></a><a class="code" href="classwxPropertyGrid.htm#a103">02952</a>     <span class="keyword">inline</span> wxPGId GetPropertyByName ( wxPGNameStr name )<span class="keyword"> const</span>
02953 <span class="keyword">    </span>{
02954         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyByName(name);
02955     }
02956 
02957     <span class="keyword">inline</span> wxPGId GetPropertyByNameWithAssert ( wxPGNameStr name )<span class="keyword"> const</span>
02958 <span class="keyword">    </span>{
02959         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02960         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02961         <span class="keywordflow">return</span> <span class="keywordtype">id</span>;
02962     }
02963 
<a name="l02967"></a><a class="code" href="classwxPropertyGrid.htm#a105">02967</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_pState-&gt;m_properties); }
02968 
<a name="l02970"></a><a class="code" href="classwxPropertyGrid.htm#a106">02970</a>     <span class="keywordtype">int</span> GetRowHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_lineHeight; }
02971 
02972     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> GetSelection(); }
02973 
<a name="l02975"></a><a class="code" href="classwxPropertyGrid.htm#a108">02975</a>     <span class="keyword">inline</span> wxPGId GetSelection ()<span class="keyword"> const</span>
02976 <span class="keyword">    </span>{
02977         <span class="keywordflow">return</span> wxPGIdGen(m_selected);
02978     }
02979 
<a name="l02981"></a><a class="code" href="classwxPropertyGrid.htm#a109">02981</a>     <span class="keyword">inline</span> wxColour GetSelectionBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelBack; }
02982 
<a name="l02984"></a><a class="code" href="classwxPropertyGrid.htm#a110">02984</a>     <span class="keyword">inline</span> wxColour GetSelectionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelFore; }
02985 
<a name="l02987"></a><a class="code" href="classwxPropertyGrid.htm#a111">02987</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSplitterPosition ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_splitterx; }
02988 
02989     <span class="keyword">inline</span> wxPropertyGridState* GetState()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pState; }
02990 
02994     <span class="comment">//wxPropertyGridState* GetCopyOfState() const;</span>
02995 
<a name="l02997"></a><a class="code" href="classwxPropertyGrid.htm#a113">02997</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetVerticalSpacing ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)m_vspacing; }
02998 
<a name="l03000"></a><a class="code" href="classwxPropertyGrid.htm#a114">03000</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasSelection()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((m_selected!=(wxPGProperty*)NULL)?TRUE:FALSE); }
03001 
<a name="l03003"></a><a class="code" href="classwxPropertyGrid.htm#a115">03003</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideLowPriority() { Compact ( TRUE ); }
03004 
03005 <span class="preprocessor">#if wxPG_INCLUDE_ADVPROPS</span>
03006 <span class="preprocessor"></span>
03010     <span class="keyword">static</span> <span class="keywordtype">void</span> InitAllTypeHandlers ();
03011 <span class="preprocessor">#else</span>
03012 <span class="preprocessor"></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> InitAllTypeHandlers () { }
03013 <span class="preprocessor">#endif</span>
03014 <span class="preprocessor"></span>
<a name="l03065"></a><a class="code" href="classwxPropertyGrid.htm#a116">03065</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId priorthis, wxPGProperty* newproperty )
03066     {
03067         wxPGId res = Insert ( wxPGIdToPtr( priorthis ), newproperty );
03068         DrawItems ( newproperty, (wxPGProperty*) NULL );
03069         <span class="keywordflow">return</span> res;
03070     }
<a name="l03072"></a><a class="code" href="classwxPropertyGrid.htm#a117">03072</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, wxPGProperty* newproperty )
03073     {
03074         wxPGId res = Insert ( wxPGIdToPtr ( GetPropertyByName(name) ), newproperty );
03075         DrawItems ( newproperty, (wxPGProperty*) NULL );
03076         <span class="keywordflow">return</span> res;
03077     }
03078 
<a name="l03080"></a><a class="code" href="classwxPropertyGrid.htm#a118">03080</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03081     {
03082         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr (<span class="keywordtype">id</span>), index, newproperty );
03083         DrawItems ( newproperty, (wxPGProperty*) NULL );
03084         <span class="keywordflow">return</span> res;
03085     }
03086 
<a name="l03088"></a><a class="code" href="classwxPropertyGrid.htm#a119">03088</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03089     {
03090         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr ( GetPropertyByName(name) ), index, newproperty );
03091         DrawItems ( newproperty, (wxPGProperty*) NULL );
03092         <span class="keywordflow">return</span> res;
03093     }
03094 
03095     <span class="keyword">inline</span> wxPGId InsertCategory ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
03096     {
03097         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxPropertyCategory(label,name) );
03098     }
03099 
03100 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
03101 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxPG_EmptyString )
03102     {
03103         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxStringProperty(label,name,value) );
03104     }
03105 
03106     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
03107     {
03108         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxIntProperty(label,name,value) );
03109     }
03110 
03111     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
03112     {
03113         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxFloatProperty(label,name,6,value) );
03114     }
03115 
03116     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
03117     {
03118         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxBoolProperty(label,name,value) );
03119     }
03120 <span class="preprocessor">#endif</span>
03121 <span class="preprocessor"></span>
<a name="l03123"></a><a class="code" href="classwxPropertyGrid.htm#a125">03123</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsAnyModified ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pState-&gt;m_anyModified&gt;0); }
03124 
<a name="l03126"></a><a class="code" href="classwxPropertyGrid.htm#a126">03126</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03127 <span class="keyword">    </span>{
03128         <span class="keywordflow">return</span> (!(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_flags &amp; <a class="code" href="group__propflags.htm#ga1">wxPG_PROP_DISABLED</a>))?TRUE:FALSE;
03129     }
03130 
<a name="l03132"></a><a class="code" href="classwxPropertyGrid.htm#a127">03132</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyEnabled(GetPropertyByName(name)); }
03133 
<a name="l03135"></a><a class="code" href="classwxPropertyGrid.htm#a128">03135</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_frozen&gt;0)?TRUE:FALSE; }
03136 
<a name="l03138"></a><a class="code" href="classwxPropertyGrid.htm#a129">03138</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestr )
03139     {
03140         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03141         <span class="keywordflow">return</span> (wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetTypeName(),typestr) == 0);
03142     }
03143 
<a name="l03145"></a><a class="code" href="classwxPropertyGrid.htm#a130">03145</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* valuetype )
03146     {
03147         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03148         <span class="keywordflow">return</span> ( wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType() == valuetype );
03149     }
03150 
<a name="l03152"></a><a class="code" href="classwxPropertyGrid.htm#a131">03152</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxClassInfo* classinfo )
03153     {
03154         <span class="keywordflow">return</span> IsPropertyValueType(<span class="keywordtype">id</span>,classinfo-&gt;GetClassName());
03155     }
03156 
<a name="l03158"></a><a class="code" href="classwxPropertyGrid.htm#a132">03158</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxChar* typestr )
03159     {
03160         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),typestr);
03161     }
03162 
<a name="l03164"></a><a class="code" href="classwxPropertyGrid.htm#a133">03164</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxPGValueType* valuetype )
03165     {
03166         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),valuetype);
03167     }
03168 
<a name="l03170"></a><a class="code" href="classwxPropertyGrid.htm#a134">03170</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxClassInfo* classinfo )
03171     {
03172         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),classinfo);
03173     }
03174 
<a name="l03176"></a><a class="code" href="classwxPropertyGrid.htm#a135">03176</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03177 <span class="keyword">    </span>{
03178         <span class="keywordflow">return</span> ( m_selected == wxPGIdToPtr( <span class="keywordtype">id</span> ) ) ? TRUE : FALSE;
03179     }
03180 
<a name="l03182"></a><a class="code" href="classwxPropertyGrid.htm#a136">03182</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertySelected(GetPropertyByName(name)); }
03183 
03187     <span class="keyword">static</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGId <span class="keywordtype">id</span> );
03188     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyExpanded(GetPropertyByName(name)); }
03189 
<a name="l03193"></a><a class="code" href="classwxPropertyGrid.htm#a138">03193</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03194 <span class="keyword">    </span>{
03195         wxPGProperty* p = wxPGIdToPtr ( <span class="keywordtype">id</span> );
03196         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
03197         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
03198     }
03199 
03200     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsModified(GetPropertyByName(name)); }
03201 
<a name="l03203"></a><a class="code" href="classwxPropertyGrid.htm#a140">03203</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03204 <span class="keyword">    </span>{
03205         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
03206     }
03207     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyCategory(GetPropertyByName(name)); }
03208 
<a name="l03212"></a><a class="code" href="classwxPropertyGrid.htm#a142">03212</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03213 <span class="keyword">    </span>{
03214         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
03215         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
03216         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
03217     }
03218     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyModified(GetPropertyByName(name)); }
03219 
<a name="l03222"></a><a class="code" href="classwxPropertyGrid.htm#a144">03222</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03223 <span class="keyword">    </span>{
03224         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
03225         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
03226         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#p6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga6">wxPG_PROP_UNSPECIFIED</a>) ? TRUE : FALSE );
03227     }
03228     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyValueUnspecified(GetPropertyByName(name)); }
03229 
03232     <span class="comment">/*inline bool IsSubProperty ( wxPGId property ) const</span>
03233 <span class="comment">    {</span>
03234 <span class="comment">        return property.GetProperty().IsSubProperty();</span>
03235 <span class="comment">    }</span>
03236 <span class="comment">    inline bool IsSubProperty ( wxPGNameStr name ) { return IsSubProperty(GetPropertyByName(name)); }*/</span>
03237 
03241     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
03242 
<a name="l03246"></a><a class="code" href="classwxPropertyGrid.htm#a147">03246</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE )
03247     {
03248         LimitPropertyEditing(GetPropertyByName(name),limit);
03249     }
03250 
03253     <span class="comment">/*inline bool PropertyHasCategory ( wxPGId id ) const</span>
03254 <span class="comment">    {</span>
03255 <span class="comment">        return ( wxPGIdToRef(id).HasCategory() );</span>
03256 <span class="comment">    }</span>
03257 <span class="comment">    inline bool PropertyHasCategory ( wxPGNameStr name ) { return PropertyHasCategory(GetPropertyByName(name)); }*/</span>
03258 
03261     <span class="comment">/*inline bool PropertyHasSubProperties ( wxPGId id )</span>
03262 <span class="comment">    {</span>
03263 <span class="comment">        return (wxPGIdToRef(id).GetParentingType() &lt; 0);</span>
03264 <span class="comment">    }</span>
03265 <span class="comment">    inline bool PropertyHasSubProperties ( wxPGNameStr name ) { return PropertyHasSubProperties(GetPropertyByName(name)); }*/</span>
03266 
03268     <span class="keywordtype">void</span> RedrawAllVisible ();
03269 
03272     <span class="comment">/*inline void Refresh ()</span>
03273 <span class="comment">    {</span>
03274 <span class="comment">        wxScrolledWindow::Refresh ( FALSE );</span>
03275 <span class="comment">    }*/</span>
03276 
03283     <span class="keyword">static</span> wxPGValueType* RegisterValueType ( wxPGValueType* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03284 
03289     <span class="keyword">static</span> wxPGEditor* RegisterEditorClass ( wxPGEditor* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03290 
03293     <span class="keywordtype">void</span> ResetColours();
03294 
03299 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
<a name="l03300"></a><a class="code" href="classwxPropertyGrid.htm#e16">03300</a> <span class="preprocessor"></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice )
03301     {
03302         wxBoolProperty::SetBoolChoices(true_choice,false_choice);
03303     }
03304 <span class="preprocessor">#endif</span>
03305 <span class="preprocessor"></span>
<a name="l03308"></a><a class="code" href="classwxPropertyGrid.htm#a150">03308</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
03309     {
03310         wxPropertyCategory* pc = (wxPropertyCategory*)wxPGIdToPtr(<span class="keywordtype">id</span>);
03311 <span class="preprocessor">#ifdef __WXDEBUG__</span>
03312 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &gt; 0 );
03313 <span class="preprocessor">#endif</span>
03314 <span class="preprocessor"></span>        m_pState-&gt;m_currentCategory = pc;
03315     }
03316 
<a name="l03319"></a><a class="code" href="classwxPropertyGrid.htm#a151">03319</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name = wxPG_EmptyString )
03320     {
03321         SetCurrentCategory(GetPropertyByName(name));
03322     }
03323 
03325     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03326 
<a name="l03335"></a><a class="code" href="classwxPropertyGrid.htm#a153">03335</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0 )
03336     {
03337         wxPropertyGridState::SetPropertyAttribute(wxPGIdToPtr(<span class="keywordtype">id</span>),attrid,value,arg_flags);
03338     }
03339     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGNameStr name, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0  )
03340     {
03341         SetPropertyAttribute(GetPropertyByName(name),attrid,value,arg_flags);
03342     }
03343 
03347     <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col );
03348     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
03349     {
03350         SetPropertyColour ( GetPropertyByName(name), col );
03351     }
03352 
<a name="l03354"></a><a class="code" href="classwxPropertyGrid.htm#a157">03354</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
03355     {
03356         SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
03357     }
03358     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
03359     {
03360         SetColourIndex ( wxPGIdToPtr(GetPropertyByName(name)), 0 );
03361     }
03362 
03364     <span class="comment">//bool SetCategoryColour ( wxPGId id, const wxColour&amp; col, bool is_default = FALSE );</span>
03365 
03367     <span class="comment">/*inline bool SetCategoryColour ( wxPGNameStr name, const wxColour&amp; col, bool is_default = FALSE )</span>
03368 <span class="comment">    {</span>
03369 <span class="comment">        return SetCategoryColour ( GetPropertyByName(name), col, is_default );</span>
03370 <span class="comment">    }*/</span>
03371 
03372     <span class="comment">/*inline bool SetCategoryColourToDefault ( wxPGId id )</span>
03373 <span class="comment">    {</span>
03374 <span class="comment">        return SetCategoryColour ( id, m_colPropBack, TRUE );</span>
03375 <span class="comment">    }*/</span>
03376 
03378     <span class="comment">/*inline bool SetCategoryColourToDefault ( wxPGNameStr name )</span>
03379 <span class="comment">    {</span>
03380 <span class="comment">        return SetCategoryColour ( name, m_colPropBack, TRUE );</span>
03381 <span class="comment">    }*/</span>
03382 
03384     <span class="keywordtype">void</span> SetCaptionForegroundColour(<span class="keyword">const</span> wxColour&amp; col);
03385 
03389     <span class="keywordtype">void</span> SetCellBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03390 
03394     <span class="keywordtype">void</span> SetCellTextColour(<span class="keyword">const</span> wxColour&amp; col);
03395 
03397     <span class="keywordtype">void</span> SetLineColour(<span class="keyword">const</span> wxColour&amp; col);
03398 
03400     <span class="keywordtype">void</span> SetSelectionBackground(<span class="keyword">const</span> wxColour&amp; col);
03401 
03403     <span class="keywordtype">void</span> SetSelectionForeground(<span class="keyword">const</span> wxColour&amp; col);
03404 
03406     <span class="keywordtype">void</span> SetSplitterPosition ( <span class="keywordtype">int</span> newxpos, <span class="keywordtype">bool</span> refresh = TRUE );
03407 
<a name="l03414"></a><a class="code" href="classwxPropertyGrid.htm#a166">03414</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSelection ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE )
03415     {
03416         wxPGProperty* p = &amp;GetPropertyById( <span class="keywordtype">id</span> );
03417         SelectProperty(p,focus);
03418     }
<a name="l03425"></a><a class="code" href="classwxPropertyGrid.htm#a167">03425</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSelection ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
03426     {
03427         wxPGProperty* p = wxPGIdToPtr ( GetPropertyByName(name) );
03428         SelectProperty(p,focus);
03429     }
03430 
03434     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
03435 
<a name="l03439"></a><a class="code" href="classwxPropertyGrid.htm#a169">03439</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority )
03440     {
03441         SetPropertyPriority(GetPropertyByName(name),priority);
03442     }
03443 
03446     <span class="keywordtype">void</span> SwitchState ( wxPropertyGridState* pNewState );
03447 
03448     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; help_string )
03449     {
03450         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03451         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;m_helpString = help_string;
03452     }
03453 
03454     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; help_string )
03455     {
03456         SetPropertyHelpString(GetPropertyByName(name),help_string);
03457     }
03458 
<a name="l03468"></a><a class="code" href="classwxPropertyGrid.htm#a173">03468</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newproplabel )
03469     {
03470         wxPGProperty* p = &amp;GetPropertyById( <span class="keywordtype">id</span> );
03471         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03472     }
<a name="l03482"></a><a class="code" href="classwxPropertyGrid.htm#a174">03482</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newproplabel )
03483     {
03484         wxPGProperty* p = wxPGIdToPtr ( GetPropertyByName(name) );
03485         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03486     }
03487 
<a name="l03497"></a><a class="code" href="classwxPropertyGrid.htm#a175">03497</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newname )
03498     {
03499         DoSetPropertyName ( wxPGIdToPtr(<span class="keywordtype">id</span>), newname );
03500     }
<a name="l03510"></a><a class="code" href="classwxPropertyGrid.htm#a176">03510</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newname )
03511     {
03512         DoSetPropertyName ( wxPGIdToPtr ( GetPropertyByName(name) ), newname );
03513     }
03514 
<a name="l03516"></a><a class="code" href="classwxPropertyGrid.htm#a177">03516</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value )
03517     {
03518         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03519     }
<a name="l03521"></a><a class="code" href="classwxPropertyGrid.htm#a178">03521</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value )
03522     {
03523         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
03524     }
<a name="l03526"></a><a class="code" href="classwxPropertyGrid.htm#a179">03526</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxPGFloat value )
03527     {
03528         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03529     }
<a name="l03531"></a><a class="code" href="classwxPropertyGrid.htm#a180">03531</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value )
03532     {
03533         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03534     }
03535 
03542     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
03543 
03544     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
03545     {
03546         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
03547     }
03548 
<a name="l03550"></a><a class="code" href="classwxPropertyGrid.htm#a183">03550</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value )
03551     {
03552         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03553     }
<a name="l03555"></a><a class="code" href="classwxPropertyGrid.htm#a184">03555</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value )
03556     {
03557         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03558     }
03560     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
03561 
03563     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
03564 
<a name="l03566"></a><a class="code" href="classwxPropertyGrid.htm#a187">03566</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPoint&amp; value )
03567     {
03568         <span class="comment">//SetPropertyValue ( id, wxT("wxPoint"), (void*)&amp;value );</span>
03569         wxASSERT ( wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT(<span class="stringliteral">"wxPoint"</span>)) == 0 );
03570         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), (<span class="keywordtype">void</span>*)&amp;value );
03571     }
<a name="l03573"></a><a class="code" href="classwxPropertyGrid.htm#a188">03573</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxSize&amp; value )
03574     {
03575         <span class="comment">//SetPropertyValue ( id, wxT("wxSize"), (void*)&amp;value );</span>
03576         wxASSERT ( wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT(<span class="stringliteral">"wxSize"</span>)) == 0 );
03577         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), (<span class="keywordtype">void</span>*)&amp;value );
03578     }
<a name="l03580"></a><a class="code" href="classwxPropertyGrid.htm#a189">03580</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayInt&amp; value )
03581     {
03582         wxASSERT ( wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT(<span class="stringliteral">"wxArrayInt"</span>)) == 0 );
03583         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), (<span class="keywordtype">void</span>*)&amp;value );
03584     }
03585 
<a name="l03587"></a><a class="code" href="classwxPropertyGrid.htm#a190">03587</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value )
03588     {
03589         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03590     }
<a name="l03592"></a><a class="code" href="classwxPropertyGrid.htm#a191">03592</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value )
03593     {
03594         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03595     }
<a name="l03597"></a><a class="code" href="classwxPropertyGrid.htm#a192">03597</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxPGFloat value )
03598     {
03599         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03600     }
<a name="l03602"></a><a class="code" href="classwxPropertyGrid.htm#a193">03602</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value )
03603     {
03604         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03605     }
<a name="l03609"></a><a class="code" href="classwxPropertyGrid.htm#a194">03609</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value )
03610     {
03611         SetPropertyValue ( GetPropertyByName(name), value );
03612     }
<a name="l03616"></a><a class="code" href="classwxPropertyGrid.htm#a195">03616</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
03617     {
03618         SetPropertyValue ( GetPropertyByName(name), wxString(value) );
03619     }
<a name="l03621"></a><a class="code" href="classwxPropertyGrid.htm#a196">03621</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value )
03622     {
03623         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03624     }
<a name="l03626"></a><a class="code" href="classwxPropertyGrid.htm#a197">03626</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value )
03627     {
03628         SetPropertyValue ( GetPropertyByName(name), wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03629     }
<a name="l03631"></a><a class="code" href="classwxPropertyGrid.htm#a198">03631</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value )
03632     {
03633         SetPropertyValue ( GetPropertyByName(name), value );
03634     }
<a name="l03636"></a><a class="code" href="classwxPropertyGrid.htm#a199">03636</a>     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value )
03637     {
03638         SetPropertyValue ( GetPropertyByName(name), value );
03639     }
<a name="l03641"></a><a class="code" href="classwxPropertyGrid.htm#a200">03641</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxPoint&amp; value )
03642     {
03643         SetPropertyValue ( GetPropertyByName(name), value );
03644     }
<a name="l03646"></a><a class="code" href="classwxPropertyGrid.htm#a201">03646</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxSize&amp; value )
03647     {
03648         SetPropertyValue ( GetPropertyByName(name), value );
03649     }
<a name="l03651"></a><a class="code" href="classwxPropertyGrid.htm#a202">03651</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayInt&amp; value )
03652     {
03653         SetPropertyValue ( GetPropertyByName(name), value );
03654     }
03655 
03659     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
03660     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyUnspecified ( wxPGNameStr name )
03661     {
03662         SetPropertyValueUnspecified ( GetPropertyByName(name) );
03663     }
03664 
<a name="l03669"></a><a class="code" href="classwxPropertyGrid.htm#a205">03669</a>     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
03670     {
03671         m_pState-&gt;SetPropertyValues(list,default_category);
03672     }
03673 
03674     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
03675     {
03676         SetPropertyValues (list.GetList(),default_category);
03677     }
03678     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxPG_EmptyString )
03679     {
03680         SetPropertyValues (list,GetPropertyByName(default_category));
03681     }
03682     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxPG_EmptyString )
03683     {
03684         SetPropertyValues (list.GetList(),GetPropertyByName(default_category));
03685     }
03686 
<a name="l03693"></a><a class="code" href="classwxPropertyGrid.htm#a209">03693</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetVerticalSpacing ( <span class="keywordtype">int</span> vspacing )
03694     {
03695         m_vspacing = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)vspacing;
03696         CalculateFontAndBitmapStuff ( vspacing );
03697         <span class="keywordflow">if</span> ( !m_pState-&gt;m_itemsAdded ) Refresh();
03698     }
03699 
<a name="l03701"></a><a class="code" href="classwxPropertyGrid.htm#a210">03701</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowLowPriority() { Compact ( FALSE ); }
03702 
03704     <span class="keywordtype">void</span> Sort ();
03705 
03708     <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> );
03709 
<a name="l03712"></a><a class="code" href="classwxPropertyGrid.htm#a213">03712</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
03713     {
03714         Sort ( GetPropertyByName(name) );
03715     }
03716 
03720     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag( <span class="keywordtype">long</span> style );
03721 
<a name="l03726"></a><a class="code" href="classwxPropertyGrid.htm#a215">03726</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
03727     {
03728         <span class="keywordflow">if</span> ( priority == wxPG_LOW )
03729             m_iFlags |= wxPG_FL_ADDING_HIDEABLES;
03730         <span class="keywordflow">else</span>
03731             m_iFlags &amp;= ~(wxPG_FL_ADDING_HIDEABLES);
03732     }
03733 
<a name="l03736"></a><a class="code" href="classwxPropertyGrid.htm#a216">03736</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
03737     {
03738         <span class="keywordtype">int</span> priority = wxPG_LOW;
03739         <span class="keywordflow">if</span> ( GetPropertyPriority(<span class="keywordtype">id</span>) == wxPG_LOW )
03740             priority = wxPG_HIGH;
03741         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
03742     }
03743 
<a name="l03746"></a><a class="code" href="classwxPropertyGrid.htm#a217">03746</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
03747     {
03748         TogglePropertyPriority(GetPropertyByName(name));
03749     }
03750 
<a name="l03752"></a><a class="code" href="classwxPropertyGrid.htm#a218">03752</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
03753     {
03754         SetDefaultPriority(wxPG_HIGH);
03755     }
03756 
03758     <span class="comment">//inline void StopAddingHideables() { m_iFlags &amp;= ~(wxPG_FL_ADDING_HIDEABLES); }</span>
03759 
<a name="l03768"></a><a class="code" href="classwxPropertyGrid.htm#z0_0">03768</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasModified() { m_iFlags |= wxPG_FL_VALUE_MODIFIED; }
<a name="l03770"></a><a class="code" href="classwxPropertyGrid.htm#z0_1">03770</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasNotModified() { m_iFlags &amp;= ~(wxPG_FL_VALUE_MODIFIED); }
<a name="l03776"></a><a class="code" href="classwxPropertyGrid.htm#z0_2">03776</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsEditorsValueModified()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>  ( m_iFlags &amp; wxPG_FL_VALUE_MODIFIED ) ? TRUE : FALSE; }
03777     wxPGCtrlClass* GenerateEditorButton ( <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
03792     wxPGCtrlClass* GenerateEditorTextCtrl ( <span class="keyword">const</span> wxPoint&amp; pos,
03793         <span class="keyword">const</span> wxSize&amp; sz, <span class="keyword">const</span> wxString&amp; value, wxPGCtrlClass* secondary,
03794         <span class="keyword">const</span> wxSize&amp; imsz = wxDefaultSize );
03795 
03796     <span class="comment">/* Generates both textctrl and button.</span>
03797 <span class="comment">    */</span>
03798     wxPGCtrlClass* GenerateEditorTextCtrlAndButton( <span class="keyword">const</span> wxPoint&amp; pos,
03799         <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary, <span class="keywordtype">int</span> limited_editing,
03800         wxPGProperty* property );
03801 
03810     wxPoint GetGoodEditorDialogPosition ( wxPGProperty* p,
03811         <span class="keyword">const</span> wxSize&amp; sz );
03812 
03813 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
03814 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxCustomControlManager* GetCCManager() { <span class="keywordflow">return</span> &amp;m_ccManager; }
03815 <span class="preprocessor">#endif</span>
03816 <span class="preprocessor"></span>
03819     <span class="keywordtype">void</span> OnCustomEditorEvent ( wxEvent &amp;event );
03821     <span class="keywordtype">void</span> SLAlloc ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount, <span class="keyword">const</span> wxChar** items );
<a name="l03823"></a><a class="code" href="classwxPropertyGrid.htm#z0_10">03823</a>     <span class="keyword">inline</span> wxArrayString&amp; SLGet () { <span class="keywordflow">return</span> m_sl; }
03825 
03826     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetInternalFlags ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_iFlags; }
03827     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearInternalFlag ( <span class="keywordtype">long</span> flag ) { m_iFlags &amp;= ~(flag); }
03828     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBottomY ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_bottomy; }
03829     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetBottomY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y ) { m_bottomy = y; }
03830 
03833     <span class="keywordtype">void</span> PropertyWasModified ( wxPGProperty* p );
03834 
03835     <span class="comment">//wxArrayPtrVoid* GetCatArray () { return &amp;m_pState-&gt;m_catArray; }</span>
03836 
03837 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
03838 <span class="preprocessor"></span><span class="comment">// Simple way to make doxygen skip protected members</span>
03839 <span class="comment">// Used wx/window.h include guard because had trouble</span>
03840 <span class="comment">// getting doxygen definitions work.</span>
03841 
03842     <span class="comment">//</span>
03843     <span class="comment">// Overridden functions - no documentation required.</span>
03844     <span class="comment">//</span>
03845 
03846     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
03847 
03848     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
03849 
03850     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
03851 
03852     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
03853 
03854     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
03855 
03856 <span class="keyword">protected</span>:
03857 
03859     <span class="comment">//wxPropertyGridState         m_state;</span>
03860     wxPropertyGridState*         m_pState;
03861 
03866     <span class="comment">//unsigned char               m_itemsAdded;</span>
03867 
03869     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_processingEvent;
03870 
03871     <span class="comment">//wxPGPropertyWithChildren*   m_properties;</span>
03872     <span class="comment">//wxPropertyCategory          m_regularArray;</span>
03873     <span class="comment">//wxPGPropertyWithChildren*   m_abcArray; // for different kind of display</span>
03874 
03876     <span class="comment">//wxPGHashMapProperty         m_dictName;</span>
03877 
03878 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
03879 <span class="preprocessor"></span>        wxBitmap            *m_expandbmp, *m_collbmp;
03880 <span class="preprocessor">#endif</span>
03881 <span class="preprocessor"></span>
03882     wxCursor            *m_cursor_sizewe;
03883 
03885     wxPGCtrlClass       *m_wnd_primary;
03886     wxPGCtrlClass       *m_wnd_secondary;
03887 
03888 <span class="preprocessor">#if wxPG_DOUBLE_BUFFER</span>
03889 <span class="preprocessor"></span>    wxBitmap            *m_doubleBuffer;
03890 <span class="preprocessor">#endif</span>
03891 <span class="preprocessor"></span>
03894     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_bottomy;
03895 
03897         <span class="keywordtype">int</span>                 m_spacingy;
03898 
03900     <span class="keywordtype">int</span>                 m_width;
03901 
03903     <span class="keywordtype">int</span>                 m_height;
03904 
03906     wxPGArrayProperty   m_arrVisible;
03907 
03909     <span class="keywordtype">int</span>                 m_prevVY;
03910 
03912     <span class="keywordtype">int</span>                 m_calcVisHeight;
03913 
03916         <span class="keywordtype">int</span>                 m_gutterwidth;
03917 
03919     <span class="keywordtype">int</span>                 m_lineHeight;
03920 
03923     <span class="keywordtype">int</span>                 m_marginwidth;
03924 
03925     <span class="keywordtype">int</span>                 m_buttonSpacingY; <span class="comment">// y spacing for expand/collapse button.</span>
03926 
03928     <span class="keywordtype">int</span>                 m_subgroup_extramargin;
03929 
03931         <span class="keywordtype">int</span>                 m_iconwidth;
03932 
03933 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
03934 <span class="preprocessor"></span>
03936         <span class="keywordtype">int</span>                 m_iconheight;
03937 <span class="preprocessor">#endif</span>
03938 <span class="preprocessor"></span>
03940     <span class="keywordtype">int</span>                 m_curcursor;
03941 
03944         wxFont              m_captionFont;
03945 
03946 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
03947 <span class="preprocessor"></span>
03948     wxArrayPtrVoid              m_catArray;
03949 <span class="preprocessor">#endif</span>
03950 <span class="preprocessor"></span>
03951 <span class="preprocessor">#if !wxPG_HEAVY_GFX</span>
03952 <span class="preprocessor"></span>    <span class="keywordtype">int</span>                 m_splitterprevdrawnx;
03953 
03955     wxPen               m_splitterpen;
03956 
03957 <span class="preprocessor">#endif</span>
03958 <span class="preprocessor"></span>
03959         <span class="keywordtype">int</span>                 m_fontHeight;  <span class="comment">// height of the font</span>
03960     
03961     <span class="comment">// Most recently added category.</span>
03962     <span class="comment">//wxPGPropertyWithChildren*   m_currentCategory;</span>
03963 
03964     <span class="comment">//</span>
03965     <span class="comment">// Temporary values</span>
03966     <span class="comment">//</span>
03967 
03969     <span class="keywordtype">int</span>                 m_startingSplitterX;
03970 
03972     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_dragStatus;
03973 
03975     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>         m_dragOffset;
03976 
03978     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_mouseSide;
03979 
03981     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_editorFocused;
03982 
03984     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_coloursCustomized;
03985 
03987     <span class="comment">//unsigned char       m_lastCaptionBottomnest;</span>
03988 
03990     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_frozen;
03991 
03992     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_vspacing;
03993 
03995     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        m_iFlags;
03996 
03998     <span class="keywordtype">int</span>                 m_clearThisMany;
03999     
04004     wxPGProperty*       m_selected;
04005 
04006     wxPGProperty*       m_propHover;    <span class="comment">// pointer to property that has mouse on it self</span>
04007 
04008     <span class="keywordtype">int</span>                 m_splitterx; <span class="comment">// x position for the vertical line dividing name and value</span>
04009             
04010 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04011 <span class="preprocessor"></span>            
04012     <span class="keywordtype">int</span>                 m_ctrlXAdjust; <span class="comment">// x relative to splitter (needed for resize).</span>
04013 <span class="preprocessor">#endif</span>
04014 <span class="preprocessor"></span>
04015     wxColour            m_colLine;     <span class="comment">// lines between cells</span>
04016     wxColour            m_colPropFore; <span class="comment">// property names and texts are written in this color</span>
04017     wxColour            m_colPropBack; <span class="comment">// background for m_colPropFore</span>
04018     wxColour            m_colCapFore;  <span class="comment">// text color for captions</span>
04019     wxColour            m_colSelFore;  <span class="comment">// foreground for selected property</span>
04020     wxColour            m_colSelBack;  <span class="comment">// background for selected property (actually use background color when control out-of-focus)</span>
04021 
04022     wxArrayPtrVoid      m_arrBgBrushes; <span class="comment">// Array of background colour brushes.</span>
04023 
04024 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04025 <span class="preprocessor"></span>    wxCustomControlManager  m_ccManager;
04026 <span class="preprocessor">#endif</span>
04027 <span class="preprocessor"></span>
04028     wxArrayString       m_sl;           <span class="comment">// string control helper</span>
04029 
04030     <span class="comment">//</span>
04031     <span class="comment">// Static members.</span>
04032     <span class="comment">//</span>
04033 
04034     <span class="keyword">static</span> wxPGArrEditorClass   ms_arrEditorClasses; <span class="comment">// list of editor class instances.</span>
04035 
04036     <span class="keyword">static</span> wxPGDictValClass     ms_dictValueType; <span class="comment">// valuename -&gt; value type object instance</span>
04037 
04038 <span class="keyword">protected</span>:
04039 
04040     <span class="comment">// Sets some members to defaults.</span>
04041         <span class="keywordtype">void</span> Init1();
04042 
04043     <span class="comment">// Initializes some members.</span>
04044         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
04045 
04046         <span class="keywordtype">void</span> OnPaint (wxPaintEvent &amp;event );
04047 
04048     <span class="comment">// main event receivers</span>
04049 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04050 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseEvent ( wxMouseEvent &amp;event );
04051 <span class="preprocessor">#else</span>
04052 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
04053     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
04054     <span class="keywordtype">void</span> OnMouseRightClick ( wxMouseEvent &amp;event );
04055     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
04056 <span class="preprocessor">#endif</span>
04057 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnKey ( wxKeyEvent &amp;event );
04058     <span class="keywordtype">void</span> OnResize ( wxSizeEvent &amp;event );
04059     <span class="comment">//virtual void OnSize ( wxSizeEvent &amp;event );</span>
04060 
04061     <span class="comment">// event handlers</span>
04062     <span class="keywordtype">bool</span> HandleMouseMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04063     <span class="keywordtype">bool</span> HandleMouseClick ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04064     <span class="keywordtype">bool</span> HandleMouseRightClick( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04065     <span class="keywordtype">bool</span> HandleMouseUp ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04066     <span class="keywordtype">void</span> HandleKeyEvent( wxKeyEvent &amp;event );
04067     <span class="keywordtype">bool</span> HandleChildKey ( wxKeyEvent&amp; event ); <span class="comment">// Handle TAB and ESCAPE in control</span>
04068     
04069     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
04070 
04071     <span class="keywordtype">void</span> OnSetFocus ( wxFocusEvent &amp;event );
04072     <span class="keywordtype">void</span> OnKillFocus ( wxFocusEvent &amp;event );
04073 
04074 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04075 <span class="preprocessor"></span>
04076     <span class="keywordtype">bool</span> OnMouseCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04077     <span class="keywordtype">bool</span> OnMouseChildCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04078 
04079     <span class="comment">// sub-control event handlers</span>
04080     <span class="keywordtype">void</span> OnMouseEntryChild ( wxMouseEvent &amp;event );
04081     <span class="keywordtype">void</span> OnMouseClickChild ( wxMouseEvent &amp;event );
04082     <span class="keywordtype">void</span> OnMouseRightClickChild ( wxMouseEvent &amp;event );
04083     <span class="keywordtype">void</span> OnMouseMoveChild ( wxMouseEvent &amp;event );
04084     <span class="keywordtype">void</span> OnMouseUpChild ( wxMouseEvent &amp;event );
04085     <span class="keywordtype">void</span> OnKeyChild ( wxKeyEvent &amp;event );
04086     <span class="keywordtype">void</span> OnFocusChild ( wxFocusEvent &amp;event );
04087 
04088     <span class="keywordtype">void</span> OnCaptureChange ( wxMouseCaptureChangedEvent &amp;event );
04089 <span class="preprocessor">#endif // !wxPG_USE_CUSTOM_CONTROLS</span>
04090 <span class="preprocessor"></span>
04091     <span class="keywordtype">void</span> OnScrollEvent ( wxScrollWinEvent &amp;event );
04092 
04093     <span class="keywordtype">void</span> OnSysColourChanged ( wxSysColourChangedEvent &amp;event );
04094 
04095 <span class="keyword">protected</span>:
04096 <span class="comment">//private:</span>
04097 
04102         <span class="keywordtype">void</span> CalculateFontAndBitmapStuff( <span class="keywordtype">int</span> vspacing );
04103 
04104     <span class="comment">//void ClearValueBackground ( wxDC&amp; dc, wxPGProperty* p );</span>
04105 
04106     <span class="keyword">inline</span> wxRect GetEditorWidgetRect ( wxPGProperty* p );
04107 
04108     <span class="comment">//inline wxSize GetEditorWidgetSize ( wxPGProperty* p );</span>
04109 
04110     <span class="comment">//void CorrectEditorWidgetSizeX ( int cx, int cw );</span>
04111     <span class="keywordtype">void</span> CorrectEditorWidgetSizeX ( <span class="keywordtype">int</span> new_splitterx, <span class="keywordtype">int</span> new_width );
04112     
04113     <span class="keywordtype">void</span> CorrectEditorWidgetSizeY ( <span class="keywordtype">int</span> cy );
04114 
04115 <span class="preprocessor">#ifdef __WXDEBUG__</span>
04116 <span class="preprocessor"></span>    <span class="keywordtype">void</span> _log_items ();
04117     <span class="keywordtype">void</span> OnScreenNote ( <span class="keyword">const</span> wxChar* format, ... );
04118 <span class="preprocessor">#endif</span>
04119 <span class="preprocessor"></span>
04120     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
04121 
04122     <span class="keywordtype">void</span> SelectProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> focus = FALSE, <span class="keywordtype">bool</span> forceswitch = FALSE );
04123 
04124     <span class="keywordtype">void</span> DoDelete ( wxPGProperty* item );
04125 
04126     <span class="keywordtype">void</span> DoDrawItems ( wxDC&amp; dc,
04127         wxPGProperty* first_item, wxPGProperty* last_item,
04128         <span class="keyword">const</span> wxRect* clip_rect );
04129 
04131     <span class="keywordtype">void</span> DrawItems ( wxDC&amp; dc, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> topitemy, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bottomitemy,
04132         <span class="keyword">const</span> wxRect* clip_rect = NULL );
04133 
04134     <span class="keywordtype">void</span> DrawItems ( wxPGProperty* p1, wxPGProperty* p2 );
04135 
04136     <span class="keywordtype">void</span> DrawItem ( wxDC&amp; dc, wxPGProperty* p );
04137 
04138     <span class="keywordtype">void</span> DrawItemAndChildren ( wxDC&amp; dc, wxPGProperty* p );
04139 
04140     <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawItem ( wxPGProperty* p );
04141 
04142     <span class="keywordtype">void</span> DrawItemAndChildren ( wxPGProperty* p );
04143 
04145     <span class="keyword">inline</span> wxPGProperty&amp; GetPropertyById ( wxPGId <span class="keywordtype">id</span> )
04146     {
04147         <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty();
04148     }
04149 
04150 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
04151 <span class="preprocessor"></span>    wxPropertyCategory* GetPropertyCategory ( wxPGProperty* p ) <span class="keyword">const</span>;
04152 <span class="preprocessor">#else</span>
04153 <span class="preprocessor"></span>    <span class="keyword">static</span> wxPropertyCategory* GetPropertyCategory ( wxPGProperty* p );
04154 <span class="preprocessor">#endif</span>
04155 <span class="preprocessor"></span>
04156     <span class="keywordtype">void</span> ImprovedClientToScreen ( <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span>* py );
04157 
04158     wxPGId Insert ( wxPGProperty* priorthis, wxPGProperty* newproperty );
04159 
04160     <span class="keyword">inline</span> wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
04161     {
04162         <span class="keywordflow">return</span> m_pState-&gt;Insert(parent,index,newproperty);
04163     }
04164 
04166     <span class="keywordtype">void</span> RegainColours ();
04167 
04168     wxPGProperty* DoGetItemAtY ( <span class="keywordtype">int</span> y );
04169 
04170     <span class="keyword">inline</span> wxPGProperty* DoGetItemAtY_Full ( <span class="keywordtype">int</span> y )
04171     {
04172         wxASSERT ( y &gt;= 0 );
04173 
04174         <span class="keywordflow">if</span> ( (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)y &gt;= m_bottomy )
04175             <span class="keywordflow">return</span> NULL;
04176 
04177         <span class="keywordflow">return</span> m_pState-&gt;m_properties-&gt;GetItemAtY ( y, m_lineHeight );
04178     }
04179 
04180     <span class="keywordtype">void</span> DoPropertyChanged ( wxDC&amp; dc, wxPGProperty* p );
04181 
04182     <span class="keywordtype">void</span> DoSetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
04183 
04184     wxPGProperty* GetLastItem ( <span class="keywordtype">bool</span> need_visible, <span class="keywordtype">bool</span> allow_subprops = TRUE );
04185 
04186     <span class="keywordtype">void</span> CalculateVisibles ( <span class="keywordtype">int</span> vy, <span class="keywordtype">bool</span> full_recalc );
04187 
04188     <span class="keywordtype">void</span> CalculateYs ( wxPGPropertyWithChildren* startparent,
04189         <span class="keywordtype">int</span> startindex );
04190 
04191     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
04192 
04193     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
04194 
04195     <span class="comment">// Returns nearest paint visible property (such that will be painted unless</span>
04196     <span class="comment">// window is scrolled or resized). If given property is paint visible, then</span>
04197     <span class="comment">// it itself will be returned.</span>
04198     wxPGProperty* GetNearestPaintVisible ( wxPGProperty* p );
04199 
04200     <span class="comment">/*</span>
04201 <span class="comment">    inline wxPropertyCategory* GetPropertyCategory ( wxPGProperty* p ) const</span>
04202 <span class="comment">    {</span>
04203 <span class="comment">        return (wxPropertyCategory*) wxPGIdToPtr(m_pState-&gt;GetPropertyCategory(p));</span>
04204 <span class="comment">    }</span>
04205 <span class="comment">    */</span>
04206 
04207     <span class="comment">// Re-gets value of m_wnd_primary (using property's setvalue).</span>
04208     <span class="keywordtype">void</span> RefreshEditorControl ();
04209 
04210     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultEditors();
04211 
04212     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultValues();
04213 
04214     <span class="comment">// Sets m_bgColIndex to this property and all its children.</span>
04215     <span class="keywordtype">void</span> SetColourIndex ( wxPGProperty* p, <span class="keywordtype">int</span> index );
04216 
04217     <span class="keywordtype">void</span> SetPropertyLabel ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newproplabel );
04218 
04219     <span class="keywordtype">void</span> DoSetPropertyName ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newname );
04220 
04221     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
04222 
04223     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
04224 
04225     <span class="comment">// Setups event handling for child control</span>
04226     <span class="keywordtype">void</span> SetupEventHandling ( wxPGCtrlClass* wnd, <span class="keywordtype">int</span> <span class="keywordtype">id</span> );
04227 
04228     <span class="comment">//void Sort ( bool recalcys );</span>
04229 
04230     <span class="comment">//void Sort ( wxPGProperty* p, bool recalcys );</span>
04231 
04232     <span class="keywordtype">void</span> CustSetCursor ( <span class="keywordtype">int</span> type );
04233 
04234     <span class="keywordtype">void</span> RecalculateVirtualSize();
04235 
04236     <span class="keywordtype">void</span> AdjustScrollbars ( <span class="keywordtype">int</span> y );
04237 
04239     <span class="keywordtype">void</span> DrawSplitterDragColumn ( wxDC&amp; dc, <span class="keywordtype">int</span> x );
04240 
04242     <span class="comment">//int GetNearestValidItem ( int index, int dir );</span>
04243     wxPGProperty* GetNeighbourItem ( wxPGProperty* item, <span class="keywordtype">bool</span> need_visible,
04244         <span class="keywordtype">int</span> dir ) <span class="keyword">const</span>;
04245 
04246     <span class="comment">//inline int PrepareToAddItem( wxPGProperty* property, wxPGPropertyWithChildren* category );</span>
04247 
04248     <span class="keywordtype">void</span> PrepareAfterItemsAdded();
04249 
04250 <span class="preprocessor">#endif // DOXYGEN_SHOULD_SKIP_THIS</span>
04251 <span class="preprocessor"></span>
04252 <span class="keyword">private</span>:
04253     DECLARE_EVENT_TABLE()
04254 };
04255 
04256 <span class="preprocessor">#undef wxPG_USE_STATE</span>
04257 <span class="preprocessor"></span>
04258 <span class="comment">// -----------------------------------------------------------------------</span>
04259 
04260 <span class="keyword">inline</span> <span class="keywordtype">bool</span> wxPropertyGridState::IsDisplayed()<span class="keyword"> const</span>
04261 <span class="keyword"></span>{
04262     <span class="keywordflow">return</span> ( <span class="keyword">this</span> == m_pPropGrid-&gt;GetState() );
04263 }
04264 
04265 <span class="comment">// -----------------------------------------------------------------------</span>
04266 
04267 <span class="preprocessor">#if wxPG_INCLUDE_MANAGER</span>
04268 <span class="preprocessor"></span>
04269 <span class="preprocessor">#define wxPG_USE_STATE  m_targetState</span>
04270 <span class="preprocessor"></span>
04271 <span class="comment">// This is for mirroring wxPropertyGrid methods with ease.</span>
04272 <span class="comment">// Needs to be in hear because of inlines.</span>
04273 <span class="preprocessor">#define wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(NAME,AT1) \</span>
04274 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGId id, AT1 _av1_ ) \</span>
04275 <span class="preprocessor">{ \</span>
04276 <span class="preprocessor">    wxPGProperty* p = wxPGIdToPtr(id); \</span>
04277 <span class="preprocessor">    wxPropertyGridState* pState = p-&gt;GetParentState(); \</span>
04278 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
04279 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
04280 <span class="preprocessor">    else pState-&gt;NAME(p,_av1_); \</span>
04281 <span class="preprocessor">} \</span>
04282 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGNameStr name, AT1 _av1_ ) \</span>
04283 <span class="preprocessor">{ \</span>
04284 <span class="preprocessor">    wxPropertyGridState* pState; \</span>
04285 <span class="preprocessor">    wxPGId id = GetPropertyByName(name,&amp;pState); \</span>
04286 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
04287 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
04288 <span class="preprocessor">    else pState-&gt;NAME(wxPGIdToPtr(id),_av1_); \</span>
04289 <span class="preprocessor">}</span>
04290 <span class="preprocessor"></span>
04291 <span class="keyword">class </span>wxPropertyGridPageData;
04292 
04293 <span class="preprocessor">#define wxPG_IPAM_DECL inline</span>
04294 <span class="preprocessor"></span>
04331 <span class="comment">// BM_MANAGER</span>
<a name="l04332"></a><a class="code" href="classwxPropertyGridManager.htm">04332</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridManager : <span class="keyword">public</span> wxWindow
04333 {
04334         DECLARE_CLASS(wxPropertyGridManager)
04335 
04336 <span class="keyword">public</span>:
04337 
04341     wxPropertyGridManager();
04342 
04347     wxPropertyGridManager(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
04348                       <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
04349                       <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
04350                       <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPGMAN_DEFAULT_STYLE</a>,
04351                       <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
04352 
04354     <span class="keyword">virtual</span> ~wxPropertyGridManager();
04355 
<a name="l04373"></a><a class="code" href="classwxPropertyGridManager.htm#a3">04373</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> AddPage ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap )
04374     {
04375         <span class="keywordflow">return</span> InsertPage (-1,label,bmp);
04376     }
04377 
<a name="l04379"></a><a class="code" href="classwxPropertyGridManager.htm#a4">04379</a>     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
04380     {
04381         wxASSERT ( m_targetState );
04382         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> wxPropertyCategory(label,name) );
04383     }
04384 
<a name="l04386"></a><a class="code" href="classwxPropertyGridManager.htm#a5">04386</a>     <span class="keyword">inline</span> wxPGId Append ( wxPGProperty* property )
04387     {
04388         wxASSERT ( m_targetState );
04389         <span class="keywordflow">return</span> m_targetState-&gt;Append(property);
04390     }
04391 
04392     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxPG_EmptyString )
04393     {
04394         wxASSERT ( m_targetState );
04395         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> wxStringProperty(label,name,value) );
04396     }
04397 
04398     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
04399     {
04400         wxASSERT ( m_targetState );
04401         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> wxIntProperty(label,name,value) );
04402     }
04403 
04404     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
04405     {
04406         wxASSERT ( m_targetState );
04407         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> wxFloatProperty(label,name,6,value) );
04408     }
04409 
04410     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
04411     {
04412         wxASSERT ( m_targetState );
04413         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> wxBoolProperty(label,name,value) );
04414     }
04415 
<a name="l04417"></a><a class="code" href="classwxPropertyGridManager.htm#a10">04417</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGId <span class="keywordtype">id</span>, wxPGProperty* property )
04418     {
04419         wxASSERT ( m_targetState );
04420         <span class="keywordflow">return</span> m_targetState-&gt;Insert((wxPGPropertyWithChildren*)wxPGIdToPtr(<span class="keywordtype">id</span>),-1,property);
04421     }
04422 
<a name="l04424"></a><a class="code" href="classwxPropertyGridManager.htm#a11">04424</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, wxPGProperty* property )
04425     {
04426         wxASSERT ( m_targetState );
04427         <span class="keywordflow">return</span> m_targetState-&gt;Insert((wxPGPropertyWithChildren*)wxPGIdToPtr(m_targetState-&gt;GetPropertyByName(name)),-1,property);
04428     }
04429     
04430     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> );
04431 
04432     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
04433     {
04434         m_propGrid.ClearModifiedStatus();
04435     }
04436 
04437     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGId <span class="keywordtype">id</span> );
04438     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGNameStr name );
04439     
04441     <span class="keywordtype">bool</span> Collapse ( wxPGId <span class="keywordtype">id</span> );
04442     <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name );
04443 
<a name="l04445"></a><a class="code" href="classwxPropertyGridManager.htm#a18">04445</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll ()
04446     {
04447         m_targetState-&gt;ExpandAll(0);
04448     }
04449 
04453     <span class="keywordtype">void</span> Compact ( <span class="keywordtype">bool</span> compact );
04454 
04460     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
04461                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
04462                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
04463                 <span class="keywordtype">long</span> style = wxPGMAN_DEFAULT_STYLE,
04464                 <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
04465 
04467     <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> );
04468     <span class="keywordtype">void</span> Delete ( wxPGNameStr name );
04469 
<a name="l04471"></a><a class="code" href="classwxPropertyGridManager.htm#a23">04471</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
04472 
<a name="l04474"></a><a class="code" href="classwxPropertyGridManager.htm#a24">04474</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
04475 
<a name="l04479"></a><a class="code" href="classwxPropertyGridManager.htm#a25">04479</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable )
04480     {
04481         <span class="keywordtype">bool</span> res = m_propGrid.EnableCategories(enable);
04482         m_windowStyle = (m_windowStyle&amp;~(<a class="code" href="group__wndflags.htm#ga1">wxPG_NOCATEGORIES</a>)) | (m_propGrid.m_windowStyle&amp;<a class="code" href="group__wndflags.htm#ga1">wxPG_NOCATEGORIES</a>);
04483         <span class="keywordflow">return</span> res;
04484     }
04485 
04487     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
04488     <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE );
04489 
<a name="l04493"></a><a class="code" href="classwxPropertyGridManager.htm#a28">04493</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> )
04494     {
04495         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentState());
04496     }
04497 
<a name="l04501"></a><a class="code" href="classwxPropertyGridManager.htm#a29">04501</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name )
04502     {
04503         wxPropertyGridState* pstate;
04504         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name,&amp;pstate);
04505         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,pstate);
04506     }
04507 
04509     <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> );
04510     <span class="keywordtype">bool</span> Expand ( wxPGNameStr name );
04511 
<a name="l04513"></a><a class="code" href="classwxPropertyGridManager.htm#a32">04513</a>     <span class="keywordtype">void</span> ExpandAll ()
04514     {
04515         m_targetState-&gt;ExpandAll(1);
04516     }
04517 
04519     <span class="comment">/*wxColour GetCategoryColour ( wxPGId id )</span>
04520 <span class="comment">    {</span>
04521 <span class="comment">        return wxPropertyGrid::GetCategoryColour(id);</span>
04522 <span class="comment">    }</span>
04523 <span class="comment">    wxColour GetCategoryColour ( wxPGNameStr name ) { return GetCategoryColour(GetPropertyByName(name)); }*/</span>
04524 
<a name="l04526"></a><a class="code" href="classwxPropertyGridManager.htm#a33">04526</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
04527     {
04528         <span class="keywordflow">return</span> GetChildrenCount( wxPGIdGen(m_propGrid.m_pState-&gt;m_properties) );
04529     }
04530 
04532     size_t GetChildrenCount ( <span class="keywordtype">int</span> page_index );
04533 
<a name="l04535"></a><a class="code" href="classwxPropertyGridManager.htm#a35">04535</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04536 <span class="keyword">    </span>{
04537         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04538         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetChildCount();
04539     }
04540 
<a name="l04542"></a><a class="code" href="classwxPropertyGridManager.htm#a36">04542</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( GetPropertyByName(name) ); }
04543 
<a name="l04545"></a><a class="code" href="classwxPropertyGridManager.htm#a37">04545</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
04546 <span class="keyword">    </span>{
04547         <span class="keywordflow">return</span> m_targetState-&gt;GetFirst();
04548     }
04549 
<a name="l04551"></a><a class="code" href="classwxPropertyGridManager.htm#a38">04551</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
04552 <span class="keyword">    </span>{
04553         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstCategory ();
04554     }
04555 
<a name="l04557"></a><a class="code" href="classwxPropertyGridManager.htm#a39">04557</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()<span class="keyword"> const</span>
04558 <span class="keyword">    </span>{
04559         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstProperty();
04560     }
04561 
<a name="l04566"></a><a class="code" href="classwxPropertyGridManager.htm#a40">04566</a>     <span class="keyword">inline</span> wxPropertyGrid* GetGrid()
04567     {
04568         wxASSERT( m_iFlags &amp; wxPG_FL_INITIALIZED );
04569         <span class="keywordflow">return</span> &amp;m_propGrid;
04570     };
04571 
<a name="l04576"></a><a class="code" href="classwxPropertyGridManager.htm#a41">04576</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
04577     {
04578         wxASSERT ( wxPGIdIsOk(parent) );
04579         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
04580         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#a7">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
04581         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#a9">Last</a>());
04582     }
04583     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( GetPropertyByName(name) ); }
04584     
<a name="l04586"></a><a class="code" href="classwxPropertyGridManager.htm#a43">04586</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04587 <span class="keyword">    </span>{
04588         wxASSERT ( m_targetState );
04589         <span class="keywordflow">return</span> m_targetState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
04590     }
04591 
<a name="l04595"></a><a class="code" href="classwxPropertyGridManager.htm#a44">04595</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04596 <span class="keyword">    </span>{
04597         wxASSERT ( m_targetState );
04598         <span class="keywordflow">return</span> m_targetState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
04599     }
04600 
<a name="l04602"></a><a class="code" href="classwxPropertyGridManager.htm#a45">04602</a>     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> )
04603     {
04604         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(<span class="keywordtype">id</span>);
04605     }
04606     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGNameStr name )
04607     {
04608         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(GetPropertyByName(name));
04609     }
04610 
04612     <span class="keywordtype">int</span> GetPageByName ( <span class="keyword">const</span> wxChar* name ) <span class="keyword">const</span>;
04613 
04617     <span class="keywordtype">int</span> GetPageByState( wxPropertyGridState* pstate ) <span class="keyword">const</span>;
04618 
<a name="l04620"></a><a class="code" href="classwxPropertyGridManager.htm#a49">04620</a>     size_t GetPageCount ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrPages.GetCount(); }
04621 
04623     <span class="keyword">const</span> wxString&amp; GetPageName ( <span class="keywordtype">int</span> index ) <span class="keyword">const</span>;
04624 
<a name="l04626"></a><a class="code" href="classwxPropertyGridManager.htm#a51">04626</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04627 <span class="keyword">    </span>{
04628         <span class="keywordflow">return</span> m_targetState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
04629     }
04630 
<a name="l04632"></a><a class="code" href="classwxPropertyGridManager.htm#a52">04632</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
04633     {
04634         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
04635     }
04636     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
04637     {
04638         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(GetPropertyByName(name));
04639     }
04640 
04646     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name, wxPropertyGridState** ppState ) <span class="keyword">const</span>;
04647 
04649     wxPGId GetPropertyByName ( wxPGNameStr name, wxPropertyGridState** ppState = (wxPropertyGridState**) NULL ) <span class="keyword">const</span>;
04650 
<a name="l04654"></a><a class="code" href="classwxPropertyGridManager.htm#a56">04654</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04655 <span class="keyword">    </span>{
04656         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<span class="keywordtype">id</span>);
04657     }
04658     wxPGId GetPropertyCategory ( wxPGNameStr name )<span class="keyword"> const</span>
04659 <span class="keyword">    </span>{
04660         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(GetPropertyByName(name));
04661     }
04662 
<a name="l04664"></a><a class="code" href="classwxPropertyGridManager.htm#a58">04664</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04665 <span class="keyword">    </span>{
04666         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClassName();
04667     }
04668 
<a name="l04670"></a><a class="code" href="classwxPropertyGridManager.htm#a59">04670</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGNameStr name )<span class="keyword"> const</span>
04671 <span class="keyword">    </span>{
04672         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByNameWithAssert(name))-&gt;GetClassName();
04673     }
04674 
<a name="l04676"></a><a class="code" href="classwxPropertyGridManager.htm#a60">04676</a>     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04677 <span class="keyword">    </span>{
04678         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<span class="keywordtype">id</span>);
04679     }
04680     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
04681 <span class="keyword">    </span>{
04682         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(GetPropertyByName(name));
04683     }
04684 
<a name="l04686"></a><a class="code" href="classwxPropertyGridManager.htm#a62">04686</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04687 <span class="keyword">    </span>{
04688         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04689         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetHelpString();
04690     }
04691 
<a name="l04693"></a><a class="code" href="classwxPropertyGridManager.htm#a63">04693</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGNameStr name )<span class="keyword"> const</span>
04694 <span class="keyword">    </span>{
04695         <span class="keywordflow">return</span> GetPropertyHelpString(GetPropertyByNameWithAssert(name));
04696     }
04697 
<a name="l04699"></a><a class="code" href="classwxPropertyGridManager.htm#a64">04699</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGId <span class="keywordtype">id</span> )
04700     {
04701         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04702         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetIndexInParent();
04703     }
04704 
<a name="l04706"></a><a class="code" href="classwxPropertyGridManager.htm#a65">04706</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGNameStr name )
04707     {
04708         <span class="keywordflow">return</span> GetPropertyIndex ( GetPropertyByName(name) );
04709     }
04710 
<a name="l04712"></a><a class="code" href="classwxPropertyGridManager.htm#a66">04712</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGId <span class="keywordtype">id</span> )
04713     {
04714         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04715         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetLabel();
04716     }
04717     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGNameStr name )
04718     {
04719         <span class="keywordflow">return</span> GetPropertyLabel ( GetPropertyByName(name) );
04720     }
04721 
<a name="l04723"></a><a class="code" href="classwxPropertyGridManager.htm#a68">04723</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGId <span class="keywordtype">id</span> )
04724     {
04725         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04726         <span class="keywordflow">return</span> wxPGIdGen(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParent());
04727     }
04728 
<a name="l04730"></a><a class="code" href="classwxPropertyGridManager.htm#a69">04730</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGNameStr name )
04731     {
04732         <span class="keywordflow">return</span> GetPropertyParent ( GetPropertyByName(name) );
04733     }
04734 
<a name="l04736"></a><a class="code" href="classwxPropertyGridManager.htm#a70">04736</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority ( wxPGId <span class="keywordtype">id</span> )
04737     {
04738         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
04739         <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#a28">IsFlagSet</a>(<a class="code" href="group__propflags.htm#ga3">wxPG_PROP_HIDEABLE</a>) )
04740             <span class="keywordflow">return</span> wxPG_LOW;
04741         <span class="keywordflow">return</span> wxPG_HIGH;
04742     }
04743 
04744 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
04745 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
04746 #<span class="keywordflow">else</span>    
04747     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
04748 #endif
04749     {
04750         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04751         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
04752     }
04753 
04754 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
04755 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGNameStr name )
04756 #<span class="keywordflow">else</span>    
04757     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGNameStr name )
04758 #endif
04759     {
04760         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
04761         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04762         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
04763     }
04764 
04765     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04766 <span class="keyword">    </span>{
04767         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsString ( <span class="keywordtype">id</span> );
04768     }
04769     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04770 <span class="keyword">    </span>{
04771         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsLong ( <span class="keywordtype">id</span> );
04772     }
04773     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04774 <span class="keyword">    </span>{
04775         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsInt ( <span class="keywordtype">id</span> );
04776     }
04777     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04778 <span class="keyword">    </span>{
04779         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsBool ( <span class="keywordtype">id</span> );
04780     }
04781     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04782 <span class="keyword">    </span>{
04783         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsDouble ( <span class="keywordtype">id</span> );
04784     }
04785     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04786 <span class="keyword">    </span>{
04787         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsArrayString ( <span class="keywordtype">id</span> );
04788     }
04789     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04790 <span class="keyword">    </span>{
04791         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsWxObjectPtr ( <span class="keywordtype">id</span> );
04792     }
04793     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04794 <span class="keyword">    </span>{
04795         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsPoint ( <span class="keywordtype">id</span> );
04796     }
04797     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04798 <span class="keyword">    </span>{
04799         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsSize ( <span class="keywordtype">id</span> );
04800     }
04801     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04802 <span class="keyword">    </span>{
04803         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsArrayInt ( <span class="keywordtype">id</span> );
04804     }
04805 
04806     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGNameStr name )<span class="keyword"> const</span>
04807 <span class="keyword">    </span>{
04808         <span class="keywordflow">return</span> GetPropertyValueAsString ( GetPropertyByName(name) );
04809     }
04810     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGNameStr name )<span class="keyword"> const</span>
04811 <span class="keyword">    </span>{
04812         <span class="keywordflow">return</span> GetPropertyValueAsLong ( GetPropertyByName(name) );
04813     }
04814     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGNameStr name )<span class="keyword"> const</span>
04815 <span class="keyword">    </span>{
04816         <span class="keywordflow">return</span> GetPropertyValueAsInt ( GetPropertyByName(name) );
04817     }
04818     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGNameStr name )<span class="keyword"> const</span>
04819 <span class="keyword">    </span>{
04820         <span class="keywordflow">return</span> GetPropertyValueAsBool ( GetPropertyByName(name) );
04821     }
04822     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGNameStr name )<span class="keyword"> const</span>
04823 <span class="keyword">    </span>{
04824         <span class="keywordflow">return</span> GetPropertyValueAsDouble ( GetPropertyByName(name) );
04825     }
04826     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGNameStr name )<span class="keyword"> const</span>
04827 <span class="keyword">    </span>{
04828         <span class="keywordflow">return</span> GetPropertyValueAsArrayString ( GetPropertyByName(name) );
04829     }
04830     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGNameStr name )<span class="keyword"> const</span>
04831 <span class="keyword">    </span>{
04832         <span class="keywordflow">return</span> GetPropertyValueAsWxObjectPtr ( GetPropertyByName(name) );
04833     }
04834     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGNameStr name )<span class="keyword"> const</span>
04835 <span class="keyword">    </span>{
04836         <span class="keywordflow">return</span> GetPropertyValueAsPoint ( GetPropertyByName(name) );
04837     }
04838     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGNameStr name )<span class="keyword"> const</span>
04839 <span class="keyword">    </span>{
04840         <span class="keywordflow">return</span> GetPropertyValueAsSize ( GetPropertyByName(name) );
04841     }
04842     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGNameStr name )<span class="keyword"> const</span>
04843 <span class="keyword">    </span>{
04844         <span class="keywordflow">return</span> GetPropertyValueAsArrayInt ( GetPropertyByName(name) );
04845     }
04846 
<a name="l04856"></a><a class="code" href="classwxPropertyGridManager.htm#a93">04856</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxPG_EmptyString,
04857         wxPGId baseparent = wxPGIdGen((wxPGProperty*)NULL), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
04858 <span class="keyword">    </span>{
04859         <span class="keywordflow">return</span> m_targetState-&gt;GetPropertyValues(listname,baseparent,flags);
04860     }
04861 
<a name="l04865"></a><a class="code" href="classwxPropertyGridManager.htm#a94">04865</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGId <span class="keywordtype">id</span> )
04866     {
04867         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04868         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType();
04869     }
04870     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGNameStr name )
04871     {
04872         <span class="keywordflow">return</span> wxPGIdToPtr( GetPropertyByNameWithAssert(name) )-&gt;GetValueType();
04873     }
04874 
<a name="l04878"></a><a class="code" href="classwxPropertyGridManager.htm#a96">04878</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_targetState-&gt;m_properties); }
04879 
<a name="l04881"></a><a class="code" href="classwxPropertyGridManager.htm#a97">04881</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelectedPage ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
04882 
<a name="l04884"></a><a class="code" href="classwxPropertyGridManager.htm#a98">04884</a>     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const</span>
04885 <span class="keyword">    </span>{
04886         <span class="keywordflow">return</span> m_propGrid.GetSelection();
04887     }
04888 
<a name="l04890"></a><a class="code" href="classwxPropertyGridManager.htm#a99">04890</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
04891 
<a name="l04894"></a><a class="code" href="classwxPropertyGridManager.htm#a100">04894</a>     <span class="keyword">inline</span> wxToolBar* GetToolBar()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pToolbar; }
04895 
04896     <span class="keyword">inline</span> <span class="keywordtype">void</span> InitAllTypeHandlers ()
04897     {
04898         <a class="code" href="classwxPropertyGrid.htm#e12">wxPropertyGrid::InitAllTypeHandlers</a>();
04899     }
04900 
<a name="l04902"></a><a class="code" href="classwxPropertyGridManager.htm#a102">04902</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, wxPGProperty* property )
04903     {
04904         wxASSERT ( m_targetState );
04905         wxPGId res_id = m_targetState-&gt;Insert((wxPGPropertyWithChildren*)wxPGIdToPtr(<span class="keywordtype">id</span>),index,property);
04906         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
04907             m_propGrid.DrawItems ( property, (wxPGProperty*) NULL );
04908         <span class="keywordflow">return</span> res_id;
04909     }
04910 
<a name="l04912"></a><a class="code" href="classwxPropertyGridManager.htm#a103">04912</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, wxPGProperty* property )
04913     {
04914         wxASSERT ( m_targetState );
04915         wxPGId res_id = m_targetState-&gt;Insert((wxPGPropertyWithChildren*)wxPGIdToPtr(m_targetState-&gt;GetPropertyByName(name)),index,property);
04916         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
04917             m_propGrid.DrawItems ( property, (wxPGProperty*) NULL );
04918         <span class="keywordflow">return</span> res_id;
04919     }
04920 
04936     <span class="keywordtype">int</span> InsertPage ( <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap );
04937 
04939     <span class="keywordtype">bool</span> IsAnyModified () <span class="keyword">const</span>;
04940 
<a name="l04942"></a><a class="code" href="classwxPropertyGridManager.htm#a106">04942</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_propGrid.m_frozen&gt;0)?TRUE:FALSE; }
04943 
04945     <span class="keywordtype">bool</span> IsPageModified ( size_t index ) <span class="keyword">const</span>;
04946 
<a name="l04948"></a><a class="code" href="classwxPropertyGridManager.htm#a108">04948</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04949 <span class="keyword">    </span>{
04950         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
04951     }
04952     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyCategory(GetPropertyByName(name)); }
04953 
<a name="l04955"></a><a class="code" href="classwxPropertyGridManager.htm#a110">04955</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04956 <span class="keyword">    </span>{
04957         <span class="keywordflow">return</span> (!(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;IsFlagSet(<a class="code" href="group__propflags.htm#ga1">wxPG_PROP_DISABLED</a>)))?TRUE:FALSE;
04958     }
<a name="l04960"></a><a class="code" href="classwxPropertyGridManager.htm#a111">04960</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyEnabled(GetPropertyByName(name)); }
04961 
<a name="l04965"></a><a class="code" href="classwxPropertyGridManager.htm#a112">04965</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classwxPropertyGrid.htm#e13">wxPropertyGrid::IsPropertyExpanded</a>(<span class="keywordtype">id</span>); }
04966     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGNameStr name ) { <span class="keywordflow">return</span> <a class="code" href="classwxPropertyGrid.htm#e13">wxPropertyGrid::IsPropertyExpanded</a>(GetPropertyByName(name)); }
04967 
<a name="l04969"></a><a class="code" href="classwxPropertyGridManager.htm#a114">04969</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestr )
04970     {
04971         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04972         <span class="keywordflow">return</span> (wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetTypeName(),typestr) == 0);
04973     }
04974 
<a name="l04976"></a><a class="code" href="classwxPropertyGridManager.htm#a115">04976</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* valuetype )
04977     {
04978         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04979         <span class="keywordflow">return</span> ( wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType() == valuetype );
04980     }
04981 
<a name="l04983"></a><a class="code" href="classwxPropertyGridManager.htm#a116">04983</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxClassInfo* classinfo )
04984     {
04985         <span class="keywordflow">return</span> IsPropertyValueType(<span class="keywordtype">id</span>,classinfo-&gt;GetClassName());
04986     }
04987 
<a name="l04989"></a><a class="code" href="classwxPropertyGridManager.htm#a117">04989</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxChar* typestr )
04990     {
04991         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),typestr);
04992     }
04993 
<a name="l04996"></a><a class="code" href="classwxPropertyGridManager.htm#a118">04996</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
04997 <span class="keyword">    </span>{
04998         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
04999         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
05000         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#a29">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga6">wxPG_PROP_UNSPECIFIED</a>) ? TRUE : FALSE );
05001     }
05002     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyValueUnspecified(GetPropertyByName(name)); }
05003 
05005     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
05006     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE );
05007 
05009     <span class="keywordtype">void</span> SelectPage ( <span class="keywordtype">int</span> index );
05010 
<a name="l05012"></a><a class="code" href="classwxPropertyGridManager.htm#a123">05012</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectPage ( <span class="keyword">const</span> wxChar* name )
05013     {
05014         SelectPage ( GetPageByName(name) );
05015     }
05016 
<a name="l05021"></a><a class="code" href="classwxPropertyGridManager.htm#e0">05021</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice )
05022     {
05023         wxBoolProperty::SetBoolChoices(true_choice,false_choice);
05024     }
05025 
05029     <span class="comment">/*inline void SetBoolEditor ( wxPGEditor* editor ) const</span>
05030 <span class="comment">    {</span>
05031 <span class="comment">        wxPropertyGrid::SetBoolEditor(editor);</span>
05032 <span class="comment">    }*/</span>
05033 
<a name="l05036"></a><a class="code" href="classwxPropertyGridManager.htm#a124">05036</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
05037     {
05038         wxPropertyCategory* pc = (wxPropertyCategory*)wxPGIdToPtr(<span class="keywordtype">id</span>);
05039 <span class="preprocessor">#ifdef __WXDEBUG__</span>
05040 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &gt; 0 );
05041 <span class="preprocessor">#endif</span>
05042 <span class="preprocessor"></span>        m_targetState-&gt;m_currentCategory = pc;
05043     }
05044 
<a name="l05047"></a><a class="code" href="classwxPropertyGridManager.htm#a125">05047</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name )
05048     {
05049         SetCurrentCategory(GetPropertyByName(name));
05050     }
05051 
05053     <span class="keywordtype">void</span> SetDescBoxHeight ( <span class="keywordtype">int</span> ht, <span class="keywordtype">bool</span> refresh = TRUE );
05054 
<a name="l05059"></a><a class="code" href="classwxPropertyGridManager.htm#a127">05059</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
05060     {
05061         m_propGrid.SetDefaultPriority(priority);
05062     }
05063 
<a name="l05065"></a><a class="code" href="classwxPropertyGridManager.htm#a128">05065</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
05066     {
05067         m_propGrid.ResetDefaultPriority();
05068     }
05069 
<a name="l05078"></a><a class="code" href="classwxPropertyGridManager.htm#a129">05078</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0 )
05079     {
05080         wxPropertyGridState::SetPropertyAttribute(wxPGIdToPtr(<span class="keywordtype">id</span>),attrid,value,arg_flags);
05081     }
05082     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGNameStr name, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0  )
05083     {
05084         SetPropertyAttribute(GetPropertyByName(name),attrid,value,arg_flags);
05085     }
05086 
<a name="l05090"></a><a class="code" href="classwxPropertyGridManager.htm#a131">05090</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col )
05091     {
05092         m_propGrid.SetPropertyColour ( <span class="keywordtype">id</span>, col );
05093     }
05094     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
05095     {
05096         m_propGrid.SetPropertyColour ( GetPropertyByName(name), col );
05097     }
05098 
<a name="l05100"></a><a class="code" href="classwxPropertyGridManager.htm#a133">05100</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
05101     {
05102         m_propGrid.SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
05103     }
05104     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
05105     {
05106         m_propGrid.SetColourIndex ( wxPGIdToPtr(GetPropertyByName(name)), 0 );
05107     }
05108 
<a name="l05110"></a><a class="code" href="classwxPropertyGridManager.htm#a135">05110</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; help_string )
05111     {
05112         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
05113         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetHelpString(help_string);
05114     }
05115 
<a name="l05117"></a><a class="code" href="classwxPropertyGridManager.htm#a136">05117</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; help_string )
05118     {
05119         SetPropertyHelpString(GetPropertyByName(name),help_string);
05120     }
05121 
05125     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
05126     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority );
05127 
05128     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value );
05129     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value );
05130     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxPGFloat value );
05131     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value );
05132     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
05133     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value );
05134     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
05135     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value );
05136     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
05137     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value );
05138     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value );
05139     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxPGFloat value );
05140     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value );
05141     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value );
05142     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value );
05143     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value );
05144     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value );
05145     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value );
05146     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxPoint&amp;)
05147     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxSize&amp;)
05148     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxArrayInt&amp;)
05149 
05150     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
05151     {
05152         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
05153     }
05154     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
05155     {
05156         SetPropertyValue(name,wxString(value));
05157     }
05158 
05163     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
05164     {
05165         m_targetState-&gt;SetPropertyValues(list,default_category);
05166     }
05167 
05168     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
05169     {
05170         SetPropertyValues (list.GetList(),default_category);
05171     }
05172     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxPG_EmptyString )
05173     {
05174         SetPropertyValues (list,GetPropertyByName(default_category));
05175     }
05176     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxPG_EmptyString )
05177     {
05178         SetPropertyValues (list.GetList(),GetPropertyByName(default_category));
05179     }
05180 
05184     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
05185     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGNameStr name );
05186 
<a name="l05188"></a><a class="code" href="classwxPropertyGridManager.htm#a160">05188</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSelection ( <span class="keywordtype">int</span> index ) { SelectPage(index); }
05189 
<a name="l05191"></a><a class="code" href="classwxPropertyGridManager.htm#a161">05191</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetStringSelection ( <span class="keyword">const</span> wxChar* name )
05192     {
05193         SelectPage ( GetPageByName(name) );
05194     }
05195 
05200     <span class="keywordtype">void</span> SetTargetPage ( <span class="keywordtype">int</span> index );
05201 
<a name="l05206"></a><a class="code" href="classwxPropertyGridManager.htm#a163">05206</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetTargetPage ( <span class="keyword">const</span> wxChar* name )
05207     {
05208         SetTargetPage ( GetPageByName(name) );
05209     }
05210 
<a name="l05212"></a><a class="code" href="classwxPropertyGridManager.htm#a164">05212</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ()
05213     {
05214         m_propGrid.Sort(wxPGIdGen(m_targetState-&gt;m_properties));
05215     }
05216 
<a name="l05219"></a><a class="code" href="classwxPropertyGridManager.htm#a165">05219</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> )
05220     {
05221         m_propGrid.Sort(<span class="keywordtype">id</span>);
05222     }
05223 
<a name="l05226"></a><a class="code" href="classwxPropertyGridManager.htm#a166">05226</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
05227     {
05228         m_propGrid.Sort ( GetPropertyByName(name) );
05229     }
05230 
<a name="l05233"></a><a class="code" href="classwxPropertyGridManager.htm#a167">05233</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
05234     {
05235         <span class="keywordtype">int</span> priority = wxPG_LOW;
05236         <span class="keywordflow">if</span> ( GetPropertyPriority(<span class="keywordtype">id</span>) == wxPG_LOW )
05237             priority = wxPG_HIGH;
05238         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
05239     }
05240 
<a name="l05243"></a><a class="code" href="classwxPropertyGridManager.htm#a168">05243</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
05244     {
05245         TogglePropertyPriority(GetPropertyByName(name));
05246     }
05247 
05248 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
05249 <span class="preprocessor"></span>
05250     <span class="comment">//</span>
05251     <span class="comment">// Overridden functions - no documentation required.</span>
05252     <span class="comment">//</span>
05253 
05254     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
05255     <span class="keywordtype">void</span> SetId( wxWindowID winid );
05256 
05257     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
05258     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
05259     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
05260     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
05261     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag ( <span class="keywordtype">long</span> style );
05262 
05263     <span class="comment">//</span>
05264     <span class="comment">// Event handlers</span>
05265     <span class="comment">//</span>
05266     <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
05267     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
05268     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
05269     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
05270 
05271     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent &amp;event );
05272 
05273     <span class="keywordtype">void</span> OnToolbarClick ( wxCommandEvent &amp;event );
05274     <span class="keywordtype">void</span> OnResize ( wxSizeEvent&amp; event );
05275     <span class="keywordtype">void</span> OnCompactorClick ( wxCommandEvent&amp; event );
05276     <span class="keywordtype">void</span> OnPropertyGridSelect ( wxPropertyGridEvent&amp; event );
05277 
05278 <span class="keyword">protected</span>:
05279 
05280     wxPropertyGrid  m_propGrid;
05281 
05282     wxArrayPtrVoid  m_arrPages;
05283 
05284 <span class="preprocessor">#if wxUSE_TOOLBAR</span>
05285 <span class="preprocessor"></span>    wxToolBar*      m_pToolbar;
05286     <span class="comment">//wxBitmap*       m_pBmpCatMode;</span>
05287     <span class="comment">//wxBitmap*       m_pBmpNonCatMode;</span>
05288 <span class="preprocessor">#endif</span>
05289 <span class="preprocessor"></span>    wxStaticText*   m_pTxtHelpCaption;
05290     wxStaticText*   m_pTxtHelpContent;
05291     wxButton*       m_pButCompactor;
05292 
05293     <span class="comment">//wxWindow*       m_splitterPrevDrawnWin;</span>
05294 
05295     wxPropertyGridState*    m_targetState;
05296 
05297     <span class="keywordtype">long</span>            m_iFlags;
05298 
05299     <span class="comment">// Selected page index.</span>
05300     <span class="keywordtype">int</span>             m_selPage;
05301 
05302     <span class="keywordtype">int</span>             m_width;
05303 
05304     <span class="keywordtype">int</span>             m_height;
05305 
05306     <span class="keywordtype">int</span>             m_extraHeight;
05307 
05308     <span class="keywordtype">int</span>             m_splitterY;
05309 
05310     <span class="keywordtype">int</span>             m_splitterHeight;
05311 
05312     <span class="keywordtype">int</span>             m_nextTbInd;
05313 
05314     <span class="keywordtype">int</span>             m_dragOffset;
05315 
05316     wxCursor        m_cursorSizeNS;
05317 
05318     <span class="keywordtype">int</span>             m_nextDescBoxSize;
05319 
05320     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_dragStatus;
05321 
05322     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_onSplitter;
05323 
05324     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span>, wxPropertyGridState* parent_state );
05325 
05326     <span class="keyword">inline</span> wxPGId GetPropertyByNameWithAssert ( wxPGNameStr name )<span class="keyword"> const</span>
05327 <span class="keyword">    </span>{
05328         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
05329         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
05330         <span class="keywordflow">return</span> <span class="keywordtype">id</span>;
05331     }
05332 
05333     <span class="comment">// Sets some members to defaults.</span>
05334         <span class="keywordtype">void</span> Init1();
05335 
05336     <span class="comment">// Initializes some members.</span>
05337         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
05338 
05342     <span class="keywordtype">void</span> RecalculatePositions ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
05343 
05345     <span class="keywordtype">void</span> RecreateControls ();
05346 
05347     <span class="keywordtype">void</span> RefreshHelpBox ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height );
05348 
05349     <span class="keywordtype">void</span> RepaintSplitter ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height, <span class="keywordtype">bool</span> desc_too );
05350 
05351     <span class="keywordtype">void</span> SetDescribedProperty ( wxPGProperty* p );
05352 
05353     <span class="keyword">inline</span> wxPropertyGridPageData* GetPage ( size_t ind )<span class="keyword"> const</span>
05354 <span class="keyword">    </span>{
05355         <span class="keywordflow">return</span> (wxPropertyGridPageData*)m_arrPages.Item(ind);
05356     }
05357 
05358 <span class="preprocessor">#endif</span>
05359 <span class="preprocessor"></span>
05360 <span class="keyword">private</span>:
05361     DECLARE_EVENT_TABLE()
05362 };
05363 
05364 <span class="preprocessor">#endif</span>
05365 <span class="preprocessor"></span>
05366 <span class="preprocessor">#undef wxPG_USE_STATE</span>
05367 <span class="preprocessor"></span>
05368 <span class="comment">// -----------------------------------------------------------------------</span>
05369 
<a name="l05386"></a><a class="code" href="classwxPropertyGridEvent.htm">05386</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridEvent : <span class="keyword">public</span> wxCommandEvent
05387 {
05388 <span class="keyword">public</span>:
05389 
05391     wxPropertyGridEvent(wxEventType commandType=0, <span class="keywordtype">int</span> <span class="keywordtype">id</span>=0);
05392 <span class="preprocessor">#ifndef SWIG</span>
05393 <span class="preprocessor"></span>
05394     wxPropertyGridEvent(<span class="keyword">const</span> wxPropertyGridEvent&amp; event);
05395 <span class="preprocessor">#endif</span>
05396 <span class="preprocessor"></span>
05397     ~wxPropertyGridEvent();
05398 
05400     <span class="keyword">virtual</span> wxEvent* Clone() <span class="keyword">const</span>;
05401 
<a name="l05403"></a><a class="code" href="classwxPropertyGridEvent.htm#a4">05403</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EnableProperty( <span class="keywordtype">bool</span> enable = TRUE )
05404     {
05405         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),enable);
05406     }
05407 
<a name="l05409"></a><a class="code" href="classwxPropertyGridEvent.htm#a5">05409</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> DisableProperty()
05410     {
05411         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),FALSE);
05412     }
05413 
<a name="l05415"></a><a class="code" href="classwxPropertyGridEvent.htm#a6">05415</a>     wxPGId GetProperty()<span class="keyword"> const</span>
05416 <span class="keyword">    </span>{
05417         <span class="keywordflow">return</span> wxPGIdGen(m_property);
05418     }
05419 
<a name="l05421"></a><a class="code" href="classwxPropertyGridEvent.htm#a7">05421</a>     wxPGProperty* GetPropertyPtr()<span class="keyword"> const</span>
05422 <span class="keyword">    </span>{
05423         <span class="keywordflow">return</span> m_property;
05424     }
05425 
<a name="l05427"></a><a class="code" href="classwxPropertyGridEvent.htm#a8">05427</a>     <span class="keyword">const</span> wxString&amp; GetPropertyLabel()<span class="keyword"> const</span>
05428 <span class="keyword">    </span>{
05429         wxASSERT ( m_property != NULL );
05430         <span class="keywordflow">return</span> m_property-&gt;GetLabel();
05431     }
05432 
<a name="l05434"></a><a class="code" href="classwxPropertyGridEvent.htm#a9">05434</a>     <span class="keyword">const</span> wxString&amp; GetPropertyName()<span class="keyword"> const</span>
05435 <span class="keyword">    </span>{
05436         wxASSERT ( m_property != NULL );
05437         <span class="keywordflow">return</span> m_property-&gt;GetName();
05438     }
05439 
05441 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
05442 <span class="preprocessor"></span>    <span class="keyword">const</span> wxVariant&amp; GetPropertyValue() <span class="keyword">const</span>
05443 <span class="preprocessor">#else</span>
<a name="l05444"></a><a class="code" href="classwxPropertyGridEvent.htm#a10">05444</a> <span class="preprocessor"></span>    wxVariant GetPropertyValue() <span class="keyword">const</span>
05445 <span class="preprocessor">#endif</span>
05446 <span class="preprocessor"></span>    {
05447         wxASSERT ( m_property != NULL );
05448         <span class="keywordflow">return</span> m_property-&gt;GetValueAsVariant();
05449     }
05450 
05451     <span class="keyword">inline</span> wxString GetPropertyValueAsString ()<span class="keyword"> const</span>
05452 <span class="keyword">    </span>{
05453         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsString( wxPGIdGen(m_property) );
05454     }
05455     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ()<span class="keyword"> const</span>
05456 <span class="keyword">    </span>{
05457         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsLong( wxPGIdGen(m_property) );
05458     }
05459     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt () { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(); }
05460     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsBool ()<span class="keyword"> const</span>
05461 <span class="keyword">    </span>{
05462         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsBool( wxPGIdGen(m_property) );
05463     }
05464     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ()<span class="keyword"> const</span>
05465 <span class="keyword">    </span>{
05466         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsDouble( wxPGIdGen(m_property) );
05467     }
05468     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ()<span class="keyword"> const</span>
05469 <span class="keyword">    </span>{
05470         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayString( wxPGIdGen(m_property) );
05471     }
05472     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ()<span class="keyword"> const</span>
05473 <span class="keyword">    </span>{
05474         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsWxObjectPtr( wxPGIdGen(m_property) );
05475     }
05476     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ()<span class="keyword"> const</span>
05477 <span class="keyword">    </span>{
05478         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsVoidPtr( wxPGIdGen(m_property) );
05479     }
05480     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ()<span class="keyword"> const</span>
05481 <span class="keyword">    </span>{
05482         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsPoint( wxPGIdGen(m_property) );
05483     }
05484     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ()<span class="keyword"> const</span>
05485 <span class="keyword">    </span>{
05486         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsSize( wxPGIdGen(m_property) );
05487     }
05488     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ()<span class="keyword"> const</span>
05489 <span class="keyword">    </span>{
05490         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayInt( wxPGIdGen(m_property) );
05491     }
05492 
<a name="l05494"></a><a class="code" href="classwxPropertyGridEvent.htm#a22">05494</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType()<span class="keyword"> const</span>
05495 <span class="keyword">    </span>{
05496         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueType( wxPGIdGen(m_property) );
05497     }
05498 
<a name="l05500"></a><a class="code" href="classwxPropertyGridEvent.htm#a23">05500</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasProperty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_property != (wxPGProperty*) NULL ); }
05501 
05502     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled()<span class="keyword"> const</span>
05503 <span class="keyword">    </span>{
05504         <span class="keywordflow">return</span> m_pg-&gt;IsPropertyEnabled(wxPGIdGen(m_property));
05505     }
05506 
<a name="l05508"></a><a class="code" href="classwxPropertyGridEvent.htm#a25">05508</a>     <span class="keywordtype">void</span> SetProperty ( wxPGId <span class="keywordtype">id</span> ) { m_property = &amp;wxPGIdToRef(<span class="keywordtype">id</span>); }
05509 
<a name="l05511"></a><a class="code" href="classwxPropertyGridEvent.htm#a26">05511</a>     <span class="keywordtype">void</span> SetProperty ( wxPGProperty* p ) { m_property = p; }
05512 
05513     <span class="keywordtype">void</span> SetPropertyGrid ( wxPropertyGrid* pg ) { m_pg = pg; }
05514 
05515 <span class="preprocessor">#ifndef SWIG</span>
05516 <span class="preprocessor"></span><span class="keyword">private</span>:
05517     DECLARE_DYNAMIC_CLASS(wxPropertyGridEvent)
05518 
05519     wxPGProperty*       m_property;
05520     wxPropertyGrid*     m_pg;
05521 <span class="preprocessor">#endif</span>
05522 <span class="preprocessor"></span>};
05523 
05524 <span class="preprocessor">#ifndef SWIG</span>
05525 <span class="preprocessor"></span>BEGIN_DECLARE_EVENT_TYPES()
05526     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_SELECTED,           1775)
05527     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_CHANGED,            1776)
05528     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_HIGHLIGHTED,        1777)
05529     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_RIGHT_CLICK,        1778)
05530     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_PAGE_CHANGED,       1779)
05531     
05532 END_DECLARE_EVENT_TYPES()
05533 #<span class="keywordflow">else</span>
05534     <span class="keyword">enum</span> {
05535         wxEVT_PG_SELECTED = 1775,
05536         wxEVT_PG_CHANGED,
05537         wxEVT_PG_HIGHLIGHTED,
05538         wxEVT_PG_RIGHT_CLICK,
05539         wxEVT_PG_PAGE_CHANGED,
05540     };
05541 <span class="preprocessor">#endif</span>
05542 <span class="preprocessor"></span>
05543 
05544 
05545 <span class="preprocessor">#ifndef SWIG</span>
05546 <span class="preprocessor"></span><span class="keyword">typedef</span> void (wxEvtHandler::*wxPropertyGridEventFunction)(wxPropertyGridEvent&amp;);
05547 
05548 <span class="preprocessor">#define EVT_PG_SELECTED(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_SELECTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05549 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_CHANGED(id, fn)               DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05550 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_HIGHLIGHTED(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_HIGHLIGHTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05551 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_RIGHT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_RIGHT_CLICK, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05552 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_PAGE_CHANGED(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_PAGE_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05553 <span class="preprocessor"></span>
05554 <span class="preprocessor">#endif</span>
05555 <span class="preprocessor"></span>
05556 
05557 <span class="comment">// -----------------------------------------------------------------------</span>
05558 
05559 <span class="comment">//</span>
05560 <span class="comment">// Undefine macros that are not needed outside propertygrid sources</span>
05561 <span class="comment">//</span>
05562 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
05563 <span class="preprocessor"></span><span class="comment">//# undef wxPG_FL_ANY_VALUE_CHANGED</span>
05564 <span class="preprocessor"># undef wxPG_FL_DESC_REFRESH_REQUIRED</span>
05565 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLBAR_DETECTED</span>
05566 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IPAM_DECL</span>
05567 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IMPLEMENT_PGMAN_METHOD_NORET1</span>
05568 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_PAINT_DC_INIT</span>
05569 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_CLIENT_DC_INIT_R</span>
05570 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_CLIENT_DC_INIT</span>
05571 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CREATEDSTATE</span>
05572 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_NOSTATUSBARHELP</span>
05573 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLED</span>
05574 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_HIDE_STATE</span>
05575 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE_CHILD</span>
05576 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE</span>
05577 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE_CHILD</span>
05578 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CUR_USES_CUSTOM_IMAGE</span>
05579 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_PRIMARY_FILLS_ENTIRE</span>
05580 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_VALUE_MODIFIED</span>
05581 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE</span>
05582 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUSED</span>
05583 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_CAPTURED</span>
05584 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_INITIALIZED</span>
05585 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_ACTIVATION_BY_CLICK</span>
05586 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DONT_CENTER_SPLITTER</span>
05587 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_ALLOW_EMPTY_TOOLTIPS</span>
05588 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
05589 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_CUSTOM_CONTROLS</span>
05590 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_NO_CHILD_EVT_MOTION</span>
05591 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_CREATE_CONTROLS_HIDDEN</span>
05592 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_DOUBLE_BUFFER</span>
05593 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_HEAVY_GFX</span>
05594 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_DEFAULT_SPLITTERX</span>
05595 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_ICON_WIDTH</span>
05596 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_RENDERER_NATIVE</span>
05597 <span class="preprocessor"></span><span class="preprocessor"># undef wxPGIdGen</span>
05598 <span class="preprocessor"></span><span class="preprocessor"># undef wxPGNameStr</span>
05599 <span class="preprocessor"></span><span class="preprocessor"># undef wxPGIdToRef</span>
05600 <span class="preprocessor"></span><span class="preprocessor"># undef wxPGIdToPtr</span>
05601 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
05602 <span class="preprocessor"></span>
05603 <span class="comment">// -----------------------------------------------------------------------</span>
05604 
05605 <span class="preprocessor">#endif // __WX_PROPERTYGRID_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Fri Jan 14 10:26:14 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
