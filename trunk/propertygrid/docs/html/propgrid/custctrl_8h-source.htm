<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: custctrl.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>custctrl.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        custctrl.h</span>
00003 <span class="comment">// Purpose:     wxCustomControls (v1.0.8)</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Oct-24-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_CUSTCTRL_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_CUSTCTRL_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "custctrl.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">// Doxygen special</span>
00020 <span class="preprocessor">#ifndef _WX_WINDOW_H_BASE_</span>
00021 <span class="preprocessor"></span><span class="preprocessor"># include "cc_dox_mainpage.h"</span>
00022 <span class="preprocessor">#endif</span>
00023 <span class="preprocessor"></span>
00024 <span class="comment">// -----------------------------------------------------------------------</span>
00025 
00026 <span class="preprocessor">#include "wx/caret.h"</span>
00027 
00028 <span class="preprocessor">#include "wx/renderer.h"</span>
00029 
00030 <span class="comment">// -----------------------------------------------------------------------</span>
00031 
00032 <span class="comment">//</span>
00033 <span class="comment">// Here are some platform dependent defines</span>
00034 <span class="comment">// (more in custctrl.cpp)</span>
00035 <span class="comment">//</span>
00036 
00037 <span class="preprocessor">#if defined(__WXMSW__)</span>
00038 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00039 
00040 <span class="preprocessor">#if wxUSE_UXTHEME</span>
00041 <span class="preprocessor"></span><span class="preprocessor"># include "wx/msw/uxtheme.h"</span>
00042 <span class="preprocessor">#endif</span>
00043 <span class="preprocessor"></span>
00044 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00045 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00046 <span class="preprocessor"></span>
00047 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00048 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00049 <span class="preprocessor"></span>
00050 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               1  // 1 if wxPopupWindow can be used.</span>
00051 <span class="preprocessor"></span>
00052 <span class="preprocessor">#elif defined(__WXGTK__)</span>
00053 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00054 
00055 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00056 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00057 <span class="preprocessor"></span>
00058 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00059 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00060 <span class="preprocessor"></span>
00061     <span class="comment">// Disabled because no proper border support.</span>
00062 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               0  // 1 if wxPopupWindow can be used.</span>
00063 <span class="preprocessor"></span>
00064 <span class="preprocessor">#elif defined(__WXMAC__)</span>
00065 <span class="preprocessor"></span>    <span class="comment">// *not* tested</span>
00066 
00067 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00068 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00069 <span class="preprocessor"></span>
00070 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00071 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00072 <span class="preprocessor"></span>
00073 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               1  // 1 if wxPopupWindow can be used.</span>
00074 <span class="preprocessor"></span>
00075 <span class="preprocessor">#else</span>
00076 <span class="preprocessor"></span>    <span class="comment">// defaults</span>
00077 
00078 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00079 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00080 <span class="preprocessor"></span>
00081 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00082 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00083 <span class="preprocessor"></span>
00084 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               0  // 1 if wxPopupWindow can be used.</span>
00085 <span class="preprocessor"></span>
00086 <span class="preprocessor">#endif</span>
00087 <span class="preprocessor"></span>
00088 <span class="comment">// Conform to wxUSE_POPUPWIN</span>
00089 <span class="preprocessor">#if !wxUSE_POPUPWIN</span>
00090 <span class="preprocessor"></span><span class="preprocessor"># undef wxCC_USE_POPUPWIN</span>
00091 <span class="preprocessor"></span><span class="preprocessor"># define wxCC_USE_POPUPWIN                  0</span>
00092 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00093 <span class="preprocessor"></span>
00097 <span class="preprocessor">#define wxCC_CORRECT_CONTROL_POSITION     0</span>
00098 <span class="preprocessor"></span>
00099 <span class="comment">// If given in button renderer flags, then popup arrow</span>
00100 <span class="comment">// is drawn on it as well.</span>
00101 <span class="preprocessor">#define wxCONTROL_POPUP_ARROW       wxCONTROL_CHECKED</span>
00102 <span class="preprocessor"></span>
00103 <span class="comment">// -----------------------------------------------------------------------</span>
00104 
00105 <span class="preprocessor">#if defined(WXMAKINGDLL_CUSTCTRL) || defined(WXMAKINGDLL_PROPGRID)</span>
00106 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_CC WXEXPORT</span>
00107 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00108 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_CC WXIMPORT</span>
00109 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00110 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_CC</span>
00111 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00112 <span class="preprocessor"></span>
00113 <span class="comment">// -----------------------------------------------------------------------</span>
00114 
00115 <span class="preprocessor">#ifndef SWIG</span>
00116 <span class="preprocessor"></span><span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControl;
00117 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomTextCtrl;
00118 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomButton;
00119 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBox;
00120 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBoxHandler;
00121 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControlManager;
00122 <span class="preprocessor">#endif</span>
00123 <span class="preprocessor"></span>
00124 <span class="comment">// -----------------------------------------------------------------------</span>
00125 
<a name="l00128"></a><a class="code" href="classwxCustomControlHandler.htm">00128</a> <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControlHandler
00129 {
00130 <span class="keyword">public</span>:
00131 
00132     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetControl ( wxCustomControl* pctrl )
00133     {
00134         m_control = pctrl;
00135         m_flags = 0;
00136     }
00137     <span class="keyword">inline</span> wxCustomControl* GetControl()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_control; }
00138     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsMouseFocused() <span class="keyword">const</span>;
00139     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y ) { m_rect.x = x; m_rect.y = y; }
00140     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height ) { m_rect.width = width; m_rect.height = height; }
00141 
00142     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz )
00143     {
00144         m_rect.x = pos.x; m_rect.y = pos.y;
00145         m_rect.width = sz.x; m_rect.height = sz.y;
00146     }
00147 
00148     <span class="keyword">inline</span> <span class="keyword">const</span> wxRect&amp; GetRect()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_rect; }
00149 
00150     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearFlag( <span class="keywordtype">long</span> flag ) { m_flags &amp;= ~(flag); }
00151     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFlag( <span class="keywordtype">long</span> flag ) { m_flags |= flag; }
00152 
00153     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
00154 
00155 <span class="keyword">protected</span>:
00156     wxCustomControl*        m_control;
00157     wxRect                  m_rect;
00158     <span class="keywordtype">long</span>                    m_flags; <span class="comment">// barely needed</span>
00159 };
00160 
00161 <span class="comment">// -----------------------------------------------------------------------</span>
00162 
00163 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomTextCtrlHandler : <span class="keyword">public</span> wxCustomControlHandler
00164 {
00165 <span class="keyword">public</span>:
00166     
00167     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz,
00168         <span class="keyword">const</span> wxString&amp; value );
00169 
00170     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00171 
00172     <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00173     
00174     <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event );
00175 
00176     <span class="keywordtype">int</span> HitTest ( wxCoord x, <span class="keywordtype">int</span>* pCol );
00177 
00178     <span class="keywordtype">bool</span> SetInsertionPoint ( <span class="keywordtype">long</span> pos, <span class="keywordtype">long</span> first_visible );
00179 
00180     <span class="keywordtype">bool</span> SetSelection ( <span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to );
00181 
00182     <span class="keywordtype">void</span> SetValue ( <span class="keyword">const</span> wxString&amp; value );
00183 
00184     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPosition ()<span class="keyword"> const</span>
00185 <span class="keyword">    </span>{
00186         <span class="keywordflow">return</span> m_position;
00187     }
00188 
00189     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetValue()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_text; }
00190 
00191     <span class="comment">// like DEL key was pressed</span>
00192     <span class="keywordtype">void</span> DeleteSelection ();
00193 
00194     <span class="comment">// wxCC_FL_MODIFIED</span>
00195 
00196 <span class="keyword">protected</span>:
00197 
00198     wxString        m_text;
00199     <span class="comment">//wxString        m_textAtPos; // text that begins at position</span>
00200     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    m_position;
00201     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    m_scrollPosition;
00202     <span class="keywordtype">int</span>             m_selStart;
00203     <span class="keywordtype">int</span>             m_selEnd;
00204     <span class="keywordtype">int</span>             m_itemButDown; <span class="comment">// dragging centers around this</span>
00205 
00206     wxArrayInt      m_arrExtents; <span class="comment">// cached array of text extents</span>
00207 
00208     <span class="keywordtype">int</span> UpdateExtentCache ( wxString&amp; tempstr, size_t index );
00209 
00210 };
00211 
00212 <span class="comment">// -----------------------------------------------------------------------</span>
00213 
00214 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomButtonHandler : <span class="keyword">public</span> wxCustomControlHandler
00215 {
00216     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButton;
00217 <span class="keyword">public</span>:
00218     
00219     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00220 
00221     <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event );
00222 
00223     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetButtonState ( <span class="keywordtype">int</span> state ) { m_down = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)state; }
00224 
00225 <span class="keyword">protected</span>:
00226     wxString        m_label;
00227     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_down; <span class="comment">// 0 means button is up</span>
00228 
00229 };
00230 
00231 <span class="comment">// -----------------------------------------------------------------------</span>
00232 
00233 <span class="preprocessor">#if wxCC_USE_POPUPWIN</span>
00234 <span class="preprocessor"></span><span class="preprocessor"># include "wx/popupwin.h"</span>
00235 <span class="preprocessor"># define wxCustomComboPopupBase      wxPopupWindow</span>
00236 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00237 <span class="preprocessor"></span><span class="preprocessor"># define wxCustomComboPopupBase      wxWindow</span>
00238 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00239 <span class="preprocessor"></span>
00240 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboItem
00241 {
00242 <span class="keyword">public</span>:
00243     wxCustomComboItem();
00244     <span class="keyword">virtual</span> ~wxCustomComboItem();
00245 <span class="keyword">protected</span>:
00246 };
00247 
00248 <span class="comment">// -----------------------------------------------------------------------</span>
00249 
00250 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboPopup : <span class="keyword">public</span> wxCustomComboPopupBase
00251 {
00252     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomControlManager;
00253 <span class="keyword">public</span>:
00254     wxCustomComboPopup ();
00255     <span class="keyword">virtual</span> ~wxCustomComboPopup();
00256 
00257     <span class="keywordtype">bool</span> Create ( wxWindow* frame, wxCCustomComboBoxHandler* data,
00258         <span class="keyword">const</span> wxRect&amp; ctrl_rect, wxCustomControl* ctrl,
00259         <span class="keyword">const</span> wxSize&amp; size, <span class="keywordtype">int</span> sizealign );
00260 
00261 <span class="comment">/*#if wxCC_USE_POPUPWIN</span>
00262 <span class="comment">    inline wxScrolledWindow* GetWindow() const { return m_subWindow; };</span>
00263 <span class="comment">#else</span>
00264 <span class="comment">    inline wxScrolledWindow* GetWindow() { return this; };</span>
00265 <span class="comment">#endif*/</span>
00266 
00267     <span class="comment">// kbscroll allows forcing to scroll one item at a time.</span>
00268     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ShowItem ( <span class="keyword">const</span> wxCustomComboItem&amp; item, <span class="keywordtype">bool</span> kbscroll = FALSE ) = 0;
00269     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnKeyEvent ( wxKeyEvent&amp; event ) = 0;
00270     <span class="comment">//virtual void SetSelection ( const wxCustomComboItem&amp; item ) = 0;</span>
00271 
00272     <span class="keywordtype">void</span> ForcedClose ();
00273 
00274     <span class="keyword">inline</span> wxCustomControl* GetControl ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_control; }
00275 
00276     <span class="comment">// Event handlers.</span>
00277     <span class="keywordtype">void</span> OnMouseEntry( wxMouseEvent&amp; event );
00278 
00279 <span class="keyword">protected</span>:
00280     wxCustomControl*            m_control;
00281     wxCustomControlManager*     m_manager;
00282     wxCCustomComboBoxHandler*   m_chData;
00283 
00284     wxArrayPtrVoid              m_labels; <span class="comment">// holds pointers to labels</span>
00285 
00286     <span class="keywordtype">int</span>                         m_wheelSum;
00287 
00288     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_orientation;
00289 
00290     <span class="comment">//unsigned char               m_entryStatus;</span>
00291 <span class="keyword">private</span>:
00292     DECLARE_EVENT_TABLE()
00293 };
00294 
00295 <span class="comment">// -----------------------------------------------------------------------</span>
00296 
00297 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboListItem : <span class="keyword">public</span> wxCustomComboItem
00298 {
00299 <span class="keyword">public</span>:
00300     wxCustomComboListItem();
00301     wxCustomComboListItem( <span class="keywordtype">int</span> index ) { m_index = index; }
00302     <span class="keyword">virtual</span> ~wxCustomComboListItem();
00303 
00304     <span class="keywordtype">int</span> m_index;
00305 
00306 <span class="keyword">protected</span>:
00307 };
00308 
00309 <span class="comment">// -----------------------------------------------------------------------</span>
00310 
00311 <span class="preprocessor">#include "wx/scrolbar.h"</span>
00312 
00313 <span class="keyword">class </span>WXDLLIMPEXP_CC wxComboPopupDefaultList : <span class="keyword">public</span> wxCustomComboPopup
00314 {
00315 <span class="keyword">public</span>:
00316     wxComboPopupDefaultList ( wxWindow* frame, wxCCustomComboBoxHandler* data,
00317         <span class="keyword">const</span> wxRect&amp; rect, wxCustomControl* ctrl );
00318     <span class="keyword">virtual</span> ~wxComboPopupDefaultList();
00319 
00320     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ShowItem ( <span class="keyword">const</span> wxCustomComboItem&amp; item, <span class="keywordtype">bool</span> kbscroll = FALSE );
00321 
00322     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowItem ( <span class="keywordtype">int</span> index, <span class="keywordtype">bool</span> kbscroll = FALSE )
00323     {
00324         wxCustomComboListItem item(index);
00325         ShowItem (item,kbscroll);
00326     }
00327 
00328     <span class="comment">//virtual void SetSelection ( const wxCustomComboItem&amp; item );</span>
00329 
00330     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnKeyEvent ( wxKeyEvent&amp; event );
00331 
00332     <span class="keywordtype">int</span> HitTest ( <span class="keywordtype">int</span> y );
00333 
00334     <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawItem ( <span class="keywordtype">int</span> index )
00335     {
00336         wxCustomComboListItem item(index);
00337         DrawItem(item);
00338     }
00339     <span class="keywordtype">void</span> DrawItem ( <span class="keyword">const</span> wxCustomComboItem&amp; item );
00340     <span class="keywordtype">void</span> DrawItem ( wxDC&amp; dc, wxRect&amp; r, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index );
00341 
00342     <span class="keywordtype">void</span> OnMouseWheelEvent ( wxMouseEvent&amp; event );
00343 
00344     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent&amp; event );
00345 
00346     <span class="keywordtype">void</span> OnMouseDown ( wxMouseEvent&amp; event );
00347     <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent&amp; event );
00348     <span class="keywordtype">void</span> OnScrollEvent ( wxScrollEvent&amp; event );
00349 
00350     <span class="keywordtype">void</span> SetViewStart ( <span class="keywordtype">int</span> index, <span class="keywordtype">bool</span> adjust_sb );
00351     <span class="keywordtype">void</span> RecheckHilighted ( <span class="keywordtype">int</span> y );
00352 
00353     <span class="comment">//void OnMouseUp ( wxMouseEvent&amp; event );</span>
00354 
00355     <span class="comment">//void SetImagePaintFunction ( wxCustomPaintFunc paintfunc ) { m_paintFunc = paintfunc; }</span>
00356 
00357 <span class="keyword">protected</span>:
00358 
00359     <span class="keywordtype">int</span>             m_hilighted;
00360     <span class="keywordtype">int</span>             m_itemHeight;
00361 
00362     <span class="comment">// Scrolling related.</span>
00363     wxScrollBar*    m_pScrollBar;
00364     <span class="keywordtype">int</span>             m_clientWidth;
00365     <span class="keywordtype">int</span>             m_viewStartY;
00366     <span class="keywordtype">int</span>             m_viewStartIndex;
00367     <span class="keywordtype">int</span>             m_sbWidth;
00368 
00369 <span class="keyword">private</span>:
00370     DECLARE_EVENT_TABLE()
00371 };
00372 
00373 <span class="comment">// -----------------------------------------------------------------------</span>
00374 
00375 <span class="keyword">typedef</span> wxSize (*wxCustomPaintFunc) ( wxDC&amp;, <span class="keyword">const</span> wxRect&amp;, <span class="keywordtype">int</span>, <span class="keywordtype">void</span>* );
00376 
00377 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboPopup;
00378 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboItem;
00379 <span class="keyword">class </span>WXDLLIMPEXP_CC wxComboPopupDefaultList;
00380 
00381 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBoxHandler : <span class="keyword">public</span> wxCustomControlHandler
00382 {
00383     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBox;
00384     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomComboPopup;
00385 <span class="keyword">public</span>:
00386     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxString&amp; value,
00387         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
00388 
00389     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetControl ( wxCustomControl* pctrl )
00390     {
00391         wxCustomControlHandler::SetControl ( pctrl );
00392         m_btData.SetControl ( pctrl );
00393     }
00394 
00395     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSelection ( <span class="keyword">const</span> wxCustomComboItem&amp; item ) = 0;
00396 
00397     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect, <span class="keywordtype">bool</span> item_too );
00398 
00399     <span class="keyword">inline</span> wxCustomComboPopup* GetPopupInstance ()<span class="keyword"> const</span>
00400 <span class="keyword">    </span>{
00401         <span class="keywordflow">return</span> m_listInstance;
00402     }
00403 
00404     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnSelect ( <span class="keyword">const</span> wxCustomComboItem&amp; item ) = 0;
00405 
00406     <span class="keyword">inline</span> <span class="keywordtype">void</span> IntOnSelect ( <span class="keywordtype">int</span> index )
00407     {
00408         wxCustomComboListItem item(index);
00409         OnSelect (item);
00410     }
00411 
00412     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event ) = 0;
00413 
00414     <span class="keyword">virtual</span> wxCustomComboPopup* CreatePopup ( wxWindow* frame,
00415         <span class="keyword">const</span> wxRect&amp; ctrl_rect, wxCustomControl* ctrl ) = 0;
00416 
00417     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00418 
00419     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y )
00420     {
00421         m_rect.x = x; m_rect.y = y;
00422         m_btData.Move ( x + m_rect.width - m_buttonWidth, y );
00423     }
00424     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height )
00425     {
00426         m_rect.width = width - m_buttonWidth;
00427         m_rect.height = height;
00428         m_btData.Move ( m_rect.x + width - m_buttonWidth, m_rect.y );
00429         m_btData.SetSize ( m_buttonWidth, height );
00430     }
00431 
00432     <span class="comment">//inline const wxArrayPtrVoid&amp; GetLabels() const { return m_labels; }</span>
00433     <span class="keyword">inline</span> wxCustomPaintFunc GetPaintFunc()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_paintfunc; }
00434     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPaintFuncCustomData()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_paintfunc_customdata; }
00435     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetImageSize()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_imageSize; }
00436     <span class="comment">//inline int GetSelection() const { return m_selection; }</span>
00437 
00438     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValue( <span class="keyword">const</span> wxString&amp; text ) { m_text = text; }
00439     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetValue()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_text; }
00440 
00441     <span class="keyword">inline</span> wxCCustomButtonHandler* GetButtonData() { <span class="keywordflow">return</span> &amp;m_btData; }
00442 
00443     <span class="keyword">virtual</span> ~wxCCustomComboBoxHandler();
00444 
00445 <span class="keyword">protected</span>:
00446 
00447     <span class="comment">//int                     m_selection;</span>
00448 
00449     <span class="keywordtype">int</span>                     m_buttonWidth;
00450 
00451     wxSize                  m_imageSize; <span class="comment">// size of custom image in the list</span>
00452 
00453     wxString                m_text; <span class="comment">// text currently shown</span>
00454 
00455     <span class="comment">//wxArrayPtrVoid          m_labels; // holds pointers to labels</span>
00456 
00457     wxCCustomButtonHandler      m_btData;
00458 
00459     <span class="comment">//wxCustomComboItem*      m_pItem;</span>
00460 
00461     wxCustomComboPopup*     m_listInstance;
00462 
00463     wxCustomPaintFunc       m_paintfunc;
00464     <span class="keywordtype">void</span>*                   m_paintfunc_customdata;
00465 
00466     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>           m_prevMouseFocus; <span class="comment">// used detect in which portion of control mouse is</span>
00467 
00468 };
00469 
00470 <span class="comment">// -----------------------------------------------------------------------</span>
00471 
00472 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBoxDefaultHandler : <span class="keyword">public</span> wxCCustomComboBoxHandler
00473 {
00474 <span class="keyword">public</span>:
00475     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxString&amp; value,
00476         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz,
00477         <span class="keywordtype">int</span> n, <span class="keyword">const</span> wxChar* choices[] );
00478 
00479     <span class="keywordtype">int</span> Append( <span class="keyword">const</span> wxString&amp; str );
00480 
00481     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSelection ( <span class="keyword">const</span> wxCustomComboItem&amp; item );
00482     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnSelect ( <span class="keyword">const</span> wxCustomComboItem&amp; item );
00483     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00484     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00485     <span class="keyword">virtual</span> wxCustomComboPopup* CreatePopup ( wxWindow* frame,
00486         <span class="keyword">const</span> wxRect&amp; ctrl_rect, wxCustomControl* ctrl );
00487 
00488     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayPtrVoid&amp; GetLabels()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_labels; }
00489     <span class="keyword">inline</span> wxArrayPtrVoid&amp; GetWritableLabels() { <span class="keywordflow">return</span> m_labels; }
00490     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selection; }
00491 
00492     <span class="keyword">virtual</span> ~wxCCustomComboBoxDefaultHandler();
00493 
00494 <span class="keyword">protected</span>:
00495 
00496     <span class="keywordtype">int</span>                     m_selection;
00497 
00498     wxArrayPtrVoid          m_labels; <span class="comment">// Holds pointers to labels.</span>
00499 
00500     wxArrayString           m_extraStrings; <span class="comment">// Place extra appended strings here.</span>
00501 
00502 };
00503 
00508 <span class="preprocessor">#define wxCCM_FL_SCROLLEDWIN        0x0001</span>
00509 <span class="preprocessor"></span>
00511 <span class="preprocessor">#define wxCCM_FL_EVENTREADY         0x0002</span>
00512 <span class="preprocessor"></span>
00514 <span class="preprocessor">#define wxCCM_FL_DRAGGING           0x0004</span>
00515 <span class="preprocessor"></span>
00517 <span class="preprocessor">#define wxCCM_FL_MOUSE_INSIDE       0x0008</span>
00518 <span class="preprocessor"></span>
00520 <span class="preprocessor">#define wxCCM_FL_VIEWSTARTCHANGED   0x0010</span>
00521 <span class="preprocessor"></span>
00523 <span class="preprocessor">#define wxCCM_FL_CARETVISIBLE       0x0020</span>
00524 <span class="preprocessor"></span>
00525 <span class="comment">// -----------------------------------------------------------------------</span>
00526 
00531 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControlManager
00532 {
00533     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomControl;
00534     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomTextCtrlHandler;
00535     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomTextCtrl;
00536     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButtonHandler;
00537     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButton;
00538     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBoxHandler;
00539     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBox;
00540 <span class="keyword">public</span>:
00541     
00542     wxCustomControlManager();
00543     wxCustomControlManager( wxWindow* parent );
00544     ~wxCustomControlManager();
00545 
00546     <span class="keywordtype">void</span> AddChild ( wxCustomControl* child );
00547 
00548     <span class="keywordtype">void</span> AddChildData ( wxCustomControlHandler* pdata );
00549 
00550     <span class="keywordtype">void</span> AddEvent ( wxCustomControl* child, <span class="keywordtype">int</span> eventtype );
00551 
00552     <span class="keywordtype">void</span> ClosePopup ();
00553 
00554     <span class="keywordtype">void</span> Create ( wxWindow* parent );
00555 
00560     wxDC&amp; CreateDC ( wxPoint* palignpt );
00561 
00564     wxWindow* CreatePopupParent() { <span class="keywordflow">return</span> m_parent; }
00565 
00569     <span class="keywordtype">void</span> CtrlWriteText ( wxDC&amp; dc, <span class="keyword">const</span> wxChar* text,
00570         <span class="keyword">const</span> wxRect&amp; rect, wxCustomControl* ctrl, <span class="keywordtype">int</span> state );
00571 
00573     <span class="keywordtype">void</span> DestroyDC ( wxDC&amp; dc );
00574 
00575     wxCustomControlHandler* FindDataByPosition ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00576     wxCustomControl* FindWindowByPosition ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00577 
00578     <span class="keyword">inline</span> <span class="keywordtype">void</span> ForceMouseLeave ( wxMouseEvent&amp; event )
00579     {
00580         DoMouseLeave ( event, NULL, TRUE );
00581     }
00582 
00583     <span class="keyword">inline</span> wxEvent&amp; GetEvent ()
00584     {
00585         m_flags &amp;= ~(wxCCM_FL_EVENTREADY);
00586         <span class="keywordflow">return</span> *(&amp;m_event);
00587     }
00588 
00589     <span class="keyword">inline</span> wxPoint GetCaretPosition ()<span class="keyword"> const</span>
00590 <span class="keyword">    </span>{
00591         wxPoint p = m_pCaret-&gt;GetPosition();
00592         <span class="comment">//TranslatePositionToLogical ( &amp;p.x, &amp;p.y );</span>
00593         <span class="keywordflow">return</span> p;
00594     }
00595 
00596     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetFlags ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_flags; }
00597 
00598     <span class="keyword">inline</span> wxWindow* GetPopup ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_openPopup; }
00599 
00600     <span class="keyword">inline</span> wxCustomControl* GetFocused ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ctrlKbFocus; }
00601     <span class="keyword">inline</span> wxCustomControlHandler* GetMouseFocusedData ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_dataMouseFocus; }
00602 
00603     <span class="keyword">inline</span> wxWindow* GetWindow ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parent; }
00604 
00605     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetWindowColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colBackground); }
00606     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetWindowTextColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colText); }
00607     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetSelectionColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colSelection); }
00608     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetSelectionTextColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colSelectionText); }
00609     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetButtonColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colButton); }
00610     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetButtonTextColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colButtonText); }
00611 
00612     <span class="keyword">inline</span> wxString&amp; GetTempString() { <span class="keywordflow">return</span> *(&amp;m_tempStr1); }
00613 
00614     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasEvent ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_flags &amp; wxCCM_FL_EVENTREADY)?TRUE:FALSE; }
00615 
00616     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasKbFocus ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_ctrlKbFocus!=NULL)?TRUE:FALSE; }
00617 
00618     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasMouseFocus ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_ctrlMouseFocus!=NULL)?TRUE:FALSE; }
00619 
00620     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideCaretBalanced ()
00621     {
00622         m_pCaret-&gt;Show ( FALSE );
00623     }
00624 
00625     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideCaret ()
00626     {
00627         <span class="keywordflow">if</span> ( m_pCaret &amp;&amp; ( m_flags &amp; wxCCM_FL_CARETVISIBLE ) )
00628         {
00629             m_pCaret-&gt;Show ( FALSE );
00630             m_flags &amp;= ~(wxCCM_FL_CARETVISIBLE);
00631             <span class="comment">//wxLogDebug ( wxT("HideCaret( visible_after=%i )"), (int)m_pCaret-&gt;IsVisible() );</span>
00632         }
00633     }
00634 
00635     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsCaretVisible ()<span class="keyword"> const</span>
00636 <span class="keyword">    </span>{
00637         <span class="comment">//if ( m_pCaret )</span>
00638             <span class="keywordflow">return</span> m_pCaret-&gt;IsVisible();
00639         <span class="comment">//return FALSE;</span>
00640     }
00641 
00642     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsDragging ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_flags &amp; wxCCM_FL_DRAGGING)?TRUE:FALSE; }
00643 
00644     <span class="keywordtype">void</span> MoveCaret ( <span class="keyword">const</span> wxRect&amp; ctrl_rect, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00645     <span class="comment">//void MoveCaretRelative ( int x, int y );</span>
00646     <span class="keywordtype">void</span> RepositionCaret ();
00647 
00650     <span class="keywordtype">void</span> OnParentFocusChange ( <span class="keywordtype">bool</span> state );
00651 
00654     <span class="keywordtype">void</span> OnParentScrollWinEvent ( wxScrollWinEvent &amp;event );
00655 
00656     <span class="keywordtype">void</span> OnParentScrollChange ();
00657 
00658     <span class="keywordtype">bool</span> ProcessKeyboardEvent ( wxKeyEvent&amp; event );
00659 
00666     <span class="keywordtype">bool</span> ProcessMouseEvent ( wxMouseEvent&amp; event );
00667 
00668     <span class="keywordtype">void</span> RemoveChild ( wxCustomControl* child );
00669 
00670     <span class="keywordtype">void</span> RemoveFocus ( wxCustomControl* child );
00671 
00672     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowCaret ()
00673     {
00674         <span class="keywordflow">if</span> ( m_pCaret &amp;&amp; !(m_flags &amp; wxCCM_FL_CARETVISIBLE) )
00675         {
00676             m_pCaret-&gt;Show ( TRUE );
00677             m_flags |= wxCCM_FL_CARETVISIBLE;
00678             <span class="comment">//wxLogDebug ( wxT("ShowCaret( visible_after=%i )"), (int)m_pCaret-&gt;IsVisible() );</span>
00679         }
00680     }
00681 
00682     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowCaretBalanced ()
00683     {
00684         m_pCaret-&gt;Show ( TRUE );
00685     }
00686 
00687     <span class="keywordtype">void</span> SetDoubleBuffer ( wxBitmap* buffer ) { m_bmpDoubleBuffer = buffer; }
00688 
00689     <span class="keywordtype">void</span> SetFocus ( wxCustomControl* child );
00690 
00691     <span class="keywordtype">void</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font ) { m_font = font; }
00692 
00693     <span class="keywordtype">void</span> SetPopup ( wxCustomComboPopup* popup );
00694 
00695     <span class="keyword">inline</span> <span class="keywordtype">void</span> StartDragging () { m_flags |= wxCCM_FL_DRAGGING; }
00696     
00697     <span class="keyword">inline</span> <span class="keywordtype">void</span> StopDragging () { m_flags &amp;= ~(wxCCM_FL_DRAGGING); }
00698 
00701     <span class="keywordtype">void</span> TranslatePositionToPhysical ( <span class="keywordtype">int</span>* x, <span class="keywordtype">int</span>* y ) <span class="keyword">const</span>;
00702     <span class="keywordtype">void</span> TranslatePositionToLogical ( <span class="keywordtype">int</span>* x, <span class="keywordtype">int</span>* y ) <span class="keyword">const</span>;
00703 
00704 <span class="keyword">protected</span>:
00705 
00706     <span class="comment">// returns index to first data of a control</span>
00707     <span class="keywordtype">int</span> GetControlsFirstData ( wxCustomControl* ctrl );
00708 
00709 <span class="keyword">protected</span>:
00710 
00711 
00712     wxWindow*               m_parent;
00713 
00714     wxBitmap*               m_bmpDoubleBuffer; <span class="comment">// never owns; just borrows parent's, if available;</span>
00715 
00716     <span class="comment">//wxArrayPtrVoid          m_controls;</span>
00717 
00718     wxArrayPtrVoid          m_handlers; <span class="comment">// one control may comprise of more than one controldata</span>
00719 
00720     wxCustomControl*    m_ctrlMouseFocus; <span class="comment">// which control has mouse focus</span>
00721     wxCustomControlHandler*    m_dataMouseFocus; <span class="comment">// which controldata has mouse focus</span>
00722     wxCustomControl*    m_ctrlKbFocus; <span class="comment">// which control has keyboard focus</span>
00723 
00724     wxCaret*                m_pCaret;
00725 
00726     wxPoint                 m_caretRelativePos; <span class="comment">// caret x inside m_ctrlKbFocus</span>
00727 
00728     wxColour                m_colBackground;
00729     wxColour                m_colText;
00730     wxColour                m_colSelection;
00731     wxColour                m_colSelectionText;
00732     wxColour                m_colButton;
00733     wxColour                m_colButtonText;
00734 
00735     wxFont                  m_font;
00736 
00737     wxCursor                m_cursorIBeam;
00738 
00739     wxString                m_tempStr1;
00740 
00741     <span class="keywordtype">long</span>                    m_flags;
00742 
00743     wxCommandEvent          m_event;
00744 
00745 <span class="preprocessor">#if wxCC_CORRECT_CONTROL_POSITION</span>
00746 <span class="preprocessor"></span>    wxSize                  m_prevViewStart; <span class="comment">// for wxScrolledWindow scroll management</span>
00747 <span class="preprocessor">#endif</span>
00748 <span class="preprocessor"></span>
00749     wxWindow*               m_openPopup;
00750 
00751     <span class="keywordtype">void</span> DoMouseLeave ( wxMouseEvent&amp; event, wxCustomControlHandler* newdata, <span class="keywordtype">bool</span> force );
00752 
00753 };
00754 
00755 <span class="comment">// -----------------------------------------------------------------------</span>
00756 
00757 <span class="preprocessor">#define wxCC_FL_KBFOCUS         0x0001</span>
00758 <span class="preprocessor"></span>
00759 <span class="preprocessor">#define wxCC_FL_MOUSEFOCUS      0x0002 // When mouse is over the control and it is not dragging for another control</span>
00760 <span class="preprocessor"></span>
00761 <span class="preprocessor">#define wxCC_FL_NEEDSCARET      0x0004</span>
00762 <span class="preprocessor"></span>
00763 <span class="preprocessor">#define wxCC_FL_DRAWN           0x0008 // Set by drawing function</span>
00764 <span class="preprocessor"></span>
00765 <span class="preprocessor">#define wxCC_FL_MODIFIED        0x0010 // May be needed internally by various controls/datas</span>
00766 <span class="preprocessor"></span>
00767 <span class="preprocessor">#define wxCC_FL_REMOVED         0x0020 // Manager's RemoveChild already called on this.</span>
00768 <span class="preprocessor"></span>
00769 <span class="preprocessor">#define wxCC_EXTRA_FLAG(N)      (1&lt;&lt;(16+N))</span>
00770 <span class="preprocessor"></span>
00771 <span class="comment">// -----------------------------------------------------------------------</span>
00772 
00773 <span class="keywordtype">void</span> wxRendererNative_DrawButton (wxWindow* win, wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect, <span class="keywordtype">int</span> flags = wxUP );
00774 
00775 <span class="comment">// -----------------------------------------------------------------------</span>
00776 
00777 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControl : <span class="keyword">public</span> wxObject
00778 {
00779         DECLARE_DYNAMIC_CLASS(wxCustomControl)
00780 
00781     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomControlManager;
00782     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomTextCtrlHandler;
00783     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButtonHandler;
00784     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBoxHandler;
00785 <span class="keyword">public</span>:
00786 
00787     wxCustomControl();
00788     wxCustomControl ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>,
00789         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; size, <span class="keywordtype">long</span> style = 0 );
00790     <span class="keyword">virtual</span> ~wxCustomControl();
00791 
00792     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00793 
00794     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_manager-&gt;m_colBackground);}
00795 
00796     <span class="keyword">inline</span> wxFont&amp; GetFont ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_pFont; }
00797     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetFontHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fontHeight; }
00798 
00799     <span class="keyword">inline</span> wxWindowID GetId ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_id; }
00800 
00801     <span class="keyword">inline</span> wxCustomControlManager* GetManager ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_manager; }
00802 
00803     <span class="keyword">inline</span> wxWindow* GetParent ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_manager-&gt;m_parent; }
00804     
00805     <span class="keyword">inline</span> wxPoint GetPosition ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPoint(m_rect.x,m_rect.y); }
00806     
00807     <span class="keyword">inline</span> wxRect GetRect ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_rect; }
00808     
00809     <span class="keyword">inline</span> wxSize GetSize ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxSize(m_rect.width,m_rect.height); }
00810 
00811     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetX ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_rect.x; }
00812     
00813     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetWindowStyle ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_windowStyle; }
00814 
00815     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( <span class="keyword">const</span> wxPoint&amp; pos ) { DoMove (pos.x,pos.y); }
00816 
00817     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( wxCoord x, wxCoord y ) { DoMove (x,y); }
00818 
00821     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnFocus ( <span class="keywordtype">bool</span> focused );
00822 
00825     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00826 
00829     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
00830 
00831     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00832 
00834     <span class="keywordtype">void</span> DrawPDC ( wxDC* dc = NULL );
00835 
00836     <span class="keyword">inline</span> <span class="keywordtype">void</span> Draw () { DrawPDC ( NULL ); }
00837 
00838     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc );
00839 
00843     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxPoint* align );
00844 
00852     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00853 
00854     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00855 
00856     wxCommandEvent&amp; GetEvent ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_manager-&gt;m_event); }
00857 
00858     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasFocus ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_manager-&gt;m_ctrlKbFocus == <span class="keyword">this</span> )?TRUE:FALSE; }
00859 
00860     <span class="keyword">inline</span> <span class="keywordtype">void</span> Refresh ( <span class="keywordtype">bool</span> = FALSE, <span class="keyword">const</span> wxRect* = (<span class="keyword">const</span> wxRect*) NULL ) { Draw(); }
00861 
00862     <span class="keyword">inline</span> <span class="keywordtype">void</span> RemoveFocus ()
00863     {
00864         m_manager-&gt;RemoveFocus ( <span class="keyword">this</span> );
00865     }
00866 
00867     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetFont () { m_pFont = &amp;m_manager-&gt;m_font; }
00868 
00869     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFocus ()
00870     {
00871         m_manager-&gt;SetFocus ( <span class="keyword">this</span> );
00872     }
00873 
00874     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFocusFromKbd ()
00875     {
00876         m_manager-&gt;SetFocus ( <span class="keyword">this</span> );
00877     }
00878 
00883     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFont ( wxFont&amp; font, wxDC* pdc = NULL );
00884 
00885     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height )
00886     {
00887         DoMove ( x, y );
00888         DoSetSize ( width, height );
00889     }
00890 
00891     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keyword">const</span> wxRect&amp; rect )
00892     {
00893         DoMove ( rect.x, rect.y );
00894         DoSetSize ( rect.width, rect.height );
00895     }
00896 
00897     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height )
00898     { 
00899         DoSetSize ( width, height );
00900     }
00901 
00902     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keyword">const</span> wxSize&amp; size )
00903     {
00904         DoSetSize ( size.x, size.y );
00905     }
00906 
00907 <span class="keyword">protected</span>:
00908     wxCustomControlManager  *m_manager;
00909     wxFont                  *m_pFont;
00910     wxRect                  m_rect;
00911     <span class="comment">//wxSize                  m_imageSize; // Size of image in front of the control</span>
00912     wxWindowID              m_id;
00913     <span class="keywordtype">long</span>                    m_windowStyle;
00914     wxUint32                m_flags;
00915     <span class="keywordtype">int</span>                     m_fontHeight;
00916     <span class="keywordtype">int</span>                     m_xSplit; <span class="comment">// splitting the control into two parts (wxCCustomComboBox needs)</span>
00917     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>           m_curPart; <span class="comment">// which part of the control is focused? (only if m_xSplit)</span>
00918 };
00919 
00920 <span class="comment">// -----------------------------------------------------------------------</span>
00921 
00922 <span class="keyword">inline</span> <span class="keywordtype">bool</span> wxCustomControlHandler::IsMouseFocused()<span class="keyword"> const</span>
00923 <span class="keyword"></span>{
00924     <span class="keywordflow">return</span> m_control-&gt;GetManager()-&gt;GetMouseFocusedData() == <span class="keyword">this</span>;
00925 }
00926 
00927 <span class="comment">// -----------------------------------------------------------------------</span>
00928 
00929 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomTextCtrl : <span class="keyword">public</span> wxCustomControl
00930 {
00931         DECLARE_DYNAMIC_CLASS(wxCCustomTextCtrl)
00932 
00933 <span class="keyword">public</span>:
00934 
00935     wxCCustomTextCtrl () : wxCustomControl() { }
00936 
00937     wxCCustomTextCtrl ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
00938         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00939         <span class="keywordtype">long</span> style = 0 );
00940 
00941     <span class="keyword">virtual</span> ~wxCCustomTextCtrl();
00942 
00943     <span class="keyword">inline</span> wxString GetValue()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_data.GetValue(); }
00944 
00945     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSelection(<span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to)
00946     {
00947         <span class="keywordflow">if</span> ( m_data.SetSelection(from,to) )
00948             Draw ();
00949     }
00950 
00951     <span class="keywordtype">void</span> SetValue ( <span class="keyword">const</span> wxString&amp; value );
00952 
00953     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetInsertionPoint ( <span class="keywordtype">long</span> pos, <span class="keywordtype">long</span> first_visible = -1 )
00954     {
00955         <span class="keywordflow">if</span> ( m_data.SetInsertionPoint (pos,first_visible) )
00956             Draw ();
00957     }
00958 
00959     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00960     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00961     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00962     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnFocus ( <span class="keywordtype">bool</span> focused );
00963     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00964     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
00965     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00966     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFont ( wxFont&amp; font, wxDC* pdc );
00967 
00968 <span class="keyword">protected</span>:
00969     wxCustomTextCtrlHandler    m_data;
00970 };
00971 
00972 <span class="comment">// -----------------------------------------------------------------------</span>
00973 
00974 <span class="comment">//#define wxCC_BT_DOWN    wxCC_EXTRA_FLAG(0)</span>
00975 
00976 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomButton : <span class="keyword">public</span> wxCustomControl
00977 {
00978         DECLARE_DYNAMIC_CLASS(wxCCustomButton)
00979 
00980 <span class="keyword">public</span>:
00981 
00982     wxCCustomButton () : wxCustomControl() { }
00983 
00984     wxCCustomButton ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* label,
00985         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize );
00986     <span class="keyword">virtual</span> ~wxCCustomButton();
00987 
00988     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabel ( <span class="keyword">const</span> wxChar* label ) { m_data.m_label = label; }
00989 
00990     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00991     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00992     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00993     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00994     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
00995     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00996     <span class="comment">//virtual void SetFont ( wxFont&amp; font );</span>
00997 
00998 <span class="keyword">protected</span>:
00999     wxCCustomButtonHandler      m_data;
01000 };
01001 
01002 <span class="comment">// -----------------------------------------------------------------------</span>
01003 
01004 <span class="preprocessor">#define wxCH_CC_DOUBLE_CLICK_CYCLES     0x0010 // double-clicking cycles the selection</span>
01005 <span class="preprocessor"></span><span class="preprocessor">#define wxCH_CC_IMAGE_EXTENDS           0x0020 // image is drawn outside in non-popup portion</span>
01006 <span class="preprocessor"></span><span class="preprocessor">#define wxCH_CC_DROPDOWN_ANCHOR_RIGHT   0x0040 // anchor drop-down to right edge of parent window.</span>
01007 <span class="preprocessor"></span>
01008 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBox : <span class="keyword">public</span> wxCustomControl
01009 {
01010         DECLARE_DYNAMIC_CLASS(wxCCustomComboBox)
01011 
01012 <span class="keyword">public</span>:
01013 
01014     wxCCustomComboBox () : wxCustomControl() { }
01015 
01016     wxCCustomComboBox ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>,
01017         <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
01018         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
01019         <span class="keywordtype">int</span> n = 0, <span class="keyword">const</span> wxChar* choices[] = NULL, <span class="keywordtype">long</span> style = 0,
01020         <span class="keyword">const</span> wxSize&amp; imagesize = wxDefaultSize );
01021     <span class="keyword">virtual</span> ~wxCCustomComboBox();
01022 
01023     <span class="keyword">inline</span> <span class="keywordtype">int</span> Append( <span class="keyword">const</span> wxString&amp; str )
01024     {
01025         <span class="keywordflow">return</span> ((wxCCustomComboBoxDefaultHandler*)m_chData)-&gt;Append( str );
01026     }
01027 
01028     <span class="keyword">inline</span> wxWindow* GetPopupInstance()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_chData-&gt;GetPopupInstance(); }
01029 
01030     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((wxCCustomComboBoxDefaultHandler*)m_chData)-&gt;GetSelection(); }
01031 
01032     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetValue ()<span class="keyword"> const</span>
01033 <span class="keyword">    </span>{
01034         <span class="keywordflow">return</span> m_chData-&gt;m_text;
01035     }
01036 
01037     <span class="keywordtype">void</span> SetSelection ( <span class="keywordtype">int</span> n );
01038 
01039     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetImagePaintFunction ( wxCustomPaintFunc paintfunc, <span class="keywordtype">void</span>* userdata )
01040     {
01041         m_chData-&gt;m_paintfunc = paintfunc;
01042         m_chData-&gt;m_paintfunc_customdata = userdata;
01043     }
01044 
01045     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
01046     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
01047     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
01048     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
01049     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
01050     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
01051 
01052     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValue ( <span class="keyword">const</span> wxString&amp; text )
01053     {
01054         m_chData-&gt;SetValue(text);
01055         Draw();
01056     }
01057 
01058     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; SetValue ()<span class="keyword"> const</span>
01059 <span class="keyword">    </span>{
01060         <span class="keywordflow">return</span> m_chData-&gt;GetValue();
01061     }
01062 
01063 <span class="keyword">protected</span>:
01064     wxCCustomComboBoxHandler*    m_chData;
01065 };
01066 
01067 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomChoice : <span class="keyword">public</span> wxCCustomComboBox
01068 {
01069         DECLARE_DYNAMIC_CLASS(wxCCustomChoice)
01070 
01071 <span class="keyword">public</span>:
01072 
01073     wxCCustomChoice () : wxCCustomComboBox() { }
01074 
01075     wxCCustomChoice ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>,
01076         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
01077         <span class="keywordtype">int</span> n = 0, <span class="keyword">const</span> wxChar* choices[] = NULL, <span class="keywordtype">long</span> style = 0,
01078         <span class="keyword">const</span> wxSize&amp; imagesize = wxDefaultSize );
01079     <span class="keyword">virtual</span> ~wxCCustomChoice();
01080 };
01081 
01082 <span class="comment">// -----------------------------------------------------------------------</span>
01083 
01084 <span class="comment">//</span>
01085 <span class="comment">// Undefine macros that are not needed outside library source files</span>
01086 <span class="comment">//</span>
01087 <span class="preprocessor">#ifndef __wxCCM_SOURCE_FILE__</span>
01088 <span class="preprocessor"></span><span class="preprocessor"># undef WXDLLIMPEXP_CC</span>
01089 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
01090 <span class="preprocessor"></span>
01091 <span class="preprocessor">#endif // __WX_CUSTCTRL_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Jan 24 11:39:46 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
