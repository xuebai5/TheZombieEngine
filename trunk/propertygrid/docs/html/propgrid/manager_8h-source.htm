<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: manager.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>manager.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        manager.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGridManager</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Jan-14-2005</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef _WX_PROPGRID_MANAGER_H_</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define _WX_PROPGRID_MANAGER_H_</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "manager.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">// -----------------------------------------------------------------------</span>
00020 
00021 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridManagerNameStr;
00022 
00023 <span class="comment">// -----------------------------------------------------------------------</span>
00024 
00025 <span class="comment">// This is for mirroring wxPropertyGrid methods with ease.</span>
00026 <span class="comment">// Needs to be in hear because of inlines.</span>
00027 <span class="preprocessor">#define wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(NAME,AT1) \</span>
00028 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGId id, AT1 _av1_ ) \</span>
00029 <span class="preprocessor">{ \</span>
00030 <span class="preprocessor">    wxPGProperty* p = wxPGIdToPtr(id); \</span>
00031 <span class="preprocessor">    wxPropertyGridState* pState = p-&gt;GetParentState(); \</span>
00032 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00033 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00034 <span class="preprocessor">    else pState-&gt;NAME(p,_av1_); \</span>
00035 <span class="preprocessor">} \</span>
00036 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGNameStr name, AT1 _av1_ ) \</span>
00037 <span class="preprocessor">{ \</span>
00038 <span class="preprocessor">    wxPropertyGridState* pState; \</span>
00039 <span class="preprocessor">    wxPGId id = GetPropertyByName(name,&amp;pState); \</span>
00040 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00041 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00042 <span class="preprocessor">    else pState-&gt;NAME(wxPGIdToPtr(id),_av1_); \</span>
00043 <span class="preprocessor">}</span>
00044 <span class="preprocessor"></span>
00045 <span class="keyword">class </span>wxPropertyGridPageData;
00046 
00047 <span class="preprocessor">#define wxPG_IPAM_DECL inline</span>
00048 <span class="preprocessor"></span>
00085 <span class="comment">// BM_MANAGER</span>
<a name="l00086"></a><a class="code" href="classwxPropertyGridManager.htm">00086</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridManager : <span class="keyword">public</span> wxWindow
00087 {
00088         DECLARE_CLASS(wxPropertyGridManager)
00089 
00090 <span class="keyword">public</span>:
00091 
00095     wxPropertyGridManager();
00096 
00101     wxPropertyGridManager(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00102                       <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00103                       <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00104                       <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga18">wxPGMAN_DEFAULT_STYLE</a>,
00105                       <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00106 
00108     <span class="keyword">virtual</span> ~wxPropertyGridManager();
00109 
<a name="l00127"></a><a class="code" href="classwxPropertyGridManager.htm#a3">00127</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> AddPage ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap )
00128     {
00129         <span class="keywordflow">return</span> InsertPage (-1,label,bmp);
00130     }
00131 
<a name="l00133"></a><a class="code" href="classwxPropertyGridManager.htm#a4">00133</a>     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
00134     {
00135         wxASSERT ( m_targetState );
00136         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>(label,name) );
00137     }
00138 
<a name="l00140"></a><a class="code" href="classwxPropertyGridManager.htm#a5">00140</a>     <span class="keyword">inline</span> wxPGId Append ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00141     {
00142         wxASSERT ( m_targetState );
00143         <span class="keywordflow">return</span> m_targetState-&gt;Append(property);
00144     }
00145 
00146     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
00147     {
00148         wxASSERT ( m_targetState );
00149         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxStringProperty(label,name,value) );
00150     }
00151 
00152     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
00153     {
00154         wxASSERT ( m_targetState );
00155         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxIntProperty(label,name,value) );
00156     }
00157 
00158     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
00159     {
00160         wxASSERT ( m_targetState );
00161         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxFloatProperty(label,name,value) );
00162     }
00163 
00164     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
00165     {
00166         wxASSERT ( m_targetState );
00167         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxBoolProperty(label,name,value) );
00168     }
00169 
<a name="l00171"></a><a class="code" href="classwxPropertyGridManager.htm#a10">00171</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00172     {
00173         wxASSERT ( m_targetState );
00174         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>),-1,property);
00175     }
00176 
<a name="l00178"></a><a class="code" href="classwxPropertyGridManager.htm#a11">00178</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00179     {
00180         wxASSERT ( m_targetState );
00181         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(m_targetState-&gt;GetPropertyByName(name)),-1,property);
00182     }
00183     
00184     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> );
00185 
00186     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
00187     {
00188         m_propGrid.ClearModifiedStatus();
00189     }
00190 
00191     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGId <span class="keywordtype">id</span> );
00192     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGNameStr name );
00193     
00195     <span class="keywordtype">bool</span> Collapse ( wxPGId <span class="keywordtype">id</span> );
00196     <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name );
00197 
<a name="l00199"></a><a class="code" href="classwxPropertyGridManager.htm#a18">00199</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll ()
00200     {
00201         m_targetState-&gt;ExpandAll(0);
00202     }
00203 
00207     <span class="keywordtype">void</span> Compact ( <span class="keywordtype">bool</span> compact );
00208 
00214     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00215                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00216                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00217                 <span class="keywordtype">long</span> style = wxPGMAN_DEFAULT_STYLE,
00218                 <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00219 
00221     <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> );
00222     <span class="keywordtype">void</span> Delete ( wxPGNameStr name );
00223 
<a name="l00225"></a><a class="code" href="classwxPropertyGridManager.htm#a23">00225</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
00226 
<a name="l00228"></a><a class="code" href="classwxPropertyGridManager.htm#a24">00228</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
00229 
<a name="l00233"></a><a class="code" href="classwxPropertyGridManager.htm#a25">00233</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable )
00234     {
00235         <span class="keywordtype">long</span> fl = m_windowStyle | <a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>;
00236         <span class="keywordflow">if</span> ( enable ) fl = m_windowStyle &amp; ~(<a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>);
00237         SetWindowStyleFlag(m_windowStyle);
00238         <span class="keywordflow">return</span> TRUE;
00239     }
00240 
00242     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
00243     <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE );
00244 
<a name="l00248"></a><a class="code" href="classwxPropertyGridManager.htm#a28">00248</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> )
00249     {
00250         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentState());
00251     }
00252 
<a name="l00256"></a><a class="code" href="classwxPropertyGridManager.htm#a29">00256</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name )
00257     {
00258         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate;
00259         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name,&amp;pstate);
00260         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,pstate);
00261     }
00262 
00264     <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> );
00265     <span class="keywordtype">bool</span> Expand ( wxPGNameStr name );
00266 
<a name="l00268"></a><a class="code" href="classwxPropertyGridManager.htm#a32">00268</a>     <span class="keywordtype">void</span> ExpandAll ()
00269     {
00270         m_targetState-&gt;ExpandAll(1);
00271     }
00272 
00274     <span class="comment">/*wxColour GetCategoryColour ( wxPGId id )</span>
00275 <span class="comment">    {</span>
00276 <span class="comment">        return wxPropertyGrid::GetCategoryColour(id);</span>
00277 <span class="comment">    }</span>
00278 <span class="comment">    wxColour GetCategoryColour ( wxPGNameStr name ) { return GetCategoryColour(GetPropertyByName(name)); }*/</span>
00279 
<a name="l00281"></a><a class="code" href="classwxPropertyGridManager.htm#a33">00281</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
00282     {
00283         <span class="keywordflow">return</span> GetChildrenCount( wxPGIdGen(m_propGrid.m_pState-&gt;m_properties) );
00284     }
00285 
00287     size_t GetChildrenCount ( <span class="keywordtype">int</span> page_index );
00288 
<a name="l00290"></a><a class="code" href="classwxPropertyGridManager.htm#a35">00290</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00291 <span class="keyword">    </span>{
00292         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00293         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetChildCount();
00294     }
00295 
<a name="l00297"></a><a class="code" href="classwxPropertyGridManager.htm#a36">00297</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( GetPropertyByName(name) ); }
00298 
<a name="l00300"></a><a class="code" href="classwxPropertyGridManager.htm#a37">00300</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
00301 <span class="keyword">    </span>{
00302         <span class="keywordflow">return</span> m_targetState-&gt;GetFirst();
00303     }
00304 
<a name="l00306"></a><a class="code" href="classwxPropertyGridManager.htm#a38">00306</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
00307 <span class="keyword">    </span>{
00308         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstCategory ();
00309     }
00310 
<a name="l00312"></a><a class="code" href="classwxPropertyGridManager.htm#a39">00312</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()<span class="keyword"> const</span>
00313 <span class="keyword">    </span>{
00314         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstProperty();
00315     }
00316 
<a name="l00321"></a><a class="code" href="classwxPropertyGridManager.htm#a40">00321</a>     <span class="keyword">inline</span> <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* GetGrid()
00322     {
00323         wxASSERT( m_iFlags &amp; wxPG_FL_INITIALIZED );
00324         <span class="keywordflow">return</span> &amp;m_propGrid;
00325     };
00326 
<a name="l00331"></a><a class="code" href="classwxPropertyGridManager.htm#a41">00331</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
00332     {
00333         wxASSERT ( wxPGIdIsOk(parent) );
00334         <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp; p = (<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp;)parent.GetProperty();
00335         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#a7">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
00336         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#a9">Last</a>());
00337     }
00338     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( GetPropertyByName(name) ); }
00339     
<a name="l00341"></a><a class="code" href="classwxPropertyGridManager.htm#a43">00341</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00342 <span class="keyword">    </span>{
00343         wxASSERT ( m_targetState );
00344         <span class="keywordflow">return</span> m_targetState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
00345     }
00346 
<a name="l00350"></a><a class="code" href="classwxPropertyGridManager.htm#a44">00350</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00351 <span class="keyword">    </span>{
00352         wxASSERT ( m_targetState );
00353         <span class="keywordflow">return</span> m_targetState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
00354     }
00355 
<a name="l00357"></a><a class="code" href="classwxPropertyGridManager.htm#a45">00357</a>     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> )
00358     {
00359         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(<span class="keywordtype">id</span>);
00360     }
00361     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGNameStr name )
00362     {
00363         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(GetPropertyByName(name));
00364     }
00365 
00367     <span class="keywordtype">int</span> GetPageByName ( <span class="keyword">const</span> wxChar* name ) <span class="keyword">const</span>;
00368 
00372     <span class="keywordtype">int</span> GetPageByState( <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate ) <span class="keyword">const</span>;
00373 
<a name="l00375"></a><a class="code" href="classwxPropertyGridManager.htm#a49">00375</a>     size_t GetPageCount ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrPages.GetCount(); }
00376 
00378     <span class="keyword">const</span> wxString&amp; GetPageName ( <span class="keywordtype">int</span> index ) <span class="keyword">const</span>;
00379 
<a name="l00381"></a><a class="code" href="classwxPropertyGridManager.htm#a51">00381</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00382 <span class="keyword">    </span>{
00383         <span class="keywordflow">return</span> m_targetState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
00384     }
00385 
<a name="l00387"></a><a class="code" href="classwxPropertyGridManager.htm#a52">00387</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
00388     {
00389         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
00390     }
00391     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
00392     {
00393         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(GetPropertyByName(name));
00394     }
00395 
00401     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name,
00402         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**)NULL ) <span class="keyword">const</span>;
00403 
00405     wxPGId GetPropertyByName ( wxPGNameStr name, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**) NULL ) <span class="keyword">const</span>;
00406 
<a name="l00410"></a><a class="code" href="classwxPropertyGridManager.htm#a56">00410</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00411 <span class="keyword">    </span>{
00412         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<span class="keywordtype">id</span>);
00413     }
00414     wxPGId GetPropertyCategory ( wxPGNameStr name )<span class="keyword"> const</span>
00415 <span class="keyword">    </span>{
00416         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(GetPropertyByName(name));
00417     }
00418 
<a name="l00420"></a><a class="code" href="classwxPropertyGridManager.htm#a58">00420</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00421 <span class="keyword">    </span>{
00422         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClassName();
00423     }
00424 
<a name="l00426"></a><a class="code" href="classwxPropertyGridManager.htm#a59">00426</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGNameStr name )<span class="keyword"> const</span>
00427 <span class="keyword">    </span>{
00428         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByNameWithAssert(name))-&gt;GetClassName();
00429     }
00430 
<a name="l00432"></a><a class="code" href="classwxPropertyGridManager.htm#a60">00432</a>     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00433 <span class="keyword">    </span>{
00434         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<span class="keywordtype">id</span>);
00435     }
00436     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
00437 <span class="keyword">    </span>{
00438         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(GetPropertyByName(name));
00439     }
00440 
<a name="l00442"></a><a class="code" href="classwxPropertyGridManager.htm#a62">00442</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00443 <span class="keyword">    </span>{
00444         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00445         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetHelpString();
00446     }
00447 
<a name="l00449"></a><a class="code" href="classwxPropertyGridManager.htm#a63">00449</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGNameStr name )<span class="keyword"> const</span>
00450 <span class="keyword">    </span>{
00451         <span class="keywordflow">return</span> GetPropertyHelpString(GetPropertyByNameWithAssert(name));
00452     }
00453 
<a name="l00455"></a><a class="code" href="classwxPropertyGridManager.htm#a64">00455</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGId <span class="keywordtype">id</span> )
00456     {
00457         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00458         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetIndexInParent();
00459     }
00460 
<a name="l00462"></a><a class="code" href="classwxPropertyGridManager.htm#a65">00462</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGNameStr name )
00463     {
00464         <span class="keywordflow">return</span> GetPropertyIndex ( GetPropertyByName(name) );
00465     }
00466 
<a name="l00468"></a><a class="code" href="classwxPropertyGridManager.htm#a66">00468</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGId <span class="keywordtype">id</span> )
00469     {
00470         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00471         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetLabel();
00472     }
00473     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGNameStr name )
00474     {
00475         <span class="keywordflow">return</span> GetPropertyLabel ( GetPropertyByName(name) );
00476     }
00477 
<a name="l00479"></a><a class="code" href="classwxPropertyGridManager.htm#a68">00479</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyName ( wxPGId <span class="keywordtype">id</span> )
00480     {
00481         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00482         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetName();
00483     }
00484 
<a name="l00486"></a><a class="code" href="classwxPropertyGridManager.htm#a69">00486</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGId <span class="keywordtype">id</span> )
00487     {
00488         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00489         <span class="keywordflow">return</span> wxPGIdGen(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParent());
00490     }
00491 
<a name="l00493"></a><a class="code" href="classwxPropertyGridManager.htm#a70">00493</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGNameStr name )
00494     {
00495         <span class="keywordflow">return</span> GetPropertyParent ( GetPropertyByName(name) );
00496     }
00497 
<a name="l00499"></a><a class="code" href="classwxPropertyGridManager.htm#a71">00499</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority ( wxPGId <span class="keywordtype">id</span> )
00500     {
00501         <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
00502         <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#a28">IsFlagSet</a>(<a class="code" href="group__propflags.htm#ga3">wxPG_PROP_HIDEABLE</a>) )
00503             <span class="keywordflow">return</span> wxPG_LOW;
00504         <span class="keywordflow">return</span> wxPG_HIGH;
00505     }
00506 
00507 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00508 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
00509 #<span class="keywordflow">else</span>    
00510     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
00511 #endif
00512     {
00513         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00514         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
00515     }
00516 
00517 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00518 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGNameStr name )
00519 #<span class="keywordflow">else</span>    
00520     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGNameStr name )
00521 #endif
00522     {
00523         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
00524         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00525         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
00526     }
00527 
00528     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00529 <span class="keyword">    </span>{
00530         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsString ( <span class="keywordtype">id</span> );
00531     }
00532     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00533 <span class="keyword">    </span>{
00534         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsLong ( <span class="keywordtype">id</span> );
00535     }
00536     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00537 <span class="keyword">    </span>{
00538         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsInt ( <span class="keywordtype">id</span> );
00539     }
00540     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00541 <span class="keyword">    </span>{
00542         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsBool ( <span class="keywordtype">id</span> );
00543     }
00544     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00545 <span class="keyword">    </span>{
00546         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsDouble ( <span class="keywordtype">id</span> );
00547     }
00548     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00549 <span class="keyword">    </span>{
00550         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsArrayString ( <span class="keywordtype">id</span> );
00551     }
00552     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00553 <span class="keyword">    </span>{
00554         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsWxObjectPtr ( <span class="keywordtype">id</span> );
00555     }
00556     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00557 <span class="keyword">    </span>{
00558         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsPoint ( <span class="keywordtype">id</span> );
00559     }
00560     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00561 <span class="keyword">    </span>{
00562         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsSize ( <span class="keywordtype">id</span> );
00563     }
00564     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00565 <span class="keyword">    </span>{
00566         <span class="keywordflow">return</span> wxPropertyGrid::GetPropertyValueAsArrayInt ( <span class="keywordtype">id</span> );
00567     }
00568 
00569     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGNameStr name )<span class="keyword"> const</span>
00570 <span class="keyword">    </span>{
00571         <span class="keywordflow">return</span> GetPropertyValueAsString ( GetPropertyByName(name) );
00572     }
00573     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGNameStr name )<span class="keyword"> const</span>
00574 <span class="keyword">    </span>{
00575         <span class="keywordflow">return</span> GetPropertyValueAsLong ( GetPropertyByName(name) );
00576     }
00577     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGNameStr name )<span class="keyword"> const</span>
00578 <span class="keyword">    </span>{
00579         <span class="keywordflow">return</span> GetPropertyValueAsInt ( GetPropertyByName(name) );
00580     }
00581     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGNameStr name )<span class="keyword"> const</span>
00582 <span class="keyword">    </span>{
00583         <span class="keywordflow">return</span> GetPropertyValueAsBool ( GetPropertyByName(name) );
00584     }
00585     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGNameStr name )<span class="keyword"> const</span>
00586 <span class="keyword">    </span>{
00587         <span class="keywordflow">return</span> GetPropertyValueAsDouble ( GetPropertyByName(name) );
00588     }
00589     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGNameStr name )<span class="keyword"> const</span>
00590 <span class="keyword">    </span>{
00591         <span class="keywordflow">return</span> GetPropertyValueAsArrayString ( GetPropertyByName(name) );
00592     }
00593     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGNameStr name )<span class="keyword"> const</span>
00594 <span class="keyword">    </span>{
00595         <span class="keywordflow">return</span> GetPropertyValueAsWxObjectPtr ( GetPropertyByName(name) );
00596     }
00597     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGNameStr name )<span class="keyword"> const</span>
00598 <span class="keyword">    </span>{
00599         <span class="keywordflow">return</span> GetPropertyValueAsPoint ( GetPropertyByName(name) );
00600     }
00601     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGNameStr name )<span class="keyword"> const</span>
00602 <span class="keyword">    </span>{
00603         <span class="keywordflow">return</span> GetPropertyValueAsSize ( GetPropertyByName(name) );
00604     }
00605     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGNameStr name )<span class="keyword"> const</span>
00606 <span class="keyword">    </span>{
00607         <span class="keywordflow">return</span> GetPropertyValueAsArrayInt ( GetPropertyByName(name) );
00608     }
00609 
<a name="l00619"></a><a class="code" href="classwxPropertyGridManager.htm#a94">00619</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
00620         wxPGId baseparent = wxPGIdGen((<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)NULL), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
00621 <span class="keyword">    </span>{
00622         <span class="keywordflow">return</span> m_targetState-&gt;GetPropertyValues(listname,baseparent,flags);
00623     }
00624 
<a name="l00628"></a><a class="code" href="classwxPropertyGridManager.htm#a95">00628</a>     <span class="keyword">const</span> <a class="code" href="classwxPGValueType.htm">wxPGValueType</a>* GetPropertyValueType ( wxPGId <span class="keywordtype">id</span> )
00629     {
00630         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00631         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType();
00632     }
00633     <span class="keyword">const</span> <a class="code" href="classwxPGValueType.htm">wxPGValueType</a>* GetPropertyValueType ( wxPGNameStr name )
00634     {
00635         <span class="keywordflow">return</span> wxPGIdToPtr( GetPropertyByNameWithAssert(name) )-&gt;GetValueType();
00636     }
00637 
<a name="l00641"></a><a class="code" href="classwxPropertyGridManager.htm#a97">00641</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_targetState-&gt;m_properties); }
00642 
<a name="l00644"></a><a class="code" href="classwxPropertyGridManager.htm#a98">00644</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelectedPage ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00645 
<a name="l00647"></a><a class="code" href="classwxPropertyGridManager.htm#a99">00647</a>     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const</span>
00648 <span class="keyword">    </span>{
00649         <span class="keywordflow">return</span> m_propGrid.GetSelection();
00650     }
00651 
<a name="l00653"></a><a class="code" href="classwxPropertyGridManager.htm#a100">00653</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00654 
<a name="l00657"></a><a class="code" href="classwxPropertyGridManager.htm#a101">00657</a>     <span class="keyword">inline</span> wxToolBar* GetToolBar()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pToolbar; }
00658 
00659     <span class="keyword">inline</span> <span class="keywordtype">void</span> InitAllTypeHandlers ()
00660     {
00661         <a class="code" href="classwxPropertyGrid.htm#e12">wxPropertyGrid::InitAllTypeHandlers</a>();
00662     }
00663 
<a name="l00665"></a><a class="code" href="classwxPropertyGridManager.htm#a103">00665</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00666     {
00667         wxASSERT ( m_targetState );
00668         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>),index,property);
00669         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00670             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00671         <span class="keywordflow">return</span> res_id;
00672     }
00673 
<a name="l00675"></a><a class="code" href="classwxPropertyGridManager.htm#a104">00675</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00676     {
00677         wxASSERT ( m_targetState );
00678         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(m_targetState-&gt;GetPropertyByName(name)),index,property);
00679         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00680             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00681         <span class="keywordflow">return</span> res_id;
00682     }
00683 
00699     <span class="keywordtype">int</span> InsertPage ( <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap );
00700 
00702     <span class="keywordtype">bool</span> IsAnyModified () <span class="keyword">const</span>;
00703 
<a name="l00705"></a><a class="code" href="classwxPropertyGridManager.htm#a107">00705</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_propGrid.m_frozen&gt;0)?TRUE:FALSE; }
00706 
00708     <span class="keywordtype">bool</span> IsPageModified ( size_t index ) <span class="keyword">const</span>;
00709 
<a name="l00711"></a><a class="code" href="classwxPropertyGridManager.htm#a109">00711</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00712 <span class="keyword">    </span>{
00713         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
00714     }
00715     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyCategory(GetPropertyByName(name)); }
00716 
<a name="l00718"></a><a class="code" href="classwxPropertyGridManager.htm#a111">00718</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00719 <span class="keyword">    </span>{
00720         <span class="keywordflow">return</span> (!(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;IsFlagSet(<a class="code" href="group__propflags.htm#ga1">wxPG_PROP_DISABLED</a>)))?TRUE:FALSE;
00721     }
<a name="l00723"></a><a class="code" href="classwxPropertyGridManager.htm#a112">00723</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyEnabled(GetPropertyByName(name)); }
00724 
<a name="l00728"></a><a class="code" href="classwxPropertyGridManager.htm#a113">00728</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classwxPropertyGrid.htm#e13">wxPropertyGrid::IsPropertyExpanded</a>(<span class="keywordtype">id</span>); }
00729     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGNameStr name ) { <span class="keywordflow">return</span> <a class="code" href="classwxPropertyGrid.htm#e13">wxPropertyGrid::IsPropertyExpanded</a>(GetPropertyByName(name)); }
00730 
<a name="l00732"></a><a class="code" href="classwxPropertyGridManager.htm#a115">00732</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestr )
00733     {
00734         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00735         <span class="keywordflow">return</span> (wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetTypeName(),typestr) == 0);
00736     }
00737 
<a name="l00739"></a><a class="code" href="classwxPropertyGridManager.htm#a116">00739</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> <a class="code" href="classwxPGValueType.htm">wxPGValueType</a>* valuetype )
00740     {
00741         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00742         <span class="keywordflow">return</span> ( wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType() == valuetype );
00743     }
00744 
<a name="l00746"></a><a class="code" href="classwxPropertyGridManager.htm#a117">00746</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxClassInfo* classinfo )
00747     {
00748         <span class="keywordflow">return</span> IsPropertyValueType(<span class="keywordtype">id</span>,classinfo-&gt;GetClassName());
00749     }
00750 
<a name="l00752"></a><a class="code" href="classwxPropertyGridManager.htm#a118">00752</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxChar* typestr )
00753     {
00754         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),typestr);
00755     }
00756 
<a name="l00759"></a><a class="code" href="classwxPropertyGridManager.htm#a119">00759</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00760 <span class="keyword">    </span>{
00761         <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
00762         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
00763         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#a29">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga6">wxPG_PROP_UNSPECIFIED</a>) ? TRUE : FALSE );
00764     }
00765     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyValueUnspecified(GetPropertyByName(name)); }
00766 
00768     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
00769     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE );
00770 
00771     <span class="keyword">inline</span> <span class="keywordtype">void</span> Refresh ()
00772     {
00773         m_propGrid.Refresh(FALSE);
00774         wxWindow::Refresh();
00775     }
00776 
00778     <span class="keywordtype">void</span> SelectPage ( <span class="keywordtype">int</span> index );
00779 
<a name="l00781"></a><a class="code" href="classwxPropertyGridManager.htm#a125">00781</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectPage ( <span class="keyword">const</span> wxChar* name )
00782     {
00783         SelectPage ( GetPageByName(name) );
00784     }
00785 
00787     <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE );
00788     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
00789     {
00790         SelectProperty(GetPropertyByName(name),focus);
00791     }
00792 
<a name="l00797"></a><a class="code" href="classwxPropertyGridManager.htm#e0">00797</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice )
00798     {
00799         <a class="code" href="classwxPropertyGrid.htm#e16">wxPropertyGrid::SetBoolChoices</a>(true_choice,false_choice);
00800     }
00801 
00805     <span class="comment">/*inline void SetBoolEditor ( wxPGEditor* editor ) const</span>
00806 <span class="comment">    {</span>
00807 <span class="comment">        wxPropertyGrid::SetBoolEditor(editor);</span>
00808 <span class="comment">    }*/</span>
00809 
<a name="l00812"></a><a class="code" href="classwxPropertyGridManager.htm#a128">00812</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
00813     {
00814         <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>* pc = (<a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>);
00815 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00816 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#a14">GetParentingType</a>() &gt; 0 );
00817 <span class="preprocessor">#endif</span>
00818 <span class="preprocessor"></span>        m_targetState-&gt;m_currentCategory = pc;
00819     }
00820 
<a name="l00823"></a><a class="code" href="classwxPropertyGridManager.htm#a129">00823</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name )
00824     {
00825         SetCurrentCategory(GetPropertyByName(name));
00826     }
00827 
00829     <span class="keywordtype">void</span> SetDescBoxHeight ( <span class="keywordtype">int</span> ht, <span class="keywordtype">bool</span> refresh = TRUE );
00830 
<a name="l00835"></a><a class="code" href="classwxPropertyGridManager.htm#a131">00835</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
00836     {
00837         m_propGrid.SetDefaultPriority(priority);
00838     }
00839 
<a name="l00841"></a><a class="code" href="classwxPropertyGridManager.htm#a132">00841</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
00842     {
00843         m_propGrid.ResetDefaultPriority();
00844     }
00845 
<a name="l00854"></a><a class="code" href="classwxPropertyGridManager.htm#a133">00854</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0 )
00855     {
00856         wxPropertyGridState::SetPropertyAttribute(wxPGIdToPtr(<span class="keywordtype">id</span>),attrid,value,arg_flags);
00857     }
00858     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGNameStr name, <span class="keywordtype">int</span> attrid, wxPGVariant value, <span class="keywordtype">long</span> arg_flags = 0  )
00859     {
00860         SetPropertyAttribute(GetPropertyByName(name),attrid,value,arg_flags);
00861     }
00862 
<a name="l00866"></a><a class="code" href="classwxPropertyGridManager.htm#a135">00866</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col )
00867     {
00868         m_propGrid.SetPropertyColour ( <span class="keywordtype">id</span>, col );
00869     }
00870     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
00871     {
00872         m_propGrid.SetPropertyColour ( GetPropertyByName(name), col );
00873     }
00874 
<a name="l00876"></a><a class="code" href="classwxPropertyGridManager.htm#a137">00876</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
00877     {
00878         m_propGrid.SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
00879     }
00880     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
00881     {
00882         m_propGrid.SetColourIndex ( wxPGIdToPtr(GetPropertyByName(name)), 0 );
00883     }
00884 
<a name="l00886"></a><a class="code" href="classwxPropertyGridManager.htm#a139">00886</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; help_string )
00887     {
00888         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00889         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetHelpString(help_string);
00890     }
00891 
<a name="l00893"></a><a class="code" href="classwxPropertyGridManager.htm#a140">00893</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; help_string )
00894     {
00895         SetPropertyHelpString(GetPropertyByName(name),help_string);
00896     }
00897 
00901     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
00902     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority );
00903 
00904     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value );
00905     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value );
00906     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value );
00907     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value );
00908     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
00909     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value );
00910     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
00911     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value );
00912     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
00913     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value );
00914     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value );
00915     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value );
00916     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value );
00917     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value );
00918     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value );
00919     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value );
00920     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value );
00921     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value );
00922     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxPoint&amp;)
00923     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxSize&amp;)
00924     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxArrayInt&amp;)
00925 
00926     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
00927     {
00928         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
00929     }
00930 
00931     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
00932     {
00933         SetPropertyValue(name,&amp;value);
00934     }
00935 
00936     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
00937     {
00938         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
00939     }
00940     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
00941     {
00942         SetPropertyValue(name,wxString(value));
00943     }
00944 
00949     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
00950     {
00951         m_targetState-&gt;SetPropertyValues(list,default_category);
00952     }
00953 
00954     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
00955     {
00956         SetPropertyValues (list.GetList(),default_category);
00957     }
00958     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00959     {
00960         SetPropertyValues (list,GetPropertyByName(default_category));
00961     }
00962     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00963     {
00964         SetPropertyValues (list.GetList(),GetPropertyByName(default_category));
00965     }
00966 
00970     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
00971     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGNameStr name );
00972 
00974     <span class="comment">//inline void SetSelection ( int index ) { SelectPage(index); }</span>
00975 
<a name="l00977"></a><a class="code" href="classwxPropertyGridManager.htm#a164">00977</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetStringSelection ( <span class="keyword">const</span> wxChar* name )
00978     {
00979         SelectPage ( GetPageByName(name) );
00980     }
00981 
00986     <span class="keywordtype">void</span> SetTargetPage ( <span class="keywordtype">int</span> index );
00987 
<a name="l00992"></a><a class="code" href="classwxPropertyGridManager.htm#a166">00992</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetTargetPage ( <span class="keyword">const</span> wxChar* name )
00993     {
00994         SetTargetPage ( GetPageByName(name) );
00995     }
00996 
<a name="l00998"></a><a class="code" href="classwxPropertyGridManager.htm#a167">00998</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ()
00999     {
01000         m_propGrid.Sort(wxPGIdGen(m_targetState-&gt;m_properties));
01001     }
01002 
<a name="l01005"></a><a class="code" href="classwxPropertyGridManager.htm#a168">01005</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> )
01006     {
01007         m_propGrid.Sort(<span class="keywordtype">id</span>);
01008     }
01009 
<a name="l01012"></a><a class="code" href="classwxPropertyGridManager.htm#a169">01012</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
01013     {
01014         m_propGrid.Sort ( GetPropertyByName(name) );
01015     }
01016 
<a name="l01019"></a><a class="code" href="classwxPropertyGridManager.htm#a170">01019</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
01020     {
01021         <span class="keywordtype">int</span> priority = wxPG_LOW;
01022         <span class="keywordflow">if</span> ( GetPropertyPriority(<span class="keywordtype">id</span>) == wxPG_LOW )
01023             priority = wxPG_HIGH;
01024         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
01025     }
01026 
<a name="l01029"></a><a class="code" href="classwxPropertyGridManager.htm#a171">01029</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
01030     {
01031         TogglePropertyPriority(GetPropertyByName(name));
01032     }
01033 
<a name="l01035"></a><a class="code" href="classwxPropertyGridManager.htm#a172">01035</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearSelection ()
01036     {
01037         m_propGrid.ClearSelection ();
01038     }
01039 
01040 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
01041 <span class="preprocessor"></span>
01042     <span class="comment">//</span>
01043     <span class="comment">// Overridden functions - no documentation required.</span>
01044     <span class="comment">//</span>
01045 
01046     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
01047     <span class="keywordtype">void</span> SetId( wxWindowID winid );
01048 
01049     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
01050     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
01051     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
01052     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
01053     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag ( <span class="keywordtype">long</span> style );
01054 
01055     <span class="comment">//</span>
01056     <span class="comment">// Event handlers</span>
01057     <span class="comment">//</span>
01058     <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
01059     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
01060     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
01061     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
01062 
01063     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent &amp;event );
01064 
01065     <span class="keywordtype">void</span> OnToolbarClick ( wxCommandEvent &amp;event );
01066     <span class="keywordtype">void</span> OnResize ( wxSizeEvent&amp; event );
01067     <span class="keywordtype">void</span> OnCompactorClick ( wxCommandEvent&amp; event );
01068     <span class="keywordtype">void</span> OnPropertyGridSelect ( <a class="code" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>&amp; event );
01069 
01070 <span class="keyword">protected</span>:
01071 
01072     <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>  m_propGrid;
01073 
01074     wxArrayPtrVoid  m_arrPages;
01075 
01076 <span class="preprocessor">#if wxUSE_TOOLBAR</span>
01077 <span class="preprocessor"></span>    wxToolBar*      m_pToolbar;
01078     <span class="comment">//wxBitmap*       m_pBmpCatMode;</span>
01079     <span class="comment">//wxBitmap*       m_pBmpNonCatMode;</span>
01080 <span class="preprocessor">#endif</span>
01081 <span class="preprocessor"></span>    wxStaticText*   m_pTxtHelpCaption;
01082     wxStaticText*   m_pTxtHelpContent;
01083     wxButton*       m_pButCompactor;
01084 
01085     <span class="comment">//wxWindow*       m_splitterPrevDrawnWin;</span>
01086 
01087     <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>*    m_targetState;
01088 
01089     <span class="keywordtype">long</span>            m_iFlags;
01090 
01091     <span class="comment">// Selected page index.</span>
01092     <span class="keywordtype">int</span>             m_selPage;
01093 
01094     <span class="keywordtype">int</span>             m_width;
01095 
01096     <span class="keywordtype">int</span>             m_height;
01097 
01098     <span class="keywordtype">int</span>             m_extraHeight;
01099 
01100     <span class="keywordtype">int</span>             m_splitterY;
01101 
01102     <span class="keywordtype">int</span>             m_splitterHeight;
01103 
01104     <span class="keywordtype">int</span>             m_nextTbInd;
01105 
01106     <span class="keywordtype">int</span>             m_dragOffset;
01107 
01108     wxCursor        m_cursorSizeNS;
01109 
01110     <span class="keywordtype">int</span>             m_nextDescBoxSize;
01111 
01112     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_dragStatus;
01113 
01114     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_onSplitter;
01115 
01116     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* parent_state );
01117 
01118     <span class="keyword">inline</span> wxPGId GetPropertyByNameWithAssert ( wxPGNameStr name )<span class="keyword"> const</span>
01119 <span class="keyword">    </span>{
01120         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
01121         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
01122         <span class="keywordflow">return</span> <span class="keywordtype">id</span>;
01123     }
01124 
01125     <span class="comment">// Sets some members to defaults.</span>
01126         <span class="keywordtype">void</span> Init1();
01127 
01128     <span class="comment">// Initializes some members.</span>
01129         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
01130 
01134     <span class="keywordtype">void</span> RecalculatePositions ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
01135 
01137     <span class="keywordtype">void</span> RecreateControls ();
01138 
01139     <span class="keywordtype">void</span> RefreshHelpBox ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height );
01140 
01141     <span class="keywordtype">void</span> RepaintSplitter ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height, <span class="keywordtype">bool</span> desc_too );
01142 
01143     <span class="keywordtype">void</span> SetDescribedProperty ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
01144 
01145     <span class="keyword">inline</span> wxPropertyGridPageData* GetPage ( size_t ind )<span class="keyword"> const</span>
01146 <span class="keyword">    </span>{
01147         <span class="keywordflow">return</span> (wxPropertyGridPageData*)m_arrPages.Item(ind);
01148     }
01149 
01150 <span class="preprocessor">#endif</span>
01151 <span class="preprocessor"></span>
01152 <span class="keyword">private</span>:
01153     DECLARE_EVENT_TABLE()
01154 };
01155 
01156 <span class="comment">// -----------------------------------------------------------------------</span>
01157 
01158 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
01159 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IPAM_DECL</span>
01160 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IMPLEMENT_PGMAN_METHOD_NORET1</span>
01161 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
01162 <span class="preprocessor"></span>
01163 <span class="comment">// -----------------------------------------------------------------------</span>
01164 
01165 <span class="preprocessor">#endif // _WX_PROPGRID_MANAGER_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Jan 24 11:39:47 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
