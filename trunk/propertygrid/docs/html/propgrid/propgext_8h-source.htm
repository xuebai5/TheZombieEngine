<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propgext.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propgext.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propgext.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid (v0.9.9) Extra Header</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Nov-23-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_PROPGEXT_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_PROPGEXT_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="comment">// FIXME: Should this be here?</span>
00016 <span class="comment">//if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00017 <span class="comment">//    #pragma interface "propertygrid.cpp"</span>
00018 <span class="comment">//#endif</span>
00019 
00020 <span class="comment">// -----------------------------------------------------------------------</span>
00021 
00022 <span class="comment">//#if wxPG_USE_CUSTOM_CONTROLS</span>
00023 <span class="comment">//# include "wx/propertygrid/custctrl.h"</span>
00024 <span class="comment">//#endif</span>
00025 
00026 <span class="comment">// -----------------------------------------------------------------------</span>
00027 
00028 <span class="comment">// wxWidgets &lt; 2.5.3 compatibility.</span>
00029 <span class="comment">// TODO: After officially included in library, remove this section.</span>
00030 <span class="preprocessor">#if wxMINOR_VERSION &lt; 5 || ( wxMINOR_VERSION == 5 &amp;&amp; wxRELEASE_NUMBER &lt; 3 )</span>
00031 <span class="preprocessor"></span><span class="preprocessor"># if wxUSE_UNICODE</span>
00032 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;string.h&gt;</span> <span class="comment">//for mem funcs</span>
00033     
00034     <span class="keyword">inline</span> wxChar* wxMemcpy(wxChar* szOut, <span class="keyword">const</span> wxChar* szIn, size_t len)
00035     {
00036         <span class="keywordflow">return</span> (wxChar*) memcpy(szOut, szIn, len * <span class="keyword">sizeof</span>(wxChar));
00037     }
00038 <span class="preprocessor"># else</span>
00039 <span class="preprocessor"></span><span class="preprocessor">    #define wxMemcpy memcpy</span>
00040 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00041 <span class="preprocessor"></span><span class="preprocessor"># ifndef wxFIXED_MINSIZE</span>
00042 <span class="preprocessor"></span><span class="preprocessor">#  define wxFIXED_MINSIZE    0</span>
00043 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00044 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00045 <span class="preprocessor"></span>
00046 <span class="preprocessor">#define wxPG_EMPTY_MACRO</span>
00047 <span class="preprocessor"></span>
00048 <span class="comment">// Define native text macro</span>
00049 <span class="preprocessor">#if wxUSE_INTL</span>
00050 <span class="preprocessor"></span><span class="preprocessor"> #include &lt;wx/intl.h&gt;</span>
00051 <span class="preprocessor"> #define wx_NT _</span>
00052 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00053 <span class="preprocessor"></span><span class="preprocessor"> #define wx_NT wxT</span>
00054 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00055 <span class="preprocessor"></span>
00056 <span class="comment">// -----------------------------------------------------------------------</span>
00057 <span class="comment">// wxPGEditor class.</span>
00058 
00059 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGEditor
00060 {
00061 <span class="keyword">public</span>:
00062 
00064     <span class="keyword">virtual</span> ~wxPGEditor() = 0;
00065 
00067     <span class="keyword">virtual</span> wxPGCtrlClass* CreateControls ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
00068         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary ) <span class="keyword">const</span> = 0;
00069 
00071     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetControlValue ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00072 
00078     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawValue ( wxDC&amp; dc, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, <span class="keyword">const</span> wxRect&amp; rect ) <span class="keyword">const</span>;
00079 
00083     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnEvent ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
00084         wxPGCtrlClass* wnd_primary, wxEvent&amp; event ) <span class="keyword">const</span> = 0;
00085 
00089     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CopyValueFromControl ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00090 
00092     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueToUnspecified ( wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00093 
00094 <span class="keyword">protected</span>:
00095 };
00096 
00097 <span class="keyword">inline</span> <span class="keywordtype">void</span> wxPGProperty::UpdateControlValue ( wxPGCtrlClass* primary )
00098 {
00099     wxASSERT ( primary );
00100     <a class="code" href="classwxPGProperty.htm#a13">GetEditorClass</a>()-&gt;SetControlValue(<span class="keyword">this</span>,primary);
00101 }
00102 
00103 <span class="preprocessor">#define wxPG_IMPLEMENT_EDITOR_CLASS_SIMPLE(EDITOR,CLASSNAME,PARENTCLASS) \</span>
00104 <span class="preprocessor">wxPGEditor* wxPGEditor_##EDITOR = (wxPGEditor*) NULL; \</span>
00105 <span class="preprocessor">wxPGEditor* wxPGConstruct##EDITOR##EditorClass() \</span>
00106 <span class="preprocessor">{ \</span>
00107 <span class="preprocessor">    wxASSERT ( !wxPGEditor_##EDITOR ); \</span>
00108 <span class="preprocessor">    return new CLASSNAME(); \</span>
00109 <span class="preprocessor">}</span>
00110 <span class="preprocessor"></span>
00111 <span class="preprocessor">#define wxPG_IMPLEMENT_EDITOR_CLASS(EDITOR,CLASSNAME,PARENTCLASS) \</span>
00112 <span class="preprocessor">class CLASSNAME : public PARENTCLASS \</span>
00113 <span class="preprocessor">{ \</span>
00114 <span class="preprocessor">public: \</span>
00115 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00116 <span class="preprocessor">    virtual wxPGCtrlClass* CreateControls ( wxPropertyGrid* propgrid, wxPGProperty* property, \</span>
00117 <span class="preprocessor">        const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** psecondary ) const; \</span>
00118 <span class="preprocessor">    virtual void SetControlValue ( wxPGProperty* property, wxPGCtrlClass* ctrl ) const; \</span>
00119 <span class="preprocessor">    virtual bool OnEvent ( wxPropertyGrid* propgrid, wxPGProperty* property, \</span>
00120 <span class="preprocessor">        wxPGCtrlClass* wnd_primary, wxEvent&amp; event ) const; \</span>
00121 <span class="preprocessor">    virtual bool CopyValueFromControl ( wxPGProperty* property, wxPGCtrlClass* ctrl ) const; \</span>
00122 <span class="preprocessor">    virtual void SetValueToUnspecified ( wxPGCtrlClass* ctrl ) const; \</span>
00123 <span class="preprocessor">}; \</span>
00124 <span class="preprocessor">wxPG_IMPLEMENT_EDITOR_CLASS_SIMPLE(EDITOR,CLASSNAME,PARENTCLASS)</span>
00125 <span class="preprocessor"></span>
00126 <span class="comment">// -----------------------------------------------------------------------</span>
00127 <span class="comment">// Variant setter macros.</span>
00128 
00129 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00130 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValue(VALUE) \</span>
00131 <span class="preprocessor">    ((wxVariant&amp;)*this) = VALUE</span>
00132 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantWxObjectValue() \</span>
00133 <span class="preprocessor">    ((wxVariant&amp;)*this) = wxVariant((wxObject*)GetValue().GetRawPtr(),m_name);</span>
00134 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValueVoidPtr() \</span>
00135 <span class="preprocessor">    ((wxVariant&amp;)*this) = wxPGVariantToVoidPtr(GetValue())</span>
00136 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00137 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValue(VALUE)            if ( 0 ) { }</span>
00138 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantWxObjectValue()         if ( 0 ) { }</span>
00139 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValueVoidPtr()          if ( 0 ) { }</span>
00140 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00141 <span class="preprocessor"></span>
00142 <span class="comment">// -----------------------------------------------------------------------</span>
00143 <span class="comment">// Value type registeration macros</span>
00144 
00145 <span class="preprocessor">#define wxPGRegisterValueType(TYPENAME) \</span>
00146 <span class="preprocessor">    if ( wxPGValueType_##TYPENAME == (wxPGValueType*) NULL ) \</span>
00147 <span class="preprocessor">    { \</span>
00148 <span class="preprocessor">        wxPGValueType_##TYPENAME = wxPropertyGrid::RegisterValueType( new wxPGValueType##TYPENAME##Class ); \</span>
00149 <span class="preprocessor">    }</span>
00150 <span class="preprocessor"></span>
00151 <span class="comment">// Use this in RegisterDefaultValues.</span>
00152 <span class="preprocessor">#define wxPGRegisterDefaultValueType(TYPENAME) \</span>
00153 <span class="preprocessor">    if ( wxPGValueType_##TYPENAME == (wxPGValueType*) NULL ) \</span>
00154 <span class="preprocessor">    { \</span>
00155 <span class="preprocessor">        wxPGValueType_##TYPENAME = wxPropertyGrid::RegisterValueType( new wxPGValueType##TYPENAME##Class, TRUE ); \</span>
00156 <span class="preprocessor">    }</span>
00157 <span class="preprocessor"></span>
00158 <span class="preprocessor">#define wxPG_INIT_REQUIRED_TYPE(T) \</span>
00159 <span class="preprocessor">    wxPGRegisterValueType(T)</span>
00160 <span class="preprocessor"></span>
00161 <span class="comment">// -----------------------------------------------------------------------</span>
00162 <span class="comment">// Editor class registeration macros</span>
00163 
00164 <span class="preprocessor">#define wxPGRegisterEditorClass(EDITOR) \</span>
00165 <span class="preprocessor">    if ( wxPGEditor_##EDITOR == (wxPGEditor*) NULL ) \</span>
00166 <span class="preprocessor">    { \</span>
00167 <span class="preprocessor">        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( wxPGConstruct##EDITOR##EditorClass() ); \</span>
00168 <span class="preprocessor">    }</span>
00169 <span class="preprocessor"></span>
00170 <span class="comment">// Use this in RegisterDefaultEditors.</span>
00171 <span class="preprocessor">#define wxPGRegisterDefaultEditorClass(EDITOR) \</span>
00172 <span class="preprocessor">if ( wxPGEditor_##EDITOR == (wxPGEditor*) NULL ) \</span>
00173 <span class="preprocessor">    { \</span>
00174 <span class="preprocessor">        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( wxPGConstruct##EDITOR##EditorClass(), TRUE ); \</span>
00175 <span class="preprocessor">    }</span>
00176 <span class="preprocessor"></span>
00177 <span class="preprocessor">#define wxPG_INIT_REQUIRED_EDITOR(T) \</span>
00178 <span class="preprocessor">    wxPGRegisterEditorClass(T)</span>
00179 <span class="preprocessor"></span>
00180 <span class="comment">// -----------------------------------------------------------------------</span>
00181 
00182 <span class="comment">// Derived property class is one that inherits from an existing working property</span>
00183 <span class="comment">// class, such as wxStringProperty or wxEnumProperty. Assumes same value and</span>
00184 <span class="comment">// editor type.</span>
00185 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00186 <span class="preprocessor"></span>
00187 <span class="preprocessor">#define IMPLEMENT_DERIVED_PROPERTY_CLASS(CLASSNAME,UPCLASS) \</span>
00188 <span class="preprocessor">_IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS)</span>
00189 <span class="preprocessor"></span>
00190 <span class="preprocessor">#else</span>
00191 <span class="preprocessor"></span>
00192 <span class="preprocessor">#define IMPLEMENT_DERIVED_PROPERTY_CLASS(CLASSNAME,UPCLASS) \</span>
00193 <span class="preprocessor">_IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS) \</span>
00194 <span class="preprocessor">const wxChar* CLASSNAME::GetClassName() const { return wxT(#CLASSNAME); }</span>
00195 <span class="preprocessor"></span>
00196 <span class="preprocessor">#endif</span>
00197 <span class="preprocessor"></span>
00198 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
00199 <span class="preprocessor"></span>
00200 <span class="preprocessor">#define wxPG_IMPLEMENT_SUBTYPE(VALUETYPE,CVALUETYPE,DEFPROPERTYCLASS,TYPESTRING,GETTER,DEFVAL) \</span>
00201 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00202 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00203 <span class="preprocessor">{ \</span>
00204 <span class="preprocessor">public: \</span>
00205 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return TYPESTRING; } \</span>
00206 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(CVALUETYPE); } \</span>
00207 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(m_default); } \</span>
00208 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00209 <span class="preprocessor">    { return wxVariant ( value.GETTER(), name ); } \</span>
00210 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00211 <span class="preprocessor">    { \</span>
00212 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00213 <span class="preprocessor">            wxT("GenerateProperty: wxVariant type mismatch.") ); \</span>
00214 <span class="preprocessor">        return new DEFPROPERTYCLASS(label,name,value.GETTER()); \</span>
00215 <span class="preprocessor">    } \</span>
00216 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00217 <span class="preprocessor">    { \</span>
00218 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00219 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00220 <span class="preprocessor">        property-&gt;DoSetValue(value.GETTER()); \</span>
00221 <span class="preprocessor">    } \</span>
00222 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class(); \</span>
00223 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class(); \</span>
00224 <span class="preprocessor">protected: \</span>
00225 <span class="preprocessor">    CVALUETYPE m_default; \</span>
00226 <span class="preprocessor">}; \</span>
00227 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00228 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::~wxPGValueType##VALUETYPE##Class() { }</span>
00229 <span class="preprocessor"></span>
00230 <span class="preprocessor">#else</span>
00231 <span class="preprocessor"></span>
00232 <span class="preprocessor">#define wxPG_IMPLEMENT_SUBTYPE(VALUETYPE,CVALUETYPE,DEFPROPERTYCLASS,TYPESTRING,GETTER,DEFVAL) \</span>
00233 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00234 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00235 <span class="preprocessor">{ \</span>
00236 <span class="preprocessor">public: \</span>
00237 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return TYPESTRING; } \</span>
00238 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(CVALUETYPE); } \</span>
00239 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(m_default); } \</span>
00240 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00241 <span class="preprocessor">    { return wxVariant ( value.GETTER(), name ); } \</span>
00242 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp;, const wxString&amp;, wxVariant&amp; ) const \</span>
00243 <span class="preprocessor">    { \</span>
00244 <span class="preprocessor">        return (wxPGProperty*) NULL; \</span>
00245 <span class="preprocessor">    } \</span>
00246 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00247 <span class="preprocessor">    { \</span>
00248 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00249 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00250 <span class="preprocessor">        property-&gt;DoSetValue(value.GETTER()); \</span>
00251 <span class="preprocessor">    } \</span>
00252 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class(); \</span>
00253 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class(); \</span>
00254 <span class="preprocessor">protected: \</span>
00255 <span class="preprocessor">    CVALUETYPE m_default; \</span>
00256 <span class="preprocessor">}; \</span>
00257 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00258 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::~wxPGValueType##VALUETYPE##Class() { }</span>
00259 <span class="preprocessor"></span>
00260 <span class="preprocessor">#endif</span>
00261 <span class="preprocessor"></span>
00262 <span class="preprocessor">#define wxPG_IMPLEMENT_VALUE_TYPE(VALUETYPE,DEFPROPERTYCLASS,TYPESTRING,GETTER,DEFVAL) \</span>
00263 <span class="preprocessor">wxPG_IMPLEMENT_SUBTYPE(VALUETYPE,VALUETYPE,DEFPROPERTYCLASS,TYPESTRING,GETTER,DEFVAL)</span>
00264 <span class="preprocessor"></span>
00265 <span class="preprocessor">#define wxPG_IMPLEMENT_VALUE_TYPE_WXOBJ(VALUETYPE,DEFPROPERTYCLASS,DEFVAL) \</span>
00266 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*)NULL; \</span>
00267 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00268 <span class="preprocessor">{ \</span>
00269 <span class="preprocessor">public: \</span>
00270 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return CLASSINFO(VALUETYPE)-&gt;GetClassName(); } \</span>
00271 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(VALUETYPE); } \</span>
00272 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(DEFVAL); } \</span>
00273 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00274 <span class="preprocessor">    { return wxVariant ( (wxObject*)value.GetRawPtr(), name ); } \</span>
00275 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00276 <span class="preprocessor">    { \</span>
00277 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00278 <span class="preprocessor">            wxT("GenerateProperty: wxVariant type mismatch.") ); \</span>
00279 <span class="preprocessor">        return new DEFPROPERTYCLASS(label,name,(const VALUETYPE&amp;)*value.GetWxObjectPtr()); \</span>
00280 <span class="preprocessor">    } \</span>
00281 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00282 <span class="preprocessor">    { \</span>
00283 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00284 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00285 <span class="preprocessor">        property-&gt;DoSetValue((const wxObject*)value.GetWxObjectPtr()); \</span>
00286 <span class="preprocessor">    } \</span>
00287 <span class="preprocessor">};</span>
00288 <span class="preprocessor"></span>
00289 <span class="preprocessor">#define wxPG_IMPLEMENT_VALUE_TYPE_WXOBJ_OWNDEFAULT(VALUETYPE,DEFPROPERTYCLASS,DEFVAL) \</span>
00290 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*)NULL; \</span>
00291 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00292 <span class="preprocessor">{ \</span>
00293 <span class="preprocessor">public: \</span>
00294 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return CLASSINFO(VALUETYPE)-&gt;GetClassName(); } \</span>
00295 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(VALUETYPE); } \</span>
00296 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(&amp;m_default); } \</span>
00297 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00298 <span class="preprocessor">    { return wxVariant ( (wxObject*)value.GetRawPtr(), name ); } \</span>
00299 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00300 <span class="preprocessor">    { \</span>
00301 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00302 <span class="preprocessor">            wxT("GenerateProperty: wxVariant type mismatch.") ); \</span>
00303 <span class="preprocessor">        return new DEFPROPERTYCLASS(label,name,(const VALUETYPE&amp;)*value.GetWxObjectPtr()); \</span>
00304 <span class="preprocessor">    } \</span>
00305 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00306 <span class="preprocessor">    { \</span>
00307 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00308 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00309 <span class="preprocessor">        property-&gt;DoSetValue((const wxObject*)value.GetWxObjectPtr()); \</span>
00310 <span class="preprocessor">    } \</span>
00311 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00312 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class() { } \</span>
00313 <span class="preprocessor">protected: \</span>
00314 <span class="preprocessor">    VALUETYPE   m_default; \</span>
00315 <span class="preprocessor">};</span>
00316 <span class="preprocessor"></span>
00317 <span class="preprocessor">#define wxPG_IMPLEMENT_VALUE_TYPE_VOIDP(VALUETYPE,DEFPROPERTYCLASS,DEFVAL) \</span>
00318 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*)NULL; \</span>
00319 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00320 <span class="preprocessor">{ \</span>
00321 <span class="preprocessor">public: \</span>
00322 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return wxPGValueType_void-&gt;GetTypeName(); } \</span>
00323 <span class="preprocessor">    virtual const wxChar* GetCustomTypeName() const { return wxT(#VALUETYPE); } \</span>
00324 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(VALUETYPE); } \</span>
00325 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant((void*)&amp;m_default); } \</span>
00326 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00327 <span class="preprocessor">    { \</span>
00328 <span class="preprocessor">        void* ptr = (void*)value.GetRawPtr(); \</span>
00329 <span class="preprocessor">        wxASSERT ( ptr ); \</span>
00330 <span class="preprocessor">        return wxVariant ( ptr, name ); \</span>
00331 <span class="preprocessor">    } \</span>
00332 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00333 <span class="preprocessor">    { \</span>
00334 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00335 <span class="preprocessor">            wxT("GenerateProperty: wxVariant type mismatch.") ); \</span>
00336 <span class="preprocessor">        return new DEFPROPERTYCLASS(label,name,*((const VALUETYPE*)value.GetVoidPtr())); \</span>
00337 <span class="preprocessor">    } \</span>
00338 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00339 <span class="preprocessor">    { \</span>
00340 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00341 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00342 <span class="preprocessor">        property-&gt;DoSetValue((void*)value.GetVoidPtr()); \</span>
00343 <span class="preprocessor">    } \</span>
00344 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00345 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class() { } \</span>
00346 <span class="preprocessor">protected: \</span>
00347 <span class="preprocessor">    VALUETYPE   m_default; \</span>
00348 <span class="preprocessor">};</span>
00349 <span class="preprocessor"></span>
00350 <span class="comment">//</span>
00351 <span class="comment">// Use this to create a new type with a different default value.</span>
00352 <span class="preprocessor">#define wxPG_IMPLEMENT_DERIVED_TYPE(VALUETYPE,PARENTVT,DEFVAL) \</span>
00353 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00354 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00355 <span class="preprocessor">{ \</span>
00356 <span class="preprocessor">protected: \</span>
00357 <span class="preprocessor">    const wxPGValueType*    m_parentClass; \</span>
00358 <span class="preprocessor">    PARENTVT                m_default; \</span>
00359 <span class="preprocessor">public: \</span>
00360 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return m_parentClass-&gt;GetTypeName(); } \</span>
00361 <span class="preprocessor">    virtual const wxChar* GetCustomTypeName() const { return wxT(#VALUETYPE); } \</span>
00362 <span class="preprocessor">    virtual size_t GetTypeSize() const { return m_parentClass-&gt;GetTypeSize(); } \</span>
00363 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(m_default); } \</span>
00364 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00365 <span class="preprocessor">    { return m_parentClass-&gt;GenerateVariant(value,name); } \</span>
00366 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00367 <span class="preprocessor">    { return m_parentClass-&gt;GenerateProperty(label,name,value); } \</span>
00368 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00369 <span class="preprocessor">    { m_parentClass-&gt;SetValueFromVariant(property,value); } \</span>
00370 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class(); \</span>
00371 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class(); \</span>
00372 <span class="preprocessor">}; \</span>
00373 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::wxPGValueType##VALUETYPE##Class() \</span>
00374 <span class="preprocessor">{ \</span>
00375 <span class="preprocessor">    m_default = DEFVAL; \</span>
00376 <span class="preprocessor">    m_parentClass = wxPGValueType_##PARENTVT; \</span>
00377 <span class="preprocessor">    wxASSERT ( m_parentClass != (wxPGValueType*) NULL); \</span>
00378 <span class="preprocessor">} \</span>
00379 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::~wxPGValueType##VALUETYPE##Class() { }</span>
00380 <span class="preprocessor"></span>
00381 <span class="comment">// -----------------------------------------------------------------------</span>
00382 
00383 <span class="comment">// Property class implementation helper macros.</span>
00384 
00385 <span class="comment">// Use this if derived or value and editor type are defaults, or inheriting</span>
00386 <span class="comment">// form a working property class (assuming value and editor are the same).</span>
00387 <span class="preprocessor">#define IMPLEMENT_PROPERTY_CLASS_WITH_DEFTYPES(CLASSNAME,UPCLASS) \</span>
00388 <span class="preprocessor">_IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS)</span>
00389 <span class="preprocessor"></span>
00390 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00391 <span class="preprocessor"></span>
00392 <span class="preprocessor">#define IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS,T,EDITOR) \</span>
00393 <span class="preprocessor">_IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS) \</span>
00394 <span class="preprocessor">const wxPGValueType* CLASSNAME::GetValueType () const \</span>
00395 <span class="preprocessor">{ \</span>
00396 <span class="preprocessor">    return wxPGValueType_##T; \</span>
00397 <span class="preprocessor">} \</span>
00398 <span class="preprocessor">const wxPGEditor* CLASSNAME::GetEditorClass () const \</span>
00399 <span class="preprocessor">{ \</span>
00400 <span class="preprocessor">    return wxPGEditor_##EDITOR; \</span>
00401 <span class="preprocessor">}</span>
00402 <span class="preprocessor"></span>
00403 <span class="preprocessor">#else</span>
00404 <span class="preprocessor"></span>
00405 <span class="preprocessor">#define IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS,T,EDITOR) \</span>
00406 <span class="preprocessor">_IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS) \</span>
00407 <span class="preprocessor">const wxChar* CLASSNAME::GetClassName() const { return wxT(#CLASSNAME); } \</span>
00408 <span class="preprocessor">const wxPGValueType* CLASSNAME::GetValueType () const \</span>
00409 <span class="preprocessor">{ \</span>
00410 <span class="preprocessor">    return wxPGValueType_##T; \</span>
00411 <span class="preprocessor">} \</span>
00412 <span class="preprocessor">const wxPGEditor* CLASSNAME::GetEditorClass () const \</span>
00413 <span class="preprocessor">{ \</span>
00414 <span class="preprocessor">    return wxPGEditor_##EDITOR; \</span>
00415 <span class="preprocessor">}</span>
00416 <span class="preprocessor"></span>
00417 <span class="preprocessor">#endif</span>
00418 <span class="preprocessor"></span>
00419 <span class="preprocessor">#define IMPLEMENT_ABSTRACT_PROPERTY_CLASS(CLASSNAME,UPCLASS) \</span>
00420 <span class="preprocessor">_IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS)</span>
00421 <span class="preprocessor"></span>
00422 <span class="comment">// -----------------------------------------------------------------------</span>
00423 
00424 <span class="preprocessor">#define IMPLEMENT_STRING_PROPERTY(CLASSNAME) \</span>
00425 <span class="preprocessor">IMPLEMENT_DERIVED_PROPERTY_CLASS(CLASSNAME,wxLongStringProperty) \</span>
00426 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; name, const wxString&amp; label, const wxString&amp; value ) \</span>
00427 <span class="preprocessor">  : wxLongStringProperty(name,label,value) \</span>
00428 <span class="preprocessor">{ } \</span>
00429 <span class="preprocessor">CLASSNAME::~CLASSNAME() { }</span>
00430 <span class="preprocessor"></span>
00431 <span class="comment">// -----------------------------------------------------------------------</span>
00432 
00433 <span class="comment">// This will create interface for wxFlagsProperty derived class</span>
00434 <span class="comment">// named CLASSNAME.</span>
00435 <span class="preprocessor">#define IMPLEMENT_CUSTOM_FLAGS_PROPERTY(CLASSNAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00436 <span class="preprocessor">wxPG_IMPLEMENT_DERIVED_TYPE(long_##CLASSNAME,long,DEFVAL) \</span>
00437 <span class="preprocessor">IMPLEMENT_PROPERTY_CLASS(CLASSNAME,wxFlagsProperty,long_##CLASSNAME,TextCtrl) \</span>
00438 <span class="preprocessor">CLASSNAME::CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value ) \</span>
00439 <span class="preprocessor">    : wxFlagsProperty(label,name,LABELS,VALUES,ITEMCOUNT,value!=-1?value:DEFVAL) \</span>
00440 <span class="preprocessor">{ \</span>
00441 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(long_##CLASSNAME) \</span>
00442 <span class="preprocessor">} \</span>
00443 <span class="preprocessor">CLASSNAME::~CLASSNAME() { }</span>
00444 <span class="preprocessor"></span>
00445 <span class="comment">// -----------------------------------------------------------------------</span>
00446 
00447 <span class="comment">// This will create interface for wxEnumProperty derived class</span>
00448 <span class="comment">// named CLASSNAME.</span>
00449 <span class="preprocessor">#define IMPLEMENT_CUSTOM_ENUM_PROPERTY(CLASSNAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00450 <span class="preprocessor">wxPG_IMPLEMENT_DERIVED_TYPE(long_##CLASSNAME,long,DEFVAL) \</span>
00451 <span class="preprocessor">IMPLEMENT_PROPERTY_CLASS(CLASSNAME,wxEnumProperty,long_##CLASSNAME,Choice) \</span>
00452 <span class="preprocessor">CLASSNAME::CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value ) \</span>
00453 <span class="preprocessor">    : wxEnumProperty(label,name,LABELS,VALUES,ITEMCOUNT,value!=-1?value:DEFVAL) \</span>
00454 <span class="preprocessor">{ \</span>
00455 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(long_##CLASSNAME) \</span>
00456 <span class="preprocessor">} \</span>
00457 <span class="preprocessor">CLASSNAME::~CLASSNAME() { }</span>
00458 <span class="preprocessor"></span>
00459 <span class="comment">// -----------------------------------------------------------------------</span>
00460 
00461 <span class="comment">// Implementation for user wxColour editor property</span>
00462 
00463 <span class="preprocessor">#define IMPLEMENT_CUSTOM_COLOUR_PROPERTY(CLASSNAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00464 <span class="preprocessor">IMPLEMENT_DERIVED_PROPERTY_CLASS(CLASSNAME,wxSystemColourProperty,Choice) \</span>
00465 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, const wxColour&amp; value ) \</span>
00466 <span class="preprocessor">    : wxSystemColourProperty(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00467 <span class="preprocessor">{ \</span>
00468 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColourPropertyValue) \</span>
00469 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00470 <span class="preprocessor">    DoSetValue ( &amp;m_value ); \</span>
00471 <span class="preprocessor">} \</span>
00472 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00473 <span class="preprocessor">    const wxColourPropertyValue&amp; value ) \</span>
00474 <span class="preprocessor">    : wxSystemColourProperty(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00475 <span class="preprocessor">{ \</span>
00476 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColourPropertyValue) \</span>
00477 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00478 <span class="preprocessor">    DoSetValue ( &amp;m_value ); \</span>
00479 <span class="preprocessor">} \</span>
00480 <span class="preprocessor">CLASSNAME::~CLASSNAME () { } \</span>
00481 <span class="preprocessor">long CLASSNAME::GetColour ( int index ) \</span>
00482 <span class="preprocessor">{ \</span>
00483 <span class="preprocessor">    if ( !m_arrValues ) \</span>
00484 <span class="preprocessor">    { \</span>
00485 <span class="preprocessor">        wxASSERT ( index &lt; (int)m_itemCount ); \</span>
00486 <span class="preprocessor">        return COLOURS[index); \</span>
00487 <span class="preprocessor">    } \</span>
00488 <span class="preprocessor">    return COLOURS[m_arrValues[index]]; \</span>
00489 <span class="preprocessor">}</span>
00490 <span class="preprocessor"></span>
00491 <span class="comment">// -----------------------------------------------------------------------</span>
00492 
00493 <span class="preprocessor">#define IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(CLASSNAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00494 <span class="preprocessor">IMPLEMENT_PROPERTY_CLASS(CLASSNAME,wxSystemColourProperty,wxColour,Choice) \</span>
00495 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, const wxColour&amp; value ) \</span>
00496 <span class="preprocessor">    : wxSystemColourProperty(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00497 <span class="preprocessor">{ \</span>
00498 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColour) \</span>
00499 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00500 <span class="preprocessor">    DoSetValue(&amp;m_value.m_colour); \</span>
00501 <span class="preprocessor">} \</span>
00502 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00503 <span class="preprocessor">    const wxColourPropertyValue&amp; value ) \</span>
00504 <span class="preprocessor">    : wxSystemColourProperty(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00505 <span class="preprocessor">{ \</span>
00506 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColour) \</span>
00507 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00508 <span class="preprocessor">    DoSetValue(&amp;m_value.m_colour); \</span>
00509 <span class="preprocessor">} \</span>
00510 <span class="preprocessor">CLASSNAME::~CLASSNAME () { } \</span>
00511 <span class="preprocessor">void CLASSNAME::DoSetValue ( wxPGVariant value ) \</span>
00512 <span class="preprocessor">{ \</span>
00513 <span class="preprocessor">    wxColour* pval = wxPGVariantToWxObjectPtr(value,wxColour); \</span>
00514 <span class="preprocessor">    wxASSERT ( pval != (wxColour*) NULL ); \</span>
00515 <span class="preprocessor">    m_value.m_type = wxPG_COLOUR_CUSTOM; \</span>
00516 <span class="preprocessor">    if ( m_flags &amp; wxPG_PROP_TRANSLATE_CUSTOM ) \</span>
00517 <span class="preprocessor">    { \</span>
00518 <span class="preprocessor">        int found_ind = ColToInd(*pval); \</span>
00519 <span class="preprocessor">        if ( found_ind != wxNOT_FOUND ) m_value.m_type = found_ind; \</span>
00520 <span class="preprocessor">    } \</span>
00521 <span class="preprocessor">    m_value.m_colour = *pval; \</span>
00522 <span class="preprocessor">    wxPG_SetVariantWxObjectValue(); \</span>
00523 <span class="preprocessor">    if ( m_value.m_type &lt; wxPG_COLOUR_WEB_BASE ) \</span>
00524 <span class="preprocessor">        wxEnumProperty::DoSetValue ( (long)m_value.m_type ); \</span>
00525 <span class="preprocessor">    else \</span>
00526 <span class="preprocessor">        m_index = m_itemCount-1; \</span>
00527 <span class="preprocessor">} \</span>
00528 <span class="preprocessor">wxPGVariant CLASSNAME::GetValue () const \</span>
00529 <span class="preprocessor">{ \</span>
00530 <span class="preprocessor">    return wxPGVariant(&amp;m_value.m_colour); \</span>
00531 <span class="preprocessor">} \</span>
00532 <span class="preprocessor">long CLASSNAME::GetColour ( int index ) \</span>
00533 <span class="preprocessor">{ \</span>
00534 <span class="preprocessor">    if ( !m_arrValues ) \</span>
00535 <span class="preprocessor">    { \</span>
00536 <span class="preprocessor">        wxASSERT ( index &lt; (int)m_itemCount ); \</span>
00537 <span class="preprocessor">        return COLOURS[index]; \</span>
00538 <span class="preprocessor">    } \</span>
00539 <span class="preprocessor">    return COLOURS[m_arrValues[index]]; \</span>
00540 <span class="preprocessor">}</span>
00541 <span class="preprocessor"></span>
00542 <span class="comment">// -----------------------------------------------------------------------</span>
00543 
00544 <span class="preprocessor">#define wxPG_IMPLEMENT_SETVALUE_WXOBJ_WITH_CHILDREN(CLASSNAME,PARENTCLASS,DATATYPE) \</span>
00545 <span class="preprocessor">void CLASSNAME::DoSetValue ( wxPGVariant value ) \</span>
00546 <span class="preprocessor">    const DATATYPE* pObj = wxPGVariantToWxObjectPtr(value,DATATYPE); \</span>
00547 <span class="preprocessor">    m_value_##DATATYPE = *pObj; \</span>
00548 <span class="preprocessor">    wxPG_SetVariantWxObjectValue(); \</span>
00549 <span class="preprocessor">    RefreshChildren(); \</span>
00550 <span class="preprocessor">}</span>
00551 <span class="preprocessor"></span>
00552 <span class="comment">// Use this macro to generate DoSetValue() for a class that derives from</span>
00553 <span class="comment">// an exisiting working property class and has a wxObject value that is a</span>
00554 <span class="comment">// superset of the wxObject value of the parent class.</span>
00555 <span class="preprocessor">#define wxPG_IMPLEMENT_SETVALUE_WXOBJ_DERIVED_SUPERSET(CLASSNAME,T,PARENTCLASS,SUBSET_GETTER) \</span>
00556 <span class="preprocessor">void CLASSNAME::DoSetValue ( wxPGVariant value ) \</span>
00557 <span class="preprocessor">{ \</span>
00558 <span class="preprocessor">    const T* pObj = wxPGVariantToWxObjectPtr(value,T); \</span>
00559 <span class="preprocessor">    m_value_##T = *pObj; \</span>
00560 <span class="preprocessor">    PARENTCLASS::DoSetValue(pObj-&gt;SUBSET_GETTER); \</span>
00561 <span class="preprocessor">}</span>
00562 <span class="preprocessor"></span>
00563 <span class="comment">// Use this macro to implement DoSetValue for a property class that</span>
00564 <span class="comment">// has non-wxObject based class as a value type, and which has</span>
00565 <span class="comment">// child properties.</span>
00566 <span class="preprocessor">#define wxPG_IMPLEMENT_SETVALUE_VOIDP_TEXTCTRL_HAS_CHILDREN(CLASSNAME,T) \</span>
00567 <span class="preprocessor">void CLASSNAME::DoSetValue ( wxPGVariant value ) \</span>
00568 <span class="preprocessor">{ \</span>
00569 <span class="preprocessor">    T* pObj = (T*)wxPGVariantToVoidPtr(value); \</span>
00570 <span class="preprocessor">    m_value_##T = *pObj; \</span>
00571 <span class="preprocessor">    wxPG_SetVariantValueVoidPtr(); \</span>
00572 <span class="preprocessor">    RefreshChildren(); \</span>
00573 <span class="preprocessor">}</span>
00574 <span class="preprocessor"></span>
00575 <span class="preprocessor">#define wxPG_IMPLEMENT_GETVALUE_WXOBJ(CLASSNAME,DATATYPE) \</span>
00576 <span class="preprocessor">wxPGVariant CLASSNAME::GetValue () const \</span>
00577 <span class="preprocessor">{ \</span>
00578 <span class="preprocessor">    return wxPGVariant((const wxObject*)&amp;m_value_##DATATYPE); \</span>
00579 <span class="preprocessor">}</span>
00580 <span class="preprocessor"></span>
00581 <span class="preprocessor">#define wxPG_IMPLEMENT_GETVALUE_VOIDP(CLASSNAME,DATATYPE) \</span>
00582 <span class="preprocessor">wxPGVariant CLASSNAME::GetValue () const \</span>
00583 <span class="preprocessor">{ \</span>
00584 <span class="preprocessor">    return wxPGVariant((void*)&amp;m_value_##DATATYPE); \</span>
00585 <span class="preprocessor">}</span>
00586 <span class="preprocessor"></span>
00587 <span class="comment">// -----------------------------------------------------------------------</span>
00588 
00589 <span class="comment">// These may be useful for external properties (I think these could be any two values)</span>
00590 <span class="preprocessor">#define wxPG_SUBID1                     11485</span>
00591 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_SUBID2                     11486</span>
00592 <span class="preprocessor"></span>
00593 <span class="comment">// -----------------------------------------------------------------------</span>
00594 
<a name="l00599"></a><a class="code" href="structwxPGPaintData.htm">00599</a> <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>
00600 {
<a name="l00602"></a><a class="code" href="structwxPGPaintData.htm#o0">00602</a>     <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* m_parent;
00603 
<a name="l00605"></a><a class="code" href="structwxPGPaintData.htm#o1">00605</a>     <span class="keywordtype">int</span>       <a class="code" href="structwxPGPaintData.htm#o1">m_choiceitem</a>;
00606 };
00607 
00608 <span class="comment">// -----------------------------------------------------------------------</span>
00609 
00610 <span class="comment">//</span>
00611 <span class="comment">// Extra stuff.</span>
00612 <span class="comment">//</span>
00613 
00614 <span class="preprocessor">#define wxPG_TOKENIZER_BEGIN(WXSTRING,DELIMETER) \</span>
00615 <span class="preprocessor">    const wxChar* ptr = WXSTRING.c_str(); \</span>
00616 <span class="preprocessor">    wxString token; \</span>
00617 <span class="preprocessor">    const wxChar* token_start = NULL; \</span>
00618 <span class="preprocessor">    wxChar a = 0; \</span>
00619 <span class="preprocessor">    do \</span>
00620 <span class="preprocessor">    { \</span>
00621 <span class="preprocessor">        a = *ptr; \</span>
00622 <span class="preprocessor">        while ( a == ' ' ) { ptr++; a = *ptr; } \</span>
00623 <span class="preprocessor">        token_start = ptr; \</span>
00624 <span class="preprocessor">        while ( a != DELIMETER &amp;&amp; a != 0 ) { ptr++; a = *ptr; } \</span>
00625 <span class="preprocessor">        if ( ptr &gt; token_start ) \</span>
00626 <span class="preprocessor">        { \</span>
00627 <span class="preprocessor">            unsigned int str_len = ptr-token_start; \</span>
00628 <span class="preprocessor">            wxChar* store_ptr = token.GetWriteBuf ( str_len+1 ); \</span>
00629 <span class="preprocessor">            wxMemcpy ( store_ptr, token_start, str_len ); \</span>
00630 <span class="preprocessor">            store_ptr[str_len] = 0; \</span>
00631 <span class="preprocessor">            token.UngetWriteBuf ( str_len ); \</span>
00632 <span class="preprocessor">            token.Trim(); \</span>
00633 <span class="preprocessor">        } \</span>
00634 <span class="preprocessor">        else \</span>
00635 <span class="preprocessor">            token.Empty();</span>
00636 <span class="preprocessor"></span>
00637 <span class="preprocessor">#define wxPG_TOKENIZER_END() \</span>
00638 <span class="preprocessor">        ptr++; \</span>
00639 <span class="preprocessor">    } while ( a );</span>
00640 <span class="preprocessor"></span>
00641 <span class="comment">// 2nd version: tokens are surrounded by delimeters (for example, C-style strings).</span>
00642 <span class="preprocessor">#define wxPG_TOKENIZER2_BEGIN(WXSTRING,DELIMETER) \</span>
00643 <span class="preprocessor">    const wxChar* ptr = WXSTRING.c_str(); \</span>
00644 <span class="preprocessor">    const wxChar* ptr_end = &amp;ptr[WXSTRING.length()]; \</span>
00645 <span class="preprocessor">    wxString token; \</span>
00646 <span class="preprocessor">    wxChar* store_ptr_start = NULL; \</span>
00647 <span class="preprocessor">    wxChar* store_ptr = NULL; \</span>
00648 <span class="preprocessor">    wxChar a = *ptr; \</span>
00649 <span class="preprocessor">    wxChar prev_a = 0; \</span>
00650 <span class="preprocessor">    while ( a ) \</span>
00651 <span class="preprocessor">    { \</span>
00652 <span class="preprocessor">        if ( !store_ptr_start ) \</span>
00653 <span class="preprocessor">        { \</span>
00654 <span class="preprocessor">            if ( a == DELIMETER ) \</span>
00655 <span class="preprocessor">            { \</span>
00656 <span class="preprocessor">                store_ptr_start = store_ptr = token.GetWriteBuf ( ptr_end-ptr+1 ); \</span>
00657 <span class="preprocessor">                prev_a = 0; \</span>
00658 <span class="preprocessor">            } \</span>
00659 <span class="preprocessor">        } \</span>
00660 <span class="preprocessor">        else \</span>
00661 <span class="preprocessor">        { \</span>
00662 <span class="preprocessor">            if ( prev_a != wxT('\\') ) \</span>
00663 <span class="preprocessor">            { \</span>
00664 <span class="preprocessor">                if ( a != DELIMETER ) \</span>
00665 <span class="preprocessor">                { \</span>
00666 <span class="preprocessor">                    if ( a != wxT('\\') ) \</span>
00667 <span class="preprocessor">                    { \</span>
00668 <span class="preprocessor">                        *store_ptr = a; \</span>
00669 <span class="preprocessor">                        store_ptr++; \</span>
00670 <span class="preprocessor">                    } \</span>
00671 <span class="preprocessor">                } \</span>
00672 <span class="preprocessor">                else \</span>
00673 <span class="preprocessor">                { \</span>
00674 <span class="preprocessor">                    *store_ptr = 0; \</span>
00675 <span class="preprocessor">                    token.UngetWriteBuf ( store_ptr-store_ptr_start ); \</span>
00676 <span class="preprocessor"></span>
00677 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_TOKENIZER2_END() \</span>
00678 <span class="preprocessor">                    store_ptr_start = NULL; \</span>
00679 <span class="preprocessor">                } \</span>
00680 <span class="preprocessor">                prev_a = a; \</span>
00681 <span class="preprocessor">            } \</span>
00682 <span class="preprocessor">            else \</span>
00683 <span class="preprocessor">            { \</span>
00684 <span class="preprocessor">                *store_ptr = a; \</span>
00685 <span class="preprocessor">                store_ptr++; \</span>
00686 <span class="preprocessor">                prev_a = 0; \</span>
00687 <span class="preprocessor">            } \</span>
00688 <span class="preprocessor">        } \</span>
00689 <span class="preprocessor">        ptr++; \</span>
00690 <span class="preprocessor">        a = *ptr; \</span>
00691 <span class="preprocessor">    }</span>
00692 <span class="preprocessor"></span>
00693 <span class="comment">// -----------------------------------------------------------------------</span>
00694 
00695 <span class="preprocessor">#endif // __WX_PROPGEXT_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Fri Jan 14 10:26:14 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
