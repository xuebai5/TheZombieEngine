<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: wxPGProperty class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>wxPGProperty Class Reference</h1>wxPGProperty is base class for properties. Information here is provided primarily for anyone who creates new properties, since <b>all operations on properties should be done via wxPropertyGrid's or wxPropertyGridManager's methods</b>.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="propgrid_8h-source.htm">propgrid.h</a>&gt;</code>
<p>
<p>Inheritance diagram for wxPGProperty:
<p><center><img src="classwxPGProperty.png" usemap="#wxPGProperty_map" border="0" alt=""></center>
<map name="wxPGProperty_map">
<area href="classwxPGPropertyWithChildren.htm" alt="wxPGPropertyWithChildren" shape="rect" coords="732,56,905,80">
<area href="classwxPGRootPropertyClass.htm" alt="wxPGRootPropertyClass" shape="rect" coords="732,112,905,136">
<area href="classwxPropertyCategoryClass.htm" alt="wxPropertyCategoryClass" shape="rect" coords="915,112,1088,136">
</map>
<a href="classwxPGProperty-members.htm">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a0">wxPGProperty</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Basic constructor.  <a href="#a0"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a1">wxPGProperty</a> (const wxString &amp;label, const wxString &amp;name)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#a1"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a2">~wxPGProperty</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Virtual destructor.  <a href="#a2"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a3">DoSetValue</a> (wxPGVariant value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets property's internal value.  <a href="#a3"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a4" doxytag="wxPGProperty::DoGetValue" ></a>
virtual wxPGVariant&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a4">DoGetValue</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns properly constructed wxPGVariant. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a5" doxytag="wxPGProperty::GetValueAsVariant" ></a>
wxVariant&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a5">GetValueAsVariant</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns value as wxVariant. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual wxString&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a6">GetValueAsString</a> (int arg_flags) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns text representation of property's value.  <a href="#a6"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a7">SetValueFromString</a> (const wxString &amp;text, int flags)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Converts string to a value, and if succesfull, calls <a class="el" href="classwxPGProperty.htm#a3">DoSetValue()</a> on it.  <a href="#a7"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a8">SetValueFromInt</a> (long value, int flags)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Converts integer to a value, and if succesfull, calls <a class="el" href="classwxPGProperty.htm#a3">DoSetValue()</a> on it.  <a href="#a8"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual wxSize&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a9">GetImageSize</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns size of the custom paint image in front of property.  <a href="#a9"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a10">OnEvent</a> (<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> *propgrid, wxPGCtrlClass *wnd_primary, wxEvent &amp;event)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Events received by editor widgets are processed here.  <a href="#a10"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a11" doxytag="wxPGProperty::GetClassName" ></a>
virtual const wxChar *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a11">GetClassName</a> () const=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns classname (for example, "wxStringProperty" for wxStringProperty) of a property class. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual const <a class="el" href="classwxPGValueType.htm">wxPGValueType</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a12">GetValueType</a> () const=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns pointer to the object that has methods related to the value type of this property.  <a href="#a12"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a13" doxytag="wxPGProperty::GetEditorClass" ></a>
virtual const wxPGEditor *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a13">GetEditorClass</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns pointer to an instance of editor class. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>signed char&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a14">GetParentingType</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns 0 for normal items.  <a href="#a14"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a15">GetChoiceInfo</a> (wxPGChoiceInfo *choiceinfo)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns current value's index to the choice control.  <a href="#a15"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a16">OnCustomPaint</a> (wxDC &amp;dc, const wxRect &amp;rect, <a class="el" href="structwxPGPaintData.htm">wxPGPaintData</a> &amp;paintdata)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Override to paint an image in front of the property value text or drop-down list item.  <a href="#a16"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a17">SetAttribute</a> (int id, wxPGVariant value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets an attribute of this property.  <a href="#a17"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a18" doxytag="wxPGProperty::GetLabel" ></a>
const wxString &amp;&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a18">GetLabel</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns property's label. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a19" doxytag="wxPGProperty::GetParentState" ></a>
<a class="el" href="classwxPropertyGridState.htm">wxPropertyGridState</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a19">GetParentState</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns <a class="el" href="classwxPropertyGridState.htm">wxPropertyGridState</a> in which this property belongs. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a20" doxytag="wxPGProperty::GetName" ></a>
const wxString &amp;&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a20">GetName</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns property's name (alternate way to access property). <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a21" doxytag="wxPGProperty::DoSetName" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>DoSetName</b> (const wxString &amp;str)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a22">GetY</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets pre-calculated top y coordinate of property graphics.  <a href="#a22"></a><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a23" doxytag="wxPGProperty::UpdateControl" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>UpdateControl</b> (wxPGCtrlClass *primary)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a24" doxytag="wxPGProperty::GetDisplayedString" ></a>
wxString&nbsp;</td><td class="memItemRight" valign=bottom><b>GetDisplayedString</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a25" doxytag="wxPGProperty::GetId" ></a>
wxPGId&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a25">GetId</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns property id. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a26" doxytag="wxPGProperty::GetParent" ></a>
<a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a26">GetParent</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return parent of property. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a27" doxytag="wxPGProperty::IsOk" ></a>
bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a27">IsOk</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if property is valid and <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> methods can operate on it safely. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a28" doxytag="wxPGProperty::IsFlagSet" ></a>
bool&nbsp;</td><td class="memItemRight" valign=bottom><b>IsFlagSet</b> (unsigned char flag) const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a29" doxytag="wxPGProperty::GetFlags" ></a>
long&nbsp;</td><td class="memItemRight" valign=bottom><b>GetFlags</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a30" doxytag="wxPGProperty::IsSubProperty" ></a>
bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a30">IsSubProperty</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns TRUE if this is a sub-property. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a31" doxytag="wxPGProperty::GetChildCount" ></a>
size_t&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a31">GetChildCount</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns number of children (always 0 for normal properties). <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a32" doxytag="wxPGProperty::GetArrIndex" ></a>
unsigned int&nbsp;</td><td class="memItemRight" valign=bottom><b>GetArrIndex</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a33" doxytag="wxPGProperty::GetDepth" ></a>
unsigned int&nbsp;</td><td class="memItemRight" valign=bottom><b>GetDepth</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a34" doxytag="wxPGProperty::GetCatIndex" ></a>
unsigned int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a34">GetCatIndex</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns m_category. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a35" doxytag="wxPGProperty::SetCatIndex" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>SetCatIndex</b> (unsigned int ind)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a36" doxytag="wxPGProperty::GetIndexInParent" ></a>
unsigned int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGProperty.htm#a36">GetIndexInParent</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns position in parent's array. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a37" doxytag="wxPGProperty::SetFlag" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>SetFlag</b> (unsigned char flag)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a38" doxytag="wxPGProperty::SetHelpString" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>SetHelpString</b> (const wxString &amp;help_string)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a39" doxytag="wxPGProperty::GetHelpString" ></a>
const wxString &amp;&nbsp;</td><td class="memItemRight" valign=bottom><b>GetHelpString</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a40" doxytag="wxPGProperty::ClearFlag" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>ClearFlag</b> (unsigned char flag)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a41" doxytag="wxPGProperty::IsSomeParent" ></a>
bool&nbsp;</td><td class="memItemRight" valign=bottom><b>IsSomeParent</b> (<a class="el" href="classwxPGProperty.htm">wxPGProperty</a> *candidate_parent) const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="a42" doxytag="wxPGProperty::ShowError" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>ShowError</b> (const wxString &amp;msg)</td></tr>

<tr><td colspan=2><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="b0" doxytag="wxPGProperty::Init" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>Init</b> ()</td></tr>

<tr><td colspan=2><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p0" doxytag="wxPGProperty::m_label" ></a>
wxString&nbsp;</td><td class="memItemRight" valign=bottom><b>m_label</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p1" doxytag="wxPGProperty::m_name" ></a>
wxString&nbsp;</td><td class="memItemRight" valign=bottom><b>m_name</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p2" doxytag="wxPGProperty::m_parent" ></a>
<a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a> *&nbsp;</td><td class="memItemRight" valign=bottom><b>m_parent</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p3" doxytag="wxPGProperty::m_helpString" ></a>
wxString&nbsp;</td><td class="memItemRight" valign=bottom><b>m_helpString</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p4" doxytag="wxPGProperty::m_arrIndex" ></a>
unsigned int&nbsp;</td><td class="memItemRight" valign=bottom><b>m_arrIndex</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p5" doxytag="wxPGProperty::m_y" ></a>
int&nbsp;</td><td class="memItemRight" valign=bottom><b>m_y</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p6" doxytag="wxPGProperty::m_flags" ></a>
unsigned char&nbsp;</td><td class="memItemRight" valign=bottom><b>m_flags</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p7" doxytag="wxPGProperty::m_category" ></a>
unsigned char&nbsp;</td><td class="memItemRight" valign=bottom><b>m_category</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p8" doxytag="wxPGProperty::m_parentingType" ></a>
signed char&nbsp;</td><td class="memItemRight" valign=bottom><b>m_parentingType</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p9" doxytag="wxPGProperty::m_depth" ></a>
unsigned char&nbsp;</td><td class="memItemRight" valign=bottom><b>m_depth</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p10" doxytag="wxPGProperty::m_depthBgCol" ></a>
unsigned char&nbsp;</td><td class="memItemRight" valign=bottom><b>m_depthBgCol</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="p11" doxytag="wxPGProperty::m_bgColIndex" ></a>
unsigned char&nbsp;</td><td class="memItemRight" valign=bottom><b>m_bgColIndex</b></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
wxPGProperty is base class for properties. Information here is provided primarily for anyone who creates new properties, since <b>all operations on properties should be done via wxPropertyGrid's or wxPropertyGridManager's methods</b>. 
<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>When changing name of a property, it is essential to use <a class="el" href="classwxPropertyGrid.htm#a175">wxPropertyGrid::SetPropertyName</a> (that's why there is no SetName method). </li></ul>
</dd></dl>

<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a0" doxytag="wxPGProperty::wxPGProperty" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> wxPGProperty::wxPGProperty </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Basic constructor. 
<p>
Should not be necessary to override.     </td>
  </tr>
</table>
<a class="anchor" name="a1" doxytag="wxPGProperty::wxPGProperty" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> wxPGProperty::wxPGProperty </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const wxString &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>label</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const wxString &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>name</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Constructor. 
<p>
Real used property classes should have constructor of this style:<p>
<pre class="fragment"><div>        <span class="comment">// If MyValueType is a class, then it should be a constant reference</span>
        <span class="comment">// (e.g. const MyValueType&amp; ) instead.</span>
        wxMyProperty ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name,
            MyValueType value ) : wxPGProperty
        {
            <span class="comment">// Only required if MyValueType is not built-in default</span>
            <span class="comment">// (wxString, long, double, bool, and wxArrayString are;</span>
            <span class="comment">// wxFont, wxColour, etc. are not).</span>
            wxPG_INIT_REQUIRED_TYPE(MyValueType)
            <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a>(value); <span class="comment">// Generally recommended way to set the initial value.</span>

            <span class="comment">// If has child properties (i.e. wxPGPropertyWithChildren is used</span>
            <span class="comment">// as the parent class), then create children here. For example:</span>
            <span class="comment">//     AddChild( new wxStringProperty( wxT("Subprop 1"), wxPG_LABEL, value.GetSubProp1() ) );</span>
        }
</div></pre><p>
Of course, in this example, wxPGProperty could also be <a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a> (if it has sub-properties) or actually any other property class.     </td>
  </tr>
</table>
<a class="anchor" name="a2" doxytag="wxPGProperty::~wxPGProperty" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual wxPGProperty::~<a class="el" href="classwxPGProperty.htm">wxPGProperty</a> </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Virtual destructor. 
<p>
It is customary for derived properties to override this.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="a3" doxytag="wxPGProperty::DoSetValue" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual void wxPGProperty::DoSetValue </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">wxPGVariant&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets property's internal value. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Simple container with GetString(), GetLong() etc. methods. Currently recommended means to extract value is to use wxPGVariantToXXX(value) macro. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Remarks:</b></dt><dd>Example pseudo-implementation with notes: <pre class="fragment"><div>        <span class="keywordtype">void</span> wxMyProperty::DoSetValue ( wxPGVariant value )
        {
            <span class="comment">// A) Get value. For example</span>
            <span class="keyword">const</span> wxMyValueType* pvalue = wxPGVariantToWxObjectPtr(value,wxMyValueType);
            <span class="comment">//    or:</span>
            <span class="keyword">const</span> wxString&amp; str = wxPGVariantToString(value);
            <span class="comment">//    or:</span>
            <span class="keywordtype">long</span> val = wxPGVariantToLong(value);

            <span class="comment">// B) If value is wxObject or void based with NULL default, then handle that:</span>
            <span class="keywordflow">if</span> ( pvalue )
                m_value = *pvalue;
            <span class="keywordflow">else</span>
                pmyvalue-&gt;SetToDefault();

            <span class="comment">// Otherwise</span>
            <span class="comment">// m_value = *pvalue;</span>
            <span class="comment">// is sufficient.</span>

            <span class="comment">// C) Currently, following silly thing is recommended:</span>
            wxPG_SetVariantWxObjectValue();
            <span class="comment">//    or, if value is void*:</span>
            wxPG_SetVariantVoidPtrValue();
            <span class="comment">//    or, if not any of above::</span>
            wxPG_SetVariantValue(m_value);

            <span class="comment">// D) If has children, this should be here (before displaying in control).</span>
            RefreshChildren();

        }
</div></pre></dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a15" doxytag="wxPGProperty::GetChoiceInfo" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual int wxPGProperty::GetChoiceInfo </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">wxPGChoiceInfo *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>choiceinfo</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns current value's index to the choice control. 
<p>
May also return, through pointer arguments, strings that should be inserted to that control. Irrelevant to classes which do not employ wxPG_EDITOR(Choice) or similar.     </td>
  </tr>
</table>
<a class="anchor" name="a9" doxytag="wxPGProperty::GetImageSize" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual wxSize wxPGProperty::GetImageSize </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns size of the custom paint image in front of property. 
<p>
Returning -1 for either dimension means using default value. Default behaviour is to return wxSize(0,0), which means no image.     </td>
  </tr>
</table>
<a class="anchor" name="a14" doxytag="wxPGProperty::GetParentingType" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> signed char wxPGProperty::GetParentingType </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns 0 for normal items. 
<p>
1 for categories, -1 for other properties with children, -2 for wxParentProperty (mostly like -1 ones but with few expections). <dl compact><dt><b>Remarks:</b></dt><dd>Should not be overridden by new custom properties. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a6" doxytag="wxPGProperty::GetValueAsString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual wxString wxPGProperty::GetValueAsString </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg_flags</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns text representation of property's value. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>arg_flags</em>&nbsp;</td><td>If wxPG_FULL_VALUE is set, returns complete, storable value instead of displayable one (they may be different). </td></tr>
  </table>
</dl>

<p>
Reimplemented in <a class="el" href="classwxPGPropertyWithChildren.htm#a3">wxPGPropertyWithChildren</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a12" doxytag="wxPGProperty::GetValueType" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual const <a class="el" href="classwxPGValueType.htm">wxPGValueType</a>* wxPGProperty::GetValueType </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns pointer to the object that has methods related to the value type of this property. 
<p>
Keep atleast this method abstract so the class is kept abstract.     </td>
  </tr>
</table>
<a class="anchor" name="a22" doxytag="wxPGProperty::GetY" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int wxPGProperty::GetY </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Gets pre-calculated top y coordinate of property graphics. 
<p>
This cannot be relied on all times (<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> know when :) ), and value is -1 if property is not visible.     </td>
  </tr>
</table>
<a class="anchor" name="a16" doxytag="wxPGProperty::OnCustomPaint" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual void wxPGProperty::OnCustomPaint </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">wxDC &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>dc</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>const wxRect &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rect</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="structwxPGPaintData.htm">wxPGPaintData</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>paintdata</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Override to paint an image in front of the property value text or drop-down list item. 
<p>
If property's <a class="el" href="classwxPGProperty.htm#a9">GetImageSize()</a> returns size that has height != 0 but less than row height ( &lt; 0 has special meanings), <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> calls this method to draw a custom image in a limited area in front of the editor control or value text/graphics, and if control has drop-down list, then the image is drawn there as well (even in the case <a class="el" href="classwxPGProperty.htm#a9">GetImageSize()</a> returned higher height than row height).<p>
NOTE: Following applies when <a class="el" href="classwxPGProperty.htm#a9">GetImageSize()</a> returns a "flexible" height ( using wxPG_FLEXIBLE_SIZE(W,H) macro), which implies variable height items: If rect.x is &lt; 0, then this is a measure item call, which means that dc is invalid and only thing that should be done is to set paintdata.m_drawnHeight to the height of the image of item at index paintdata.m_choiceItem. This call may be done even as often as once every drop-down popup show. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>dc</em>&nbsp;</td><td>wxDC to paint on. </td></tr>
    <tr><td valign=top><em>rect</em>&nbsp;</td><td>Box reserved for custom graphics. Includes surrounding rectangle, if any. If x is &lt; 0, then this is a measure item call (see above). </td></tr>
    <tr><td valign=top><em>paintdata</em>&nbsp;</td><td><a class="el" href="structwxPGPaintData.htm">wxPGPaintData</a> structure with much useful data. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>You can actually exceed rect width, but if you do so then paintdata.m_drawnWidth must be set to the full width drawn in pixels.</li><li>Font and text colour should not be modified.</li><li>Brush is guaranteed to be default background colour. It has been already used to clear the background of area being painted. It can be modified.</li><li>Pen is guaranteed to be 1-wide 'black' (or whatever is the proper colour) pen for drawing framing rectangle. It can be changed as well. </li></ul>
</dd></dl>
<dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classwxPGProperty.htm#a6"></a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a10" doxytag="wxPGProperty::OnEvent" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual bool wxPGProperty::OnEvent </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>propgrid</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>wxPGCtrlClass *&nbsp;</td>
          <td class="mdname" nowrap> <em>wnd_primary</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>wxEvent &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>event</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Events received by editor widgets are processed here. 
<p>
Note that editor class usually processes most events. Some, such as button press events of TextCtrlAndButton class, should be handled here. Also, if custom handling for regular events is desired, then that can also be done (for example, wxSystemColourProperty custom handles wxEVT_COMMAND_CHOICE_SELECTED). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>event</em>&nbsp;</td><td>Associated wxEvent. This may be NULL, which indicates focus is leaving control. Property should get the edited value from wnd_primary and store it to the internals. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Return values:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>Should</em>&nbsp;</td><td>return TRUE if any changes in value should be reported. This is case, for example, when enter is pressed in wxTextCtrl.<br>
 parent-&gt;EditorsValueWasModified() should be called on any change, regardless if it is not large enough to be reported. This is case, for example, when text in wxTextCtrl changes. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Remarks:</b></dt><dd>Note that event is pointer, not a reference. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a17" doxytag="wxPGProperty::SetAttribute" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual void wxPGProperty::SetAttribute </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>id</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>wxPGVariant&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an attribute of this property. 
<p>
This is quite property class specific, and there are no common attributes. Note that attribute may be specific to a property instance, or it may affect all properties of its class. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>id</em>&nbsp;</td><td>Identifier of attribute </td></tr>
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Value for that attribute. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a8" doxytag="wxPGProperty::SetValueFromInt" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual bool wxPGProperty::SetValueFromInt </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">long&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>flags</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Converts integer to a value, and if succesfull, calls <a class="el" href="classwxPGProperty.htm#a3">DoSetValue()</a> on it. 
<p>
Default behaviour is to do nothing. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>Int to get the value from. </td></tr>
    <tr><td valign=top><em>flags</em>&nbsp;</td><td>If has wxPG_FULL_VALUE, then the value given is a actual value and not an index. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Return values:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>TRUE</em>&nbsp;</td><td>if value was changed. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a7" doxytag="wxPGProperty::SetValueFromString" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual bool wxPGProperty::SetValueFromString </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const wxString &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>text</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>flags</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Converts string to a value, and if succesfull, calls <a class="el" href="classwxPGProperty.htm#a3">DoSetValue()</a> on it. 
<p>
Default behaviour is to do nothing. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>text</em>&nbsp;</td><td>String to get the value from. </td></tr>
    <tr><td valign=top><em>report_error</em>&nbsp;</td><td>If TRUE, invalid string will be reported (prefer to use wxLogError). </td></tr>
  </table>
</dl>
<dl compact><dt><b>Return values:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>TRUE</em>&nbsp;</td><td>if value was changed. </td></tr>
  </table>
</dl>

<p>
Reimplemented in <a class="el" href="classwxPGPropertyWithChildren.htm#a4">wxPGPropertyWithChildren</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="propgrid_8h-source.htm">propgrid.h</a></ul>
<hr size="1"><address style="align: right;"><small>Generated on Mon Jan 24 11:39:47 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
