<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propdev.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propdev.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propdev.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid Internal/Property Developer Header</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Nov-23-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef _WX_PROPGRID_PROPDEV_H_</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define _WX_PROPGRID_PROPDEV_H_</span>
00014 <span class="preprocessor"></span>
00015 <span class="comment">// -----------------------------------------------------------------------</span>
00016 
00017 <span class="preprocessor">#ifdef _WX_PROPGRID_ADVPROPS_H_</span>
00018 <span class="preprocessor"></span><span class="preprocessor"># error "propdev.h must be included *before* advprops.h"</span>
00019 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00020 <span class="preprocessor"></span>
00021 <span class="comment">//#if wxPG_USE_CUSTOM_CONTROLS</span>
00022 <span class="comment">//# include "wx/propertygrid/custctrl.h"</span>
00023 <span class="comment">//#endif</span>
00024 
00025 <span class="comment">// -----------------------------------------------------------------------</span>
00026 
00027 <span class="comment">// wxWidgets &lt; 2.5.3 compatibility.</span>
00028 <span class="comment">// TODO: After officially included in library, remove this section.</span>
00029 <span class="preprocessor">#if wxMINOR_VERSION &lt; 5 || ( wxMINOR_VERSION == 5 &amp;&amp; wxRELEASE_NUMBER &lt; 3 )</span>
00030 <span class="preprocessor"></span><span class="preprocessor"># if wxUSE_UNICODE</span>
00031 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;string.h&gt;</span> <span class="comment">//for mem funcs</span>
00032     
00033     <span class="keyword">inline</span> wxChar* wxMemcpy(wxChar* szOut, <span class="keyword">const</span> wxChar* szIn, size_t len)
00034     {
00035         <span class="keywordflow">return</span> (wxChar*) memcpy(szOut, szIn, len * <span class="keyword">sizeof</span>(wxChar));
00036     }
00037 <span class="preprocessor"># else</span>
00038 <span class="preprocessor"></span><span class="preprocessor">    #define wxMemcpy memcpy</span>
00039 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00040 <span class="preprocessor"></span><span class="preprocessor"># ifndef wxFIXED_MINSIZE</span>
00041 <span class="preprocessor"></span><span class="preprocessor">#  define wxFIXED_MINSIZE    0</span>
00042 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00043 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00044 <span class="preprocessor"></span>
00045 <span class="comment">// -----------------------------------------------------------------------</span>
00046 
00047 <span class="preprocessor">#if wxUSE_UNICODE</span>
00048 <span class="preprocessor"></span>
00049 <span class="comment">// Always use wxString based hashmap with unicode</span>
00050 WX_DECLARE_STRING_HASH_MAP_WITH_DECL( <a class="code" href="classwxPGValueType.htm">wxPGValueType</a>*, wxPGDictValClass, <span class="keyword">class</span> WXDLLIMPEXP_PG );
00051 
00052 <span class="preprocessor">#else</span>
00053 <span class="preprocessor"></span>
00054 WX_DECLARE_HASH_MAP_WITH_DECL( wxChar*,     <span class="comment">// type of the keys</span>
00055                      <a class="code" href="classwxPGValueType.htm">wxPGValueType</a>*,        <span class="comment">// type of the values</span>
00056                      wxStringHash,          <span class="comment">// hasher</span>
00057                      wxStringEqual,         <span class="comment">// key equality predicate</span>
00058                      wxPGDictValClass,      <span class="comment">// name of the class</span>
00059                      <span class="keyword">class</span> WXDLLIMPEXP_PG );
00060 
00061 <span class="preprocessor">#endif</span>
00062 <span class="preprocessor"></span>
00063 <span class="comment">// Needs a custom destructor.</span>
00064 <span class="comment">/*class WXDLLIMPEXP_PG wxPGDictValClass : public wxPGDictValClassBase</span>
00065 <span class="comment">{</span>
00066 <span class="comment">public:</span>
00067 <span class="comment">    wxPGDictValClass();</span>
00068 <span class="comment">    ~wxPGDictValClass();</span>
00069 <span class="comment">};*/</span>
00070 
00071 <span class="comment">// This is required for sharing common global variables.</span>
00072 <span class="comment">// TODO: Automatic locking mechanism?</span>
00073 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGGlobalVarsClass
00074 {
00075 <span class="keyword">public</span>:
00076 
00077     wxPGGlobalVarsClass();
00078     ~wxPGGlobalVarsClass();
00079 
00080     wxString            m_pDefaultImageWildcard; <span class="comment">// Used by advprops, but here to make things easier.</span>
00081 
00082     wxArrayPtrVoid      m_arrEditorClasses; <span class="comment">// List of editor class instances.</span>
00083 
00084     wxPGDictValClass    m_dictValueType; <span class="comment">// Valuename -&gt; Value type object instance.</span>
00085 };
00086 
00087 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGGlobalVarsClass* wxPGGlobalVars;
00088 
00089 <span class="comment">// -----------------------------------------------------------------------</span>
00090 <span class="comment">// wxPGEditor class.</span>
00091 
00092 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGEditor
00093 {
00094 <span class="keyword">public</span>:
00095 
00097     <span class="keyword">virtual</span> ~wxPGEditor() = 0;
00098 
00100     <span class="keyword">virtual</span> wxPGCtrlClass* CreateControls ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
00101         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary ) <span class="keyword">const</span> = 0;
00102 
00104     <span class="keyword">virtual</span> <span class="keywordtype">void</span> UpdateControl ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00105 
00111     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawValue ( wxDC&amp; dc, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, <span class="keyword">const</span> wxRect&amp; rect ) <span class="keyword">const</span>;
00112 
00116     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnEvent ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
00117         wxPGCtrlClass* wnd_primary, wxEvent&amp; event ) <span class="keyword">const</span> = 0;
00118 
00122     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CopyValueFromControl ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00123 
00125     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueToUnspecified ( wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00126 
00128     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetControlStringValue ( wxPGCtrlClass* ctrl, <span class="keyword">const</span> wxString&amp; txt ) <span class="keyword">const</span>;
00129 
00131     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetControlIntValue ( wxPGCtrlClass* ctrl, <span class="keywordtype">int</span> value ) <span class="keyword">const</span>;
00132 
00136     <span class="keyword">virtual</span> <span class="keywordtype">int</span> AppendItem ( wxPGCtrlClass* ctrl, <span class="keyword">const</span> wxString&amp; label ) <span class="keyword">const</span>;
00137 
00138 <span class="keyword">protected</span>:
00139 };
00140 
00141 <span class="preprocessor">#define WX_PG_IMPLEMENT_EDITOR_CLASS_CONSTFUNC(EDITOR,CLASSNAME,PARENTCLASS) \</span>
00142 <span class="preprocessor">wxPGEditor* wxPGEditor_##EDITOR = (wxPGEditor*) NULL; \</span>
00143 <span class="preprocessor">wxPGEditor* wxPGConstruct##EDITOR##EditorClass() \</span>
00144 <span class="preprocessor">{ \</span>
00145 <span class="preprocessor">    wxASSERT ( !wxPGEditor_##EDITOR ); \</span>
00146 <span class="preprocessor">    return new CLASSNAME(); \</span>
00147 <span class="preprocessor">}</span>
00148 <span class="preprocessor"></span>
00149 <span class="preprocessor">#define WX_PG_IMPLEMENT_EDITOR_CLASS_STD_METHODS() \</span>
00150 <span class="preprocessor">virtual wxPGCtrlClass* CreateControls ( wxPropertyGrid* propgrid, wxPGProperty* property, \</span>
00151 <span class="preprocessor">    const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** psecondary ) const; \</span>
00152 <span class="preprocessor">virtual void UpdateControl ( wxPGProperty* property, wxPGCtrlClass* ctrl ) const; \</span>
00153 <span class="preprocessor">virtual bool OnEvent ( wxPropertyGrid* propgrid, wxPGProperty* property, \</span>
00154 <span class="preprocessor">    wxPGCtrlClass* primary, wxEvent&amp; event ) const; \</span>
00155 <span class="preprocessor">virtual bool CopyValueFromControl ( wxPGProperty* property, wxPGCtrlClass* ctrl ) const; \</span>
00156 <span class="preprocessor">virtual void SetValueToUnspecified ( wxPGCtrlClass* ctrl ) const;</span>
00157 <span class="preprocessor"></span>
00158 <span class="preprocessor">#define WX_PG_IMPLEMENT_EDITOR_CLASS(EDITOR,CLASSNAME,PARENTCLASS) \</span>
00159 <span class="preprocessor">class CLASSNAME; \</span>
00160 <span class="preprocessor">class CLASSNAME : public PARENTCLASS \</span>
00161 <span class="preprocessor">{ \</span>
00162 <span class="preprocessor">public: \</span>
00163 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00164 <span class="preprocessor">    WX_PG_IMPLEMENT_EDITOR_CLASS_STD_METHODS() \</span>
00165 <span class="preprocessor">}; \</span>
00166 <span class="preprocessor">WX_PG_IMPLEMENT_EDITOR_CLASS_CONSTFUNC(EDITOR,CLASSNAME,PARENTCLASS)</span>
00167 <span class="preprocessor"></span>
00168 
00169 <span class="comment">// -----------------------------------------------------------------------</span>
00170 <span class="comment">// Variant setter macros.</span>
00171 
00172 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00173 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValue(VALUE) \</span>
00174 <span class="preprocessor">    ((wxVariant&amp;)*this) = VALUE</span>
00175 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantWxObjectValue() \</span>
00176 <span class="preprocessor">    ((wxVariant&amp;)*this) = wxVariant((wxObject*)DoGetValue().GetRawPtr(),m_name);</span>
00177 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValueVoidPtr() \</span>
00178 <span class="preprocessor">    ((wxVariant&amp;)*this) = wxPGVariantToVoidPtr(DoGetValue())</span>
00179 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00180 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValue(VALUE)            if ( 0 ) { }</span>
00181 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantWxObjectValue()         if ( 0 ) { }</span>
00182 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValueVoidPtr()          if ( 0 ) { }</span>
00183 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00184 <span class="preprocessor"></span>
00185 <span class="comment">// -----------------------------------------------------------------------</span>
00186 <span class="comment">// Value type registeration macros</span>
00187 
00188 <span class="preprocessor">#define wxPGRegisterValueType(TYPENAME) \</span>
00189 <span class="preprocessor">    if ( wxPGValueType_##TYPENAME == (wxPGValueType*) NULL ) \</span>
00190 <span class="preprocessor">    { \</span>
00191 <span class="preprocessor">        wxPGValueType_##TYPENAME = wxPropertyGrid::RegisterValueType( new wxPGValueType##TYPENAME##Class ); \</span>
00192 <span class="preprocessor">    }</span>
00193 <span class="preprocessor"></span>
00194 <span class="comment">// Use this in RegisterDefaultValues.</span>
00195 <span class="preprocessor">#define wxPGRegisterDefaultValueType(TYPENAME) \</span>
00196 <span class="preprocessor">    if ( wxPGValueType_##TYPENAME == (wxPGValueType*) NULL ) \</span>
00197 <span class="preprocessor">    { \</span>
00198 <span class="preprocessor">        wxPGValueType_##TYPENAME = wxPropertyGrid::RegisterValueType( new wxPGValueType##TYPENAME##Class, TRUE ); \</span>
00199 <span class="preprocessor">    }</span>
00200 <span class="preprocessor"></span>
00201 <span class="preprocessor">#define wxPG_INIT_REQUIRED_TYPE(T) \</span>
00202 <span class="preprocessor">    wxPGRegisterValueType(T)</span>
00203 <span class="preprocessor"></span>
00204 <span class="comment">// -----------------------------------------------------------------------</span>
00205 <span class="comment">// Editor class registeration macros</span>
00206 
00207 <span class="preprocessor">#define wxPGRegisterEditorClass(EDITOR) \</span>
00208 <span class="preprocessor">    if ( wxPGEditor_##EDITOR == (wxPGEditor*) NULL ) \</span>
00209 <span class="preprocessor">    { \</span>
00210 <span class="preprocessor">        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( wxPGConstruct##EDITOR##EditorClass() ); \</span>
00211 <span class="preprocessor">    }</span>
00212 <span class="preprocessor"></span>
00213 <span class="comment">// Use this in RegisterDefaultEditors.</span>
00214 <span class="preprocessor">#define wxPGRegisterDefaultEditorClass(EDITOR) \</span>
00215 <span class="preprocessor">if ( wxPGEditor_##EDITOR == (wxPGEditor*) NULL ) \</span>
00216 <span class="preprocessor">    { \</span>
00217 <span class="preprocessor">        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( wxPGConstruct##EDITOR##EditorClass(), TRUE ); \</span>
00218 <span class="preprocessor">    }</span>
00219 <span class="preprocessor"></span>
00220 <span class="preprocessor">#define wxPG_INIT_REQUIRED_EDITOR(T) \</span>
00221 <span class="preprocessor">    wxPGRegisterEditorClass(T)</span>
00222 <span class="preprocessor"></span>
00223 <span class="comment">// -----------------------------------------------------------------------</span>
00224 
00225 <span class="preprocessor">#define WX_PG_IMPLEMENT_SUBTYPE(VALUETYPE,CVALUETYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL) \</span>
00226 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00227 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00228 <span class="preprocessor">{ \</span>
00229 <span class="preprocessor">public: \</span>
00230 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return TYPESTRING; } \</span>
00231 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(CVALUETYPE); } \</span>
00232 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(m_default); } \</span>
00233 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00234 <span class="preprocessor">    { return wxVariant ( value.GETTER(), name ); } \</span>
00235 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00236 <span class="preprocessor">    { \</span>
00237 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00238 <span class="preprocessor">            wxT("GenerateProperty: wxVariant type mismatch.") ); \</span>
00239 <span class="preprocessor">        return wxPG_CONSTFUNC(DEFPROPERTY)(label,name,value.GETTER()); \</span>
00240 <span class="preprocessor">    } \</span>
00241 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00242 <span class="preprocessor">    { \</span>
00243 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00244 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00245 <span class="preprocessor">        property-&gt;DoSetValue(value.GETTER()); \</span>
00246 <span class="preprocessor">    } \</span>
00247 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class(); \</span>
00248 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class(); \</span>
00249 <span class="preprocessor">protected: \</span>
00250 <span class="preprocessor">    CVALUETYPE m_default; \</span>
00251 <span class="preprocessor">}; \</span>
00252 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00253 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::~wxPGValueType##VALUETYPE##Class() { }</span>
00254 <span class="preprocessor"></span>
00255 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE(VALUETYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL) \</span>
00256 <span class="preprocessor">WX_PG_IMPLEMENT_SUBTYPE(VALUETYPE,VALUETYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL)</span>
00257 <span class="preprocessor"></span>
00258 <span class="comment">//</span>
00259 <span class="comment">// Implements wxVariantData for the type.</span>
00260 <span class="comment">//</span>
00261 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VDC(VDCLASS,VALUETYPE) \</span>
00262 <span class="preprocessor">IMPLEMENT_DYNAMIC_CLASS(VDCLASS,wxVariantData) \</span>
00263 <span class="preprocessor">VDCLASS::VDCLASS() { } \</span>
00264 <span class="preprocessor">VDCLASS::VDCLASS(const VALUETYPE&amp; value) \</span>
00265 <span class="preprocessor">{ \</span>
00266 <span class="preprocessor">    m_value = value; \</span>
00267 <span class="preprocessor">} \</span>
00268 <span class="preprocessor">void VDCLASS::Copy(wxVariantData&amp; data) \</span>
00269 <span class="preprocessor">{ \</span>
00270 <span class="preprocessor">    wxASSERT_MSG( data.GetType() == GetType(), wxT(#VDCLASS) wxT("::Copy: Can't copy to this type of data") ); \</span>
00271 <span class="preprocessor">    VDCLASS&amp; otherData = (VDCLASS&amp;) data; \</span>
00272 <span class="preprocessor">    otherData.m_value = m_value; \</span>
00273 <span class="preprocessor">} \</span>
00274 <span class="preprocessor">wxString VDCLASS::GetType() const \</span>
00275 <span class="preprocessor">{ \</span>
00276 <span class="preprocessor">    return wxString(wxT(#VALUETYPE)); \</span>
00277 <span class="preprocessor">} \</span>
00278 <span class="preprocessor">bool VDCLASS::Eq(wxVariantData&amp; data) const \</span>
00279 <span class="preprocessor">{ \</span>
00280 <span class="preprocessor">    wxASSERT_MSG( data.GetType() == GetType(), wxT(#VDCLASS) wxT("::Eq: argument mismatch") ); \</span>
00281 <span class="preprocessor">    VDCLASS&amp; otherData = (VDCLASS&amp;) data; \</span>
00282 <span class="preprocessor">    return otherData.m_value == m_value; \</span>
00283 <span class="preprocessor">} \</span>
00284 <span class="preprocessor">void* VDCLASS::GetValuePtr() { return (void*)&amp;m_value; }</span>
00285 <span class="preprocessor"></span>
00286 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00287 <span class="preprocessor">class WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00288 <span class="preprocessor">    virtual wxClassInfo* GetValueClassInfo(); \</span>
00289 <span class="preprocessor">}; \</span>
00290 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VDC(wxVariantData_##VALUETYPE,VALUETYPE) \</span>
00291 <span class="preprocessor">wxClassInfo* wxVariantData_##VALUETYPE::GetValueClassInfo() \</span>
00292 <span class="preprocessor">{ \</span>
00293 <span class="preprocessor">    return m_value.GetClassInfo(); \</span>
00294 <span class="preprocessor">} \</span>
00295 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00296 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00297 <span class="preprocessor">{ \</span>
00298 <span class="preprocessor">public: \</span>
00299 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return CLASSINFO(VALUETYPE)-&gt;GetClassName(); } \</span>
00300 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(VALUETYPE); } \</span>
00301 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00302 <span class="preprocessor">    { return wxVariant ( new wxVariantData_##VALUETYPE( (*(VALUETYPE*)value.GetRawPtr()) ), name ); } \</span>
00303 <span class="preprocessor">    const VALUETYPE&amp; GetRefFromVariant( wxVariant&amp; value ) const \</span>
00304 <span class="preprocessor">    { \</span>
00305 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00306 <span class="preprocessor">            wxT("GetPtrFromVariant: wxVariant type mismatch.") ); \</span>
00307 <span class="preprocessor">        wxVariantData_##VALUETYPE* vd = (wxVariantData_##VALUETYPE*)value.GetData(); \</span>
00308 <span class="preprocessor">        if ( vd-&gt;IsKindOf(CLASSINFO(wxVariantData_##VALUETYPE)) ) \</span>
00309 <span class="preprocessor">            return vd-&gt;GetValue(); \</span>
00310 <span class="preprocessor">        return *((const VALUETYPE*)value.GetWxObjectPtr()); \</span>
00311 <span class="preprocessor">    } \</span>
00312 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00313 <span class="preprocessor">    { \</span>
00314 <span class="preprocessor">        return wxPG_CONSTFUNC(DEFPROPERTY)(label,name, GetRefFromVariant(value)); \</span>
00315 <span class="preprocessor">    } \</span>
00316 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00317 <span class="preprocessor">    { \</span>
00318 <span class="preprocessor">        property-&gt;DoSetValue( GetRefFromVariant(value) ); \</span>
00319 <span class="preprocessor">    }</span>
00320 <span class="preprocessor"></span>
00321 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00322 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00323 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(DEFVAL); } \</span>
00324 <span class="preprocessor">};</span>
00325 <span class="preprocessor"></span>
00326 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_OWNDEFAULT(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00327 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00328 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00329 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class() { } \</span>
00330 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(&amp;m_default); } \</span>
00331 <span class="preprocessor">protected: \</span>
00332 <span class="preprocessor">    VALUETYPE   m_default; \</span>
00333 <span class="preprocessor">};</span>
00334 <span class="preprocessor"></span>
00335 <span class="comment">//    virtual const wxChar* GetTypeName() const { return wxPGValueType_void-&gt;GetTypeName(); }</span>
00336 
00337 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00338 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*)NULL; \</span>
00339 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00340 <span class="preprocessor">{ \</span>
00341 <span class="preprocessor">protected: \</span>
00342 <span class="preprocessor">    VALUETYPE   m_default; \</span>
00343 <span class="preprocessor">public: \</span>
00344 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return wxT(#VALUETYPE); } \</span>
00345 <span class="preprocessor">    virtual const wxChar* GetCustomTypeName() const { return wxT(#VALUETYPE); } \</span>
00346 <span class="preprocessor">    virtual size_t GetTypeSize() const { return sizeof(VALUETYPE); } \</span>
00347 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant((void*)&amp;m_default); } \</span>
00348 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00349 <span class="preprocessor">    { \</span>
00350 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00351 <span class="preprocessor">            wxT("GenerateProperty: wxVariant type mismatch.") ); \</span>
00352 <span class="preprocessor">        wxVariantData_##VALUETYPE* vd = (wxVariantData_##VALUETYPE*)value.GetData(); \</span>
00353 <span class="preprocessor">        wxASSERT_MSG( vd-&gt;IsKindOf(CLASSINFO(wxVariantData_##VALUETYPE)), \</span>
00354 <span class="preprocessor">            wxT("GenerateProperty: wxVariantData mismatch.")); \</span>
00355 <span class="preprocessor">        return wxPG_CONSTFUNC(DEFPROPERTY)(label,name,vd-&gt;GetValue() ); \</span>
00356 <span class="preprocessor">    } \</span>
00357 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00358 <span class="preprocessor">    { \</span>
00359 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00360 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00361 <span class="preprocessor">        wxVariantData_##VALUETYPE* vd = (wxVariantData_##VALUETYPE*)value.GetData(); \</span>
00362 <span class="preprocessor">        wxASSERT_MSG( vd-&gt;IsKindOf(CLASSINFO(wxVariantData_##VALUETYPE)), \</span>
00363 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariantData mismatch.")); \</span>
00364 <span class="preprocessor">        property-&gt;DoSetValue((void*)&amp;vd-&gt;GetValue() ); \</span>
00365 <span class="preprocessor">    } \</span>
00366 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00367 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class() { }</span>
00368 <span class="preprocessor"></span>
00369 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_SIMPLE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00370 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00371 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00372 <span class="preprocessor">    { \</span>
00373 <span class="preprocessor">        void* ptr = (void*)value.GetRawPtr(); \</span>
00374 <span class="preprocessor">        wxASSERT ( ptr ); \</span>
00375 <span class="preprocessor">        return wxVariant ( ptr, name ); \</span>
00376 <span class="preprocessor">    } \</span>
00377 <span class="preprocessor">};</span>
00378 <span class="preprocessor"></span>
00379 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_CVD(VALUETYPE,DEFPROPERTY,DEFVAL,VDCLASS) \</span>
00380 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00381 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00382 <span class="preprocessor">    { \</span>
00383 <span class="preprocessor">        void* ptr = (void*)value.GetRawPtr(); \</span>
00384 <span class="preprocessor">        wxASSERT ( ptr ); \</span>
00385 <span class="preprocessor">        return wxVariant ( new VDCLASS(*((VALUETYPE*)ptr)), name ); \</span>
00386 <span class="preprocessor">    } \</span>
00387 <span class="preprocessor">};</span>
00388 <span class="preprocessor"></span>
00389 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP2(VALUETYPE,DEFPROPERTY,DEFVAL,VDCLASS) \</span>
00390 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VDC(VDCLASS,VALUETYPE) \</span>
00391 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_CVD(VALUETYPE,DEFPROPERTY,DEFVAL,VDCLASS)</span>
00392 <span class="preprocessor"></span>
00393 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00394 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP2(VALUETYPE,DEFPROPERTY,DEFVAL,wxVariantData_##VALUETYPE)</span>
00395 <span class="preprocessor"></span>
00396 <span class="comment">//</span>
00397 <span class="comment">// Use this to create a new type with a different default value.</span>
00398 <span class="preprocessor">#define WX_PG_IMPLEMENT_DERIVED_TYPE(VALUETYPE,PARENTVT,DEFVAL) \</span>
00399 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00400 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00401 <span class="preprocessor">{ \</span>
00402 <span class="preprocessor">protected: \</span>
00403 <span class="preprocessor">    const wxPGValueType*    m_parentClass; \</span>
00404 <span class="preprocessor">    PARENTVT                m_default; \</span>
00405 <span class="preprocessor">public: \</span>
00406 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return m_parentClass-&gt;GetTypeName(); } \</span>
00407 <span class="preprocessor">    virtual const wxChar* GetCustomTypeName() const { return wxT(#VALUETYPE); } \</span>
00408 <span class="preprocessor">    virtual size_t GetTypeSize() const { return m_parentClass-&gt;GetTypeSize(); } \</span>
00409 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(m_default); } \</span>
00410 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00411 <span class="preprocessor">    { return m_parentClass-&gt;GenerateVariant(value,name); } \</span>
00412 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name, wxVariant&amp; value ) const \</span>
00413 <span class="preprocessor">    { return m_parentClass-&gt;GenerateProperty(label,name,value); } \</span>
00414 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00415 <span class="preprocessor">    { m_parentClass-&gt;SetValueFromVariant(property,value); } \</span>
00416 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class(); \</span>
00417 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class(); \</span>
00418 <span class="preprocessor">}; \</span>
00419 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::wxPGValueType##VALUETYPE##Class() \</span>
00420 <span class="preprocessor">{ \</span>
00421 <span class="preprocessor">    m_default = DEFVAL; \</span>
00422 <span class="preprocessor">    m_parentClass = wxPGValueType_##PARENTVT; \</span>
00423 <span class="preprocessor">    wxASSERT ( m_parentClass != (wxPGValueType*) NULL); \</span>
00424 <span class="preprocessor">} \</span>
00425 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::~wxPGValueType##VALUETYPE##Class() { }</span>
00426 <span class="preprocessor"></span>
00427 <span class="comment">// -----------------------------------------------------------------------</span>
00428 
00429 <span class="comment">//</span>
00430 <span class="comment">// Additional property class declaration helper macros</span>
00431 <span class="comment">//</span>
00432 
00433 <span class="preprocessor">#define WX_PG_DECLARE_DERIVED_PROPERTY_CLASS() \</span>
00434 <span class="preprocessor">public: \</span>
00435 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSNAME() \</span>
00436 <span class="preprocessor">private:</span>
00437 <span class="preprocessor"></span>
00438 <span class="comment">// -----------------------------------------------------------------------</span>
00439 
00440 <span class="comment">//</span>
00441 <span class="comment">// Property class implementation helper macros.</span>
00442 <span class="comment">//</span>
00443 
00444 <span class="preprocessor">#define WX_PG_DECLARE_PARENTAL_TYPE_METHODS() \</span>
00445 <span class="preprocessor">    virtual void DoSetValue ( wxPGVariant value ); \</span>
00446 <span class="preprocessor">    virtual wxPGVariant DoGetValue () const;</span>
00447 <span class="preprocessor"></span>
00448 <span class="preprocessor">#define WX_PG_DECLARE_BASIC_TYPE_METHODS() \</span>
00449 <span class="preprocessor">    virtual void DoSetValue ( wxPGVariant value ); \</span>
00450 <span class="preprocessor">    virtual wxPGVariant DoGetValue () const; \</span>
00451 <span class="preprocessor">    virtual wxString GetValueAsString ( int arg_flags = 0 ) const; \</span>
00452 <span class="preprocessor">    virtual bool SetValueFromString ( const wxString&amp; text, int flags = 0 );</span>
00453 <span class="preprocessor"></span>
00454 <span class="comment">// class WXDLLIMPEXP_PG</span>
00455 <span class="preprocessor">#define wxPG_BEGIN_PROPERTY_CLASS_BODY2(CLASSNAME,UPCLASS,T,INTERNAL_T,T_AS_ARG,DECL) \</span>
00456 <span class="preprocessor">DECL CLASSNAME : public UPCLASS \</span>
00457 <span class="preprocessor">{ \</span>
00458 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00459 <span class="preprocessor">protected: \</span>
00460 <span class="preprocessor">    INTERNAL_T      m_value; \</span>
00461 <span class="preprocessor">public: \</span>
00462 <span class="preprocessor">    CLASSNAME( const wxString&amp; label, const wxString&amp; name, T_AS_ARG value ); \</span>
00463 <span class="preprocessor">    virtual ~CLASSNAME();</span>
00464 <span class="preprocessor"></span>
00465 <span class="preprocessor">#define wxPG_BEGIN_PROPERTY_CLASS_BODY(NAME,UPCLASS,T,T_AS_ARG) \</span>
00466 <span class="preprocessor">wxPG_BEGIN_PROPERTY_CLASS_BODY2(wxPG_PROPCLASS(NAME),UPCLASS,T,T,T_AS_ARG,class)</span>
00467 <span class="preprocessor"></span>
00468 <span class="preprocessor">#define wxPG_BEGIN_PROPERTY_CLASS_BODY_WITH_DECL(NAME,UPCLASS,T,T_AS_ARG,DECL) \</span>
00469 <span class="preprocessor">wxPG_BEGIN_PROPERTY_CLASS_BODY2(wxPG_PROPCLASS(NAME),UPCLASS,T,T,T_AS_ARG,class DECL)</span>
00470 <span class="preprocessor"></span>
00471 <span class="preprocessor">#define wxPG_END_PROPERTY_CLASS_BODY() \</span>
00472 <span class="preprocessor">};</span>
00473 <span class="preprocessor"></span>
00474 <span class="preprocessor">#define WX_PG_DECLARE_CHOICE_METHODS() \</span>
00475 <span class="preprocessor">    virtual bool SetValueFromInt ( long value, int flags = 0 ); \</span>
00476 <span class="preprocessor">    virtual int GetChoiceInfo ( wxPGChoiceInfo* choiceinfo );</span>
00477 <span class="preprocessor"></span>
00478 <span class="preprocessor">#define WX_PG_DECLARE_EVENT_METHODS() \</span>
00479 <span class="preprocessor">    virtual bool OnEvent ( wxPropertyGrid* propgrid, wxPGCtrlClass* primary, wxEvent&amp; event );</span>
00480 <span class="preprocessor"></span>
00481 <span class="preprocessor">#define WX_PG_DECLARE_PARENTAL_METHODS() \</span>
00482 <span class="preprocessor">    virtual void ChildChanged ( wxPGProperty* p ); \</span>
00483 <span class="preprocessor">    virtual void RefreshChildren ();</span>
00484 <span class="preprocessor"></span>
00485 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_PAINT_METHODS() \</span>
00486 <span class="preprocessor">    virtual wxSize GetImageSize() const; \</span>
00487 <span class="preprocessor">    virtual void OnCustomPaint ( wxDC&amp; dc, const wxRect&amp; rect, wxPGPaintData&amp; paintdata );</span>
00488 <span class="preprocessor"></span>
00489 <span class="preprocessor">#define WX_PG_DECLARE_ATTRIBUTE_METHODS() \</span>
00490 <span class="preprocessor">    virtual void SetAttribute ( int id, wxPGVariant value );</span>
00491 <span class="preprocessor"></span>
00492 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00493 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_GETCLASSNAME_IMPLEMENTATION(PROPNAME)</span>
00494 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00495 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_GETCLASSNAME_IMPLEMENTATION(PROPNAME) \</span>
00496 <span class="preprocessor">    const wxChar* PROPNAME##Class::GetClassName() const { return wxT(#PROPNAME); }</span>
00497 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00498 <span class="preprocessor"></span>
00499 <span class="comment">// Implements sans constructor function. Also, first arg is class name, not property name.</span>
00500 <span class="preprocessor">#define WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(PROPNAME,T,EDITOR) \</span>
00501 <span class="preprocessor">wxPG_GETCLASSNAME_IMPLEMENTATION(PROPNAME) \</span>
00502 <span class="preprocessor">const wxPGValueType* PROPNAME##Class::GetValueType () const \</span>
00503 <span class="preprocessor">{ \</span>
00504 <span class="preprocessor">    return wxPGValueType_##T; \</span>
00505 <span class="preprocessor">} \</span>
00506 <span class="preprocessor">const wxPGEditor* PROPNAME##Class::GetEditorClass () const \</span>
00507 <span class="preprocessor">{ \</span>
00508 <span class="preprocessor">    return wxPGEditor_##EDITOR; \</span>
00509 <span class="preprocessor">}</span>
00510 <span class="preprocessor"></span>
00511 <span class="preprocessor">#define WX_PG_IMPLEMENT_CONSTFUNC(NAME,T_AS_ARG) \</span>
00512 <span class="preprocessor">wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp; label, const wxString&amp; name, T_AS_ARG value ) \</span>
00513 <span class="preprocessor">{ \</span>
00514 <span class="preprocessor">    return new wxPG_PROPCLASS(NAME)(label,name,value); \</span>
00515 <span class="preprocessor">}</span>
00516 <span class="preprocessor"></span>
00517 <span class="comment">// Adds constructor function as well.</span>
00518 <span class="preprocessor">#define WX_PG_IMPLEMENT_PROPERTY_CLASS2(NAME,CLASSNAME,T,T_AS_ARG,EDITOR) \</span>
00519 <span class="preprocessor">WX_PG_IMPLEMENT_CONSTFUNC(NAME,T_AS_ARG) \</span>
00520 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(NAME,T,EDITOR)</span>
00521 <span class="preprocessor"></span>
00522 <span class="comment">// A regular property without children.</span>
00523 <span class="preprocessor">#define WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,T,T_AS_ARG,EDITOR) \</span>
00524 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS2(NAME,wxPG_PROPCLASS(NAME),T,T_AS_ARG,EDITOR)</span>
00525 <span class="preprocessor"></span>
00526 <span class="comment">/*</span>
00527 <span class="comment">// A property with children.</span>
00528 <span class="comment">#define IMPLEMENT_PARENT_PROPERTY_CLASS(NAME,T,T_AS_ARG,EDITOR) \</span>
00529 <span class="comment">IMPLEMENT_PROPERTY_CLASS2(NAME,wxPG_PROPCLASS(NAME),wxPGPropertyWithChildren,T,T_AS_ARG,EDITOR)</span>
00530 <span class="comment"></span>
00531 <span class="comment">// Inherited property class is one that inherits from an existing working property</span>
00532 <span class="comment">// class, but uses atleas a different value type.</span>
00533 <span class="comment">#define IMPLEMENT_INHERITED_PROPERTY_CLASS(NAME,UPNAME,T,T_AS_ARG,EDITOR) \</span>
00534 <span class="comment">IMPLEMENT_PROPERTY_CLASS2(NAME,wxPG_PROPCLASS(NAME),wxPG_PROPCLASS(UPNAME),T,T_AS_ARG,EDITOR)</span>
00535 <span class="comment">*/</span>
00536 
00537 <span class="comment">//_IMPLEMENT_PROPERTY_CLASS(wxPG_PROPCLASS(NAME),wxPG_PROPCLASS(UPNAME))</span>
00538 
00539 <span class="comment">// Derived property class is one that inherits from an existing working property</span>
00540 <span class="comment">// class, but assumes same value and editor type.</span>
00541 <span class="preprocessor">#define WX_PG_IMPLEMENT_DERIVED_PROPERTY_CLASS(NAME,T_AS_ARG) \</span>
00542 <span class="preprocessor">WX_PG_IMPLEMENT_CONSTFUNC(NAME,T_AS_ARG) \</span>
00543 <span class="preprocessor">wxPG_GETCLASSNAME_IMPLEMENTATION(NAME)</span>
00544 <span class="preprocessor"></span>
00545 <span class="comment">//#define IMPLEMENT_ABSTRACT_PROPERTY_CLASS(CLASSNAME,UPCLASS) _IMPLEMENT_PROPERTY_CLASS(CLASSNAME,UPCLASS)</span>
00546 
00547 
00548 <span class="comment">// -----------------------------------------------------------------------</span>
00549 
00550 <span class="preprocessor">#define WX_PG_IMPLEMENT_STRING_PROPERTY(NAME) \</span>
00551 <span class="preprocessor">class wxPG_PROPCLASS(NAME) : public wxLongStringPropertyClass \</span>
00552 <span class="preprocessor">{ \</span>
00553 <span class="preprocessor">    WX_PG_DECLARE_DERIVED_PROPERTY_CLASS() \</span>
00554 <span class="preprocessor">public: \</span>
00555 <span class="preprocessor">    wxPG_PROPCLASS(NAME)( const wxString&amp; name, const wxString&amp; label, const wxString&amp; value ); \</span>
00556 <span class="preprocessor">    virtual ~wxPG_PROPCLASS(NAME)(); \</span>
00557 <span class="preprocessor">    virtual bool OnButtonClick ( wxPropertyGrid* propgrid, wxString&amp; value ); \</span>
00558 <span class="preprocessor">}; \</span>
00559 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_PROPERTY_CLASS(NAME,const wxString&amp;) \</span>
00560 <span class="preprocessor">wxPG_PROPCLASS(NAME)::wxPG_PROPCLASS(NAME)( const wxString&amp; name, const wxString&amp; label, const wxString&amp; value ) \</span>
00561 <span class="preprocessor">  : wxLongStringPropertyClass(name,label,value) \</span>
00562 <span class="preprocessor">{ } \</span>
00563 <span class="preprocessor">wxPG_PROPCLASS(NAME)::~wxPG_PROPCLASS(NAME)() { }</span>
00564 <span class="preprocessor"></span>
00565 <span class="comment">// -----------------------------------------------------------------------</span>
00566 
00567 <span class="comment">// This will create interface for wxFlagsProperty derived class</span>
00568 <span class="comment">// named CLASSNAME.</span>
00569 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY2(NAME,CLASSNAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00570 <span class="preprocessor">class CLASSNAME : public wxFlagsPropertyClass \</span>
00571 <span class="preprocessor">{ \</span>
00572 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00573 <span class="preprocessor">public: \</span>
00574 <span class="preprocessor">    CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value ); \</span>
00575 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00576 <span class="preprocessor">}; \</span>
00577 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_TYPE(long_##NAME,long,DEFVAL) \</span>
00578 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,long_##NAME,long,TextCtrl) \</span>
00579 <span class="preprocessor">CLASSNAME::CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value ) \</span>
00580 <span class="preprocessor">    : wxFlagsPropertyClass(label,name,LABELS,VALUES,ITEMCOUNT,value!=-1?value:DEFVAL) \</span>
00581 <span class="preprocessor">{ \</span>
00582 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(long_##NAME) \</span>
00583 <span class="preprocessor">} \</span>
00584 <span class="preprocessor">CLASSNAME::~CLASSNAME() { }</span>
00585 <span class="preprocessor"></span>
00586 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY(NAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00587 <span class="preprocessor">WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,ITEMCOUNT,DEFVAL)</span>
00588 <span class="preprocessor"></span>
00589 <span class="comment">// -----------------------------------------------------------------------</span>
00590 
00591 <span class="comment">// This will create interface for Enum property derived class</span>
00592 <span class="comment">// named CLASSNAME.</span>
00593 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_ENUM_PROPERTY2(NAME,CLASSNAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00594 <span class="preprocessor">class CLASSNAME : public wxEnumPropertyClass \</span>
00595 <span class="preprocessor">{ \</span>
00596 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00597 <span class="preprocessor">public: \</span>
00598 <span class="preprocessor">    CLASSNAME ( const wxString&amp; label, const wxString&amp; name, int value ); \</span>
00599 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00600 <span class="preprocessor">}; \</span>
00601 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_TYPE(long_##NAME,long,DEFVAL) \</span>
00602 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,long_##NAME,int,Choice) \</span>
00603 <span class="preprocessor">CLASSNAME::CLASSNAME ( const wxString&amp; label, const wxString&amp; name, int value ) \</span>
00604 <span class="preprocessor">    : wxEnumPropertyClass(label,name,LABELS,VALUES,ITEMCOUNT,value!=-1?value:DEFVAL) \</span>
00605 <span class="preprocessor">{ \</span>
00606 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(long_##NAME) \</span>
00607 <span class="preprocessor">} \</span>
00608 <span class="preprocessor">CLASSNAME::~CLASSNAME() { }</span>
00609 <span class="preprocessor"></span>
00610 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_ENUM_PROPERTY(NAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00611 <span class="preprocessor">WX_PG_IMPLEMENT_CUSTOM_ENUM_PROPERTY2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,ITEMCOUNT,DEFVAL)</span>
00612 <span class="preprocessor"></span>
00613 <span class="comment">// -----------------------------------------------------------------------</span>
00614 
00615 <span class="comment">// Implementation for user wxColour editor property</span>
00616 
00617 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY2(NAME,CLASSNAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00618 <span class="preprocessor">class CLASSNAME : public wxPG_PROPCLASS(wxSystemColourProperty) \</span>
00619 <span class="preprocessor">{ \</span>
00620 <span class="preprocessor">    WX_DECLARE_DERIVED_PROPERTY_CLASS() \</span>
00621 <span class="preprocessor">public: \</span>
00622 <span class="preprocessor">    CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00623 <span class="preprocessor">        const wxColourPropertyValue&amp; value ); \</span>
00624 <span class="preprocessor">    virtual ~CLASSNAME (); \</span>
00625 <span class="preprocessor">    virtual long GetColour ( int index ); \</span>
00626 <span class="preprocessor">}; \</span>
00627 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_PROPERTY_CLASS(NAME,const wxColour&amp;) \</span>
00628 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00629 <span class="preprocessor">    const wxColourPropertyValue&amp; value ) \</span>
00630 <span class="preprocessor">    : wxPG_PROPCLASS(wxSystemColourProperty)(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00631 <span class="preprocessor">{ \</span>
00632 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColourPropertyValue) \</span>
00633 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00634 <span class="preprocessor">    DoSetValue ( &amp;m_value ); \</span>
00635 <span class="preprocessor">} \</span>
00636 <span class="preprocessor">CLASSNAME::~CLASSNAME () { } \</span>
00637 <span class="preprocessor">long CLASSNAME::GetColour ( int index ) \</span>
00638 <span class="preprocessor">{ \</span>
00639 <span class="preprocessor">    if ( !m_arrValues ) \</span>
00640 <span class="preprocessor">    { \</span>
00641 <span class="preprocessor">        wxASSERT ( index &lt; (int)m_itemCount ); \</span>
00642 <span class="preprocessor">        return COLOURS[index); \</span>
00643 <span class="preprocessor">    } \</span>
00644 <span class="preprocessor">    return COLOURS[m_arrValues[index]]; \</span>
00645 <span class="preprocessor">}</span>
00646 <span class="preprocessor"></span>
00647 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY(NAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00648 <span class="preprocessor">    WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,COLOURS,ITEMCOUNT)</span>
00649 <span class="preprocessor"></span>
00650 <span class="comment">// -----------------------------------------------------------------------</span>
00651 
00652 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR2(NAME,CLASSNAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00653 <span class="preprocessor">class CLASSNAME : public wxPG_PROPCLASS(wxSystemColourProperty) \</span>
00654 <span class="preprocessor">{ \</span>
00655 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00656 <span class="preprocessor">public: \</span>
00657 <span class="preprocessor">    CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00658 <span class="preprocessor">        const wxColour&amp; value ); \</span>
00659 <span class="preprocessor">    virtual ~CLASSNAME (); \</span>
00660 <span class="preprocessor">    virtual void DoSetValue ( wxPGVariant value ); \</span>
00661 <span class="preprocessor">    virtual wxPGVariant DoGetValue () const; \</span>
00662 <span class="preprocessor">    virtual long GetColour ( int index ); \</span>
00663 <span class="preprocessor">}; \</span>
00664 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,wxColour,const wxColour&amp;,Choice) \</span>
00665 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, const wxColour&amp; value ) \</span>
00666 <span class="preprocessor">    : wxPG_PROPCLASS(wxSystemColourProperty)(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00667 <span class="preprocessor">{ \</span>
00668 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColour) \</span>
00669 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00670 <span class="preprocessor">    DoSetValue(&amp;m_value.m_colour); \</span>
00671 <span class="preprocessor">} \</span>
00672 <span class="preprocessor">CLASSNAME::~CLASSNAME () { } \</span>
00673 <span class="preprocessor">void CLASSNAME::DoSetValue ( wxPGVariant value ) \</span>
00674 <span class="preprocessor">{ \</span>
00675 <span class="preprocessor">    wxASSERT ( value.GetRawPtr() ); \</span>
00676 <span class="preprocessor">    wxColour* pval = wxPGVariantToWxObjectPtr(value,wxColour); \</span>
00677 <span class="preprocessor">    m_value.m_type = wxPG_COLOUR_CUSTOM; \</span>
00678 <span class="preprocessor">    if ( m_flags &amp; wxPG_PROP_TRANSLATE_CUSTOM ) \</span>
00679 <span class="preprocessor">    { \</span>
00680 <span class="preprocessor">        int found_ind = ColToInd(*pval); \</span>
00681 <span class="preprocessor">        if ( found_ind != wxNOT_FOUND ) m_value.m_type = found_ind; \</span>
00682 <span class="preprocessor">    } \</span>
00683 <span class="preprocessor">    m_value.m_colour = *pval; \</span>
00684 <span class="preprocessor">    wxPG_SetVariantWxObjectValue(); \</span>
00685 <span class="preprocessor">    if ( m_value.m_type &lt; wxPG_COLOUR_WEB_BASE ) \</span>
00686 <span class="preprocessor">        wxPG_PROPCLASS(wxEnumProperty)::DoSetValue ( (long)m_value.m_type ); \</span>
00687 <span class="preprocessor">    else \</span>
00688 <span class="preprocessor">        m_index = m_itemCount-1; \</span>
00689 <span class="preprocessor">    pval = &amp;m_value.m_colour; \</span>
00690 <span class="preprocessor">} \</span>
00691 <span class="preprocessor">wxPGVariant CLASSNAME::DoGetValue () const \</span>
00692 <span class="preprocessor">{ \</span>
00693 <span class="preprocessor">    return wxPGVariant(&amp;m_value.m_colour); \</span>
00694 <span class="preprocessor">} \</span>
00695 <span class="preprocessor">long CLASSNAME::GetColour ( int index ) \</span>
00696 <span class="preprocessor">{ \</span>
00697 <span class="preprocessor">    if ( !m_arrValues ) \</span>
00698 <span class="preprocessor">    { \</span>
00699 <span class="preprocessor">        wxASSERT ( index &lt; (int)m_itemCount ); \</span>
00700 <span class="preprocessor">        return COLOURS[index]; \</span>
00701 <span class="preprocessor">    } \</span>
00702 <span class="preprocessor">    return COLOURS[m_arrValues[index]]; \</span>
00703 <span class="preprocessor">}</span>
00704 <span class="preprocessor"></span>
00705 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(NAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00706 <span class="preprocessor">    WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,COLOURS,ITEMCOUNT)</span>
00707 <span class="preprocessor"></span>
00708 <span class="comment">// -----------------------------------------------------------------------</span>
00709 
00710 <span class="comment">// These may be useful for external properties (I think these could be any two values)</span>
00711 <span class="preprocessor">#define wxPG_SUBID1                     11485</span>
00712 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_SUBID2                     11486</span>
00713 <span class="preprocessor"></span>
00714 <span class="comment">// -----------------------------------------------------------------------</span>
00715 
<a name="l00720"></a><a class="code" href="structwxPGPaintData.htm">00720</a> <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>
00721 {
<a name="l00723"></a><a class="code" href="structwxPGPaintData.htm#o0">00723</a>     <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* m_parent;
00724 
<a name="l00726"></a><a class="code" href="structwxPGPaintData.htm#o1">00726</a>     <span class="keywordtype">int</span>             <a class="code" href="structwxPGPaintData.htm#o1">m_choiceItem</a>;
00727 
<a name="l00729"></a><a class="code" href="structwxPGPaintData.htm#o2">00729</a>     <span class="keywordtype">int</span>             <a class="code" href="structwxPGPaintData.htm#o2">m_drawnWidth</a>;
00730 
<a name="l00732"></a><a class="code" href="structwxPGPaintData.htm#o3">00732</a>     <span class="keywordtype">int</span>             <a class="code" href="structwxPGPaintData.htm#o3">m_drawnHeight</a>;
00733 
00734 };
00735 
00736 <span class="comment">// -----------------------------------------------------------------------</span>
00737 <span class="comment">// Some property class definitions (these should be useful to inherit from).</span>
00738 <span class="comment">// -----------------------------------------------------------------------</span>
00739 
00740 <span class="keyword">class </span>WXDLLIMPEXP_PG wxEnumPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00741 {
00742     WX_PG_DECLARE_PROPERTY_CLASS()
00743 <span class="keyword">public</span>:
00744 
00745     wxEnumPropertyClass () { }
00746 
00747     wxEnumPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxChar** labels,
00748         <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
00749     wxEnumPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
00750         <a class="code" href="classwxPGConstants.htm">wxPGConstants</a>&amp; constants, <span class="keywordtype">int</span> value = 0 );
00751     <span class="keyword">virtual</span> ~wxEnumPropertyClass ();
00752 
00753     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
00754     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a> () <span class="keyword">const</span>;
00755     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
00756     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> arg_flags );
00757     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a8">SetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">int</span> arg_flags );
00758     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#a15">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
00759 
00760 <span class="keyword">protected</span>:
00761     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>            m_itemCount;
00762     <span class="keyword">const</span> wxChar**          m_arrLabels;
00763     <span class="keyword">const</span> <span class="keywordtype">long</span>*             m_arrValues;
00764 
00765     <span class="keywordtype">int</span>                     m_index;
00766 };
00767 
00768 <span class="comment">// -----------------------------------------------------------------------</span>
00769 
00770 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFlagsPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>
00771 {
00772     WX_PG_DECLARE_PROPERTY_CLASS()
00773 <span class="keyword">public</span>:
00774 
00775     wxFlagsPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxChar** labels,
00776         <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">long</span> value = 0 );
00777     wxFlagsPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
00778         <a class="code" href="classwxPGConstants.htm">wxPGConstants</a>&amp; constants, <span class="keywordtype">long</span> value = 0 );
00779     <span class="keyword">virtual</span> ~wxFlagsPropertyClass ();
00780 
00781     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
00782     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a> () <span class="keyword">const</span>;
00783     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGPropertyWithChildren.htm#a3">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
00784     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a4">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00785     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a6">ChildChanged</a> ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
00786     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#a5">RefreshChildren</a>();
00787 
00788 <span class="keyword">protected</span>:
00789     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>            m_itemCount;
00790     <span class="keyword">const</span> wxChar**          m_arrLabels;
00791     <span class="keyword">const</span> <span class="keywordtype">long</span>*             m_arrValues;
00792 
00793     <span class="keywordtype">long</span>                    m_value;
00794 
00795     <span class="comment">// Converts string id to a relevant bit.</span>
00796     <span class="keywordtype">long</span> IdToBit ( <span class="keyword">const</span> wxString&amp; <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
00797 
00798     <span class="comment">// Creates children and sets value.</span>
00799     <span class="keywordtype">void</span> Init ( <span class="keywordtype">long</span> value );
00800 
00801 };
00802 
00803 <span class="comment">// -----------------------------------------------------------------------</span>
00804 
00805 <span class="comment">// Indicates first bit useable by derived properties.</span>
00806 <span class="preprocessor">#define wxPG_PROP_SHOW_FULL_FILENAME  wxPG_PROP_CLASS_SPECIFIC</span>
00807 <span class="preprocessor"></span>
00808 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFilePropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00809 {
00810     WX_PG_DECLARE_PROPERTY_CLASS()
00811 <span class="keyword">public</span>:
00812 
00813     wxFilePropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
00814         <span class="keyword">const</span> wxString&amp; value = wxEmptyString );
00815     <span class="keyword">virtual</span> ~wxFilePropertyClass ();
00816 
00817     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
00818     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a> () <span class="keyword">const</span>;
00819     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
00820     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00821     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a10">OnEvent</a> ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
00822 
00823     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a17">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxPGVariant value );
00824 
00825 <span class="keyword">protected</span>:
00826     wxString    m_wildcard;
00827     wxString    m_fnstr; <span class="comment">// needed for return value</span>
00828     wxFileName  m_filename; <span class="comment">// used as primary storage</span>
00829     <span class="keywordtype">int</span>         m_indFilter; <span class="comment">// index to the selected filter</span>
00830 };
00831 
00832 <span class="comment">// -----------------------------------------------------------------------</span>
00833 
00834 <span class="comment">//</span>
00835 <span class="comment">// In wxTextCtrl, strings a space delimited C-like strings. For example:</span>
00836 <span class="comment">// "String 1" "String 2" "String 3"</span>
00837 <span class="comment">//</span>
00838 <span class="comment">// To have " in a string, use \".</span>
00839 <span class="comment">// To have \ in a string, use \\.</span>
00840 <span class="comment">//</span>
00841 <span class="keyword">class </span>WXDLLIMPEXP_PG wxLongStringPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00842 {
00843     WX_PG_DECLARE_PROPERTY_CLASS()
00844 <span class="keyword">public</span>:
00845 
00846     wxLongStringPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL, <span class="keyword">const</span> wxString&amp; value = wxEmptyString );
00847     <span class="keyword">virtual</span> ~wxLongStringPropertyClass ();
00848 
00849     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#a3">DoSetValue</a> ( wxPGVariant value );
00850     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#a4">DoGetValue</a> () <span class="keyword">const</span>;
00851     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#a6">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
00852     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a7">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00853     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#a10">OnEvent</a> ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
00854 
00855     <span class="comment">//  Shows string editor dialog. Value to be edited should be read from value, and</span>
00856     <span class="comment">//  if dialog is not cancelled, it should be stored back and TRUE should be returned</span>
00857     <span class="comment">//  if that was the case.</span>
00858     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnButtonClick ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxString&amp; value );
00859 
00860 <span class="keyword">protected</span>:
00861     wxString    m_value;
00862 };
00863 
00864 <span class="comment">// -----------------------------------------------------------------------</span>
00865 
00866 <span class="keyword">class </span>WXDLLIMPEXP_PG wxArrayStringPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00867 {
00868     WX_PG_DECLARE_PROPERTY_CLASS()
00869 <span class="keyword">public</span>:
00870 
00871     wxArrayStringPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name,
00872         <span class="keyword">const</span> wxArrayString&amp; value );
00873     <span class="keyword">virtual</span> ~wxArrayStringPropertyClass ();
00874 
00875     WX_PG_DECLARE_BASIC_TYPE_METHODS()
00876     WX_PG_DECLARE_EVENT_METHODS()
00877     <span class="keyword">virtual</span> <span class="keywordtype">void</span> GenerateValueAsString ();
00878 
00879     <span class="comment">//  Shows string editor dialog. Value to be edited should be read from value, and</span>
00880     <span class="comment">//  if dialog is not cancelled, it should be stored back and TRUE should be returned</span>
00881     <span class="comment">//  if that was the case.</span>
00882     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnCustomStringEdit ( wxWindow* parent, wxString&amp; value );
00883 
00884     <span class="comment">// Helper.</span>
00885     <span class="keywordtype">bool</span> OnButtonClick ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxPGCtrlClass* primary,
00886         <span class="keyword">const</span> wxChar* cbt );
00887 
00888 <span class="keyword">protected</span>:
00889     wxArrayString   m_value;
00890     wxString        m_display; <span class="comment">// Cache for displayed text.</span>
00891 };
00892 
00893 <span class="preprocessor">#define WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(PROPNAME,DELIMCHAR,CUSTBUTTXT) \</span>
00894 <span class="preprocessor">class wxPG_PROPCLASS(PROPNAME) : public wxPG_PROPCLASS(wxArrayStringProperty) \</span>
00895 <span class="preprocessor">{ \</span>
00896 <span class="preprocessor">public: \</span>
00897 <span class="preprocessor">    wxPG_PROPCLASS(PROPNAME) ( const wxString&amp; label, const wxString&amp; name, const wxArrayString&amp; value ); \</span>
00898 <span class="preprocessor">    ~wxPG_PROPCLASS(PROPNAME) (); \</span>
00899 <span class="preprocessor">    virtual void GenerateValueAsString (); \</span>
00900 <span class="preprocessor">    virtual bool SetValueFromString ( const wxString&amp; text, int ); \</span>
00901 <span class="preprocessor">    virtual bool OnEvent ( wxPropertyGrid* propgrid, wxPGCtrlClass* primary, wxEvent&amp; event ); \</span>
00902 <span class="preprocessor">    virtual bool OnCustomStringEdit ( wxWindow* parent, wxString&amp; value ); \</span>
00903 <span class="preprocessor">}; \</span>
00904 <span class="preprocessor">WX_PG_IMPLEMENT_CONSTFUNC(PROPNAME,const wxArrayString&amp;) \</span>
00905 <span class="preprocessor">wxPG_PROPCLASS(PROPNAME)::wxPG_PROPCLASS(PROPNAME) ( const wxString&amp; label, const wxString&amp; name, const wxArrayString&amp; value ) \</span>
00906 <span class="preprocessor">    : wxPG_PROPCLASS(wxArrayStringProperty)(label,name,value) \</span>
00907 <span class="preprocessor">{ \</span>
00908 <span class="preprocessor">} \</span>
00909 <span class="preprocessor">wxPG_PROPCLASS(PROPNAME)::~wxPG_PROPCLASS(PROPNAME)() { } \</span>
00910 <span class="preprocessor">void wxPG_PROPCLASS(PROPNAME)::GenerateValueAsString () \</span>
00911 <span class="preprocessor">{ \</span>
00912 <span class="preprocessor">    if ( DELIMCHAR == wxT('"') ) \</span>
00913 <span class="preprocessor">        wxPG_PROPCLASS(wxArrayStringProperty)::GenerateValueAsString(); \</span>
00914 <span class="preprocessor">    else \</span>
00915 <span class="preprocessor">        wxPropertyGrid::ArrayStringToString(m_display,m_value,0,DELIMCHAR,0); \</span>
00916 <span class="preprocessor">} \</span>
00917 <span class="preprocessor">bool wxPG_PROPCLASS(PROPNAME)::SetValueFromString ( const wxString&amp; text, int ) \</span>
00918 <span class="preprocessor">{ \</span>
00919 <span class="preprocessor">    if ( DELIMCHAR == wxT('"') ) \</span>
00920 <span class="preprocessor">        return wxPG_PROPCLASS(wxArrayStringProperty)::SetValueFromString(text,0); \</span>
00921 <span class="preprocessor">    else \</span>
00922 <span class="preprocessor">    { \</span>
00923 <span class="preprocessor">        m_value.Empty(); \</span>
00924 <span class="preprocessor">        WX_PG_TOKENIZER1_BEGIN(text,DELIMCHAR) \</span>
00925 <span class="preprocessor">            m_value.Add ( token ); \</span>
00926 <span class="preprocessor">        WX_PG_TOKENIZER1_END() \</span>
00927 <span class="preprocessor">        GenerateValueAsString(); \</span>
00928 <span class="preprocessor">        return TRUE; \</span>
00929 <span class="preprocessor">    } \</span>
00930 <span class="preprocessor">} \</span>
00931 <span class="preprocessor">bool wxPG_PROPCLASS(PROPNAME)::OnEvent ( wxPropertyGrid* propgrid, wxPGCtrlClass* primary, wxEvent&amp; event ) \</span>
00932 <span class="preprocessor">{ \</span>
00933 <span class="preprocessor">    if ( event.m_eventType == wxEVT_COMMAND_BUTTON_CLICKED ) \</span>
00934 <span class="preprocessor">        return OnButtonClick(propgrid,primary,(const wxChar*) CUSTBUTTXT); \</span>
00935 <span class="preprocessor">    return FALSE; \</span>
00936 <span class="preprocessor">}</span>
00937 <span class="preprocessor"></span><span class="comment">// -----------------------------------------------------------------------</span>
00938 
00939 <span class="comment">//</span>
00940 <span class="comment">// Tokenizer macros.</span>
00941 <span class="comment">// NOTE: I have made two versions - worse ones (performance and consistency</span>
00942 <span class="comment">//   wise) use wxStringTokenizer and better ones (may have unfound bugs)</span>
00943 <span class="comment">//   use custom code. Since difference between using the two is &lt; 1k in</span>
00944 <span class="comment">//   executable size, I have opted to use the custom code.</span>
00945 <span class="comment">//</span>
00946 
00947 <span class="preprocessor">#include &lt;wx/tokenzr.h&gt;</span>
00948 
00949 <span class="comment">/*</span>
00950 <span class="comment">// TOKENIZER1 can be done with wxStringTokenizer</span>
00951 <span class="comment">#define WX_PG_TOKENIZER1_BEGIN(WXSTRING,DELIMITER) \</span>
00952 <span class="comment">    wxStringTokenizer tkz(WXSTRING,DELIMITER,wxTOKEN_RET_EMPTY); \</span>
00953 <span class="comment">    while ( tkz.HasMoreTokens() ) \</span>
00954 <span class="comment">    { \</span>
00955 <span class="comment">        wxString token = tkz.GetNextToken(); \</span>
00956 <span class="comment">        token.Trim(TRUE); \</span>
00957 <span class="comment">        token.Trim(FALSE);</span>
00958 <span class="comment"></span>
00959 <span class="comment">#define WX_PG_TOKENIZER1_END() \</span>
00960 <span class="comment">    }</span>
00961 <span class="comment">*/</span>
00962 
00963 <span class="preprocessor">#define WX_PG_TOKENIZER1_BEGIN(WXSTRING,DELIMITER) \</span>
00964 <span class="preprocessor">    const wxChar* ptr = WXSTRING.c_str(); \</span>
00965 <span class="preprocessor">    wxString token; \</span>
00966 <span class="preprocessor">    const wxChar* token_start = NULL; \</span>
00967 <span class="preprocessor">    wxChar a = 0; \</span>
00968 <span class="preprocessor">    do \</span>
00969 <span class="preprocessor">    { \</span>
00970 <span class="preprocessor">        a = *ptr; \</span>
00971 <span class="preprocessor">        while ( a == ' ' ) { ptr++; a = *ptr; } \</span>
00972 <span class="preprocessor">        token_start = ptr; \</span>
00973 <span class="preprocessor">        while ( a != DELIMITER &amp;&amp; a != 0 ) { ptr++; a = *ptr; } \</span>
00974 <span class="preprocessor">        if ( ptr &gt; token_start ) \</span>
00975 <span class="preprocessor">        { \</span>
00976 <span class="preprocessor">            unsigned int str_len = ptr-token_start; \</span>
00977 <span class="preprocessor">            wxChar* store_ptr = token.GetWriteBuf ( str_len+1 ); \</span>
00978 <span class="preprocessor">            wxMemcpy ( store_ptr, token_start, str_len ); \</span>
00979 <span class="preprocessor">            store_ptr[str_len] = 0; \</span>
00980 <span class="preprocessor">            token.UngetWriteBuf ( str_len ); \</span>
00981 <span class="preprocessor">            token.Trim(); \</span>
00982 <span class="preprocessor">        } \</span>
00983 <span class="preprocessor">        else \</span>
00984 <span class="preprocessor">            token.Empty();</span>
00985 <span class="preprocessor"></span>
00986 <span class="preprocessor">#define WX_PG_TOKENIZER1_END() \</span>
00987 <span class="preprocessor">        ptr++; \</span>
00988 <span class="preprocessor">    } while ( a );</span>
00989 <span class="preprocessor"></span>
00990 
00991 <span class="comment">/*</span>
00992 <span class="comment"></span>
00993 <span class="comment">#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \</span>
00994 <span class="comment">    wxStringTokenizer tkz(WXSTRING,DELIMITER,wxTOKEN_RET_EMPTY); \</span>
00995 <span class="comment">    int phase = 0; \</span>
00996 <span class="comment">    while ( tkz.HasMoreTokens() ) \</span>
00997 <span class="comment">    { \</span>
00998 <span class="comment">        wxString token = tkz.GetNextToken(); \</span>
00999 <span class="comment">        if ( phase != 0 ) \</span>
01000 <span class="comment">        {</span>
01001 <span class="comment"></span>
01002 <span class="comment">#define WX_PG_TOKENIZER2_END() \</span>
01003 <span class="comment">            phase = -1; \</span>
01004 <span class="comment">        } \</span>
01005 <span class="comment">        phase += 1; \</span>
01006 <span class="comment">    }</span>
01007 <span class="comment"></span>
01008 <span class="comment">*/</span>
01009 
01010 <span class="comment">// 2nd version: tokens are surrounded by DELIMITERs (for example, C-style strings).</span>
01011 <span class="comment">// TOKENIZER2 must use custom code for full compliancy</span>
01012 <span class="comment">// with " surrounded strings with \" inside.</span>
01013 <span class="preprocessor">#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \</span>
01014 <span class="preprocessor">    const wxChar* ptr = WXSTRING.c_str(); \</span>
01015 <span class="preprocessor">    const wxChar* ptr_end = &amp;ptr[WXSTRING.length()]; \</span>
01016 <span class="preprocessor">    wxString token; \</span>
01017 <span class="preprocessor">    wxChar* store_ptr_start = NULL; \</span>
01018 <span class="preprocessor">    wxChar* store_ptr = NULL; \</span>
01019 <span class="preprocessor">    wxChar a = *ptr; \</span>
01020 <span class="preprocessor">    wxChar prev_a = 0; \</span>
01021 <span class="preprocessor">    while ( a ) \</span>
01022 <span class="preprocessor">    { \</span>
01023 <span class="preprocessor">        if ( !store_ptr_start ) \</span>
01024 <span class="preprocessor">        { \</span>
01025 <span class="preprocessor">            if ( a == DELIMITER ) \</span>
01026 <span class="preprocessor">            { \</span>
01027 <span class="preprocessor">                store_ptr_start = store_ptr = token.GetWriteBuf ( ptr_end-ptr+1 ); \</span>
01028 <span class="preprocessor">                prev_a = 0; \</span>
01029 <span class="preprocessor">            } \</span>
01030 <span class="preprocessor">        } \</span>
01031 <span class="preprocessor">        else \</span>
01032 <span class="preprocessor">        { \</span>
01033 <span class="preprocessor">            if ( prev_a != wxT('\\') ) \</span>
01034 <span class="preprocessor">            { \</span>
01035 <span class="preprocessor">                if ( a != DELIMITER ) \</span>
01036 <span class="preprocessor">                { \</span>
01037 <span class="preprocessor">                    if ( a != wxT('\\') ) \</span>
01038 <span class="preprocessor">                    { \</span>
01039 <span class="preprocessor">                        *store_ptr = a; \</span>
01040 <span class="preprocessor">                        store_ptr++; \</span>
01041 <span class="preprocessor">                    } \</span>
01042 <span class="preprocessor">                } \</span>
01043 <span class="preprocessor">                else \</span>
01044 <span class="preprocessor">                { \</span>
01045 <span class="preprocessor">                    *store_ptr = 0; \</span>
01046 <span class="preprocessor">                    token.UngetWriteBuf ( store_ptr-store_ptr_start ); \</span>
01047 <span class="preprocessor"></span>
01048 <span class="preprocessor"></span><span class="preprocessor">#define WX_PG_TOKENIZER2_END() \</span>
01049 <span class="preprocessor">                    store_ptr_start = NULL; \</span>
01050 <span class="preprocessor">                } \</span>
01051 <span class="preprocessor">                prev_a = a; \</span>
01052 <span class="preprocessor">            } \</span>
01053 <span class="preprocessor">            else \</span>
01054 <span class="preprocessor">            { \</span>
01055 <span class="preprocessor">                *store_ptr = a; \</span>
01056 <span class="preprocessor">                store_ptr++; \</span>
01057 <span class="preprocessor">                prev_a = 0; \</span>
01058 <span class="preprocessor">            } \</span>
01059 <span class="preprocessor">        } \</span>
01060 <span class="preprocessor">        ptr++; \</span>
01061 <span class="preprocessor">        a = *ptr; \</span>
01062 <span class="preprocessor">    }</span>
01063 <span class="preprocessor"></span>
01064 
01065 <span class="comment">// -----------------------------------------------------------------------</span>
01066 
01067 <span class="preprocessor">#endif // _WX_PROPGRID_PROPDEV_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Jan 24 11:39:47 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
