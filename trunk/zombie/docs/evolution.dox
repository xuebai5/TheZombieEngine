/**
    @page ZombieEvolution Evolution and Future plans

    The Zombie Engine is a solid base for developing game concepts through a
    comprehensive set of tools and classes. But it is neither complete or
    perfect, and so it would benefit highly from a revision of some of its
    implementation decisions. The most outstanding areas where such a
    refactoring would take place are documented below, pointing out both the
    problems and their solutions.

    Additionally to refactoring the existing concepts, ideas to improve or
    extend existing functionalities are also presented. Keep in mind that
    development of the Zombie engine was discontinued in January 2007, and
    hasn't been worked upon since then. Not only it lacks some interesting tools
    and features, but it has also fallen behind current technology trends. The
    development efforts required to bring the Zombie engine into the next
    generation are also presented.

    @section ZombieEvolutionImprovements Improvements to the Zombie Engine

    Here we summarize the most significant problems and limitations of the
    Zombie Engine, broken down in modules. For the sake of brevity, the aspects
    to be refactored, fixed and extended are pointed out but not extensively
    discussed.

    @par General

    - Performance. We have too low performance to test levels.
    - Stability.
    - Localization support right from the beginning for all messages & text
      & audio.
    - Memory allocator.
    - Improved profiling system. Provides hierarchical profilers and resource
      consumption by context.
    - Error Manager. Combine all error, warning, info, log, assert into
      error manager. It can be captured by the GUI. Set guidelines for error
      reporting in the engine.
    - Separate project in dlls: core kernel, nebula, graphics, visibility,
      sound, physics, ai, gameplay, game, conjurer, ...? Decide which blocks to
      separate the project in, and minimize dependencies between them.

    @par Signals

    - Support for returning parameters ?
    - Support for gathering results from all the invocations ?
    - Class signals. Register by class instead of for each single object ?
    - Add nObject signals, OnInit, OnLoad, ...

    @par Scripting

    - Check LUA new versions or extensions ??
    - LUA basic math library, mini math library to support vectors and
      matrices in lua.
    - Coroutines can be used for behaviors and states.
    - Directory can listen for changes in scripts and reload automatically.
    - Variables ?

    @par Entity system

    - Transaction support for components (for multicore architectures)
    - Events for alloc, init, register, deregister, deinit
    - Add new components dynamically.
    - Entity identification changes ?
        Separate persistence from runtime identification ?
    - Extend the entity system to support object prototypes
    - Persistence.
        Solve problem with different versions ?
        Debug persistence dependencies

    @par File system

    - Async IO manager in same thread. Additional thread is not needed for
      IO, reduces problems and overheads. It will improve the performance by
      queuing multiple IO requests to the OS, instead of queuing just to the
      worker thread.

    @par Entity and component usage

    - Decouple operation and dependencies between components, for both code
      maintenance and performance- transform updates can trigger multiple
      transforms in different components.
    - Also in transforms, remove the duplicate persistence of transform
      information in other components (ie. physics) that unnecessarily adds
      complexity to the synchronization.
    - fix components persisting editor-only properties, eg. physics class
      for pickable objects. Move all debug-only properies to the appropriates
      ncEditorClass key string.
    - unify nTag usage, eg. in the name of game materials. Due to components
      (ie. audio) storing the actual name of game material instead of its id, nTag
      has been hacked to be able to retrieve the string besides the id. All
      components making use of nTag's name instead of their id should be banned
      and this hack reverted.

    @par Loading

    - revise which components perform their loading from persisted n2
      objects or resources, unify loading processes
    - reorganize loading code to remove module dependencies (as in
      transform) but keeping the resolution of dependencies that now is implicit
      in the ncloader code
    - add support for packaged assets and levels, to improve loading times
      due to file access
    - Event based, collision event OnCollision(object, data). A method can
      be triggered when there is a collision.
    - Physics networking. Send update of physics state of some objects
      through network.
    - Physics LOD.

    @par Physics

    - Object manager. Take advantage of spatial information not being
      recomputed every frame in order to improve the performance of the physics
      object manager itself.
    - Rag-dolls. Change rag-doll definition, specifying collision boxes and
      correspondence with skeleton joints. Also, it remains to be determined the
      exact way in which ragdolls are to be integrated with gameplay code (ie. the
      ragdoll manager)
    - Indoor collision spaces. Add support for these spaces to the physics
      object manager.
    - Move code to check corrupted collision meshes from loader to exporter.
      these meshes share the same collision points for the same edge, which are
      currently filtered out at load time.

    @par Gameplay

    - Generally a cleaner & better design must be devised. Logic animator,
      Sound animator, Movement engine. FSM are too complicated in current status
    - Game loop. Separate simulation & interpolation.
    - A lot of scripting is defined in gameplay classes. It wouldn't be
      necessary, for they are mainly data.
    - Gameplay has a limited control over the behavior of other modules, eg.
      Animation. The interface for such modules should expose enough control for
      gameplay requirements, and then determine whether it is possible or not to
      play an animation. An improved Top-Down design would be necessary to build
      the interface with other modules.

    @par Network

    - Network is always a server, although is "simulated" in same machine
      Client in server must not have advantage over other clients
      All executed in the server code which sends messages to clients
    - Wrong layer decision between gameplay and network. Sending basic
      actions causes synchronization problems, specially because they can be
      cancelled, and have a different duration in different machines. Possible
      solution: lower the layer between gameplay and network, sending only data
      and actions, as remote procedure calls, asynchronously and without return
      values.
    - Creation and destruction of remote entities, specially retrieving
      entities that aren't visible in a computer but can be seen from another one.
    - Developing new network components is growingly difficult and error
      prone. Possible solution: Unify all network components into a single
      component, that could be configured with data and scripting for use by
      several entities.
    - Currently it is possible to call remote methods on entities only. It
      would be necessary to allow it in other types of nObjects too. For nRoot
      derived classes, they would be identified by their path in all machines.

    @par Spaces/Visibility

    - fix game-mode visibility- insertion in indoor spaces uses wrapper
      meshes for cells, and movement uses portal traversal. Optimize the
      implementation of wrapper meshes, avoid using a nMeshLoader, that is a heavy
      structure to use in game

    @par Audio

    - Evaluate ISACT / OpenAL.

    @par Graphics

    - Support multiple hardware profiles. required criteria for graphics
      quality depending on platform and user configuration, and extend the
      implementation of shaders and shader trees to 3.0 and further shader
      profiles.
    - Mixing materials, effects and post-processes
    - Support dependent transforms in the scene graph: decals, plugs,
      attachments, etc.
    - Scene layers or depth priorities, eg. overlayed first-person scene
    - Depth-of-field effect
    - Real-time cameras and reflection / refraction. These could use some
      kind of layer system, allowing different layers to be updated only when
      necessary, etc.
    - Light and shadow occlusion. support precomputed ambient occlusion, use
      portal geometries for accurate light occlusion, use realtime occlusion for
      multiple ligth sources (eg. flashlights)
    - Alpha surfaces- define explicit render priority between surfaces to
      allow user customize overlapping
    - Debug rendering. Generalize the idea of wireframe rendering for sample
      shaders, geometry should always provide its own shaders for debug
      visualizations.
    - Shaders. Try to get rid of the fixed parameter list, resort to
      parameter semantics only for system parameters (matrices). this would allow
      importing shaders authored using external tools with arbitrary parameter
      names.
    - Scene retained model. Remove redundant operations from frame-to-frame.

    @par Materials

    - Improve shader tree structure for context-dependent rendering. Reduce
      the number of shader variations.
    - Hard to add new lights to shaders. Lack of global scheme on how a
      shader behaves, or divide in different shaders. Depends on shader version
      2.0, 3.0, ...

    @par Batches

    - Improve tool to batch impostors, removing test for individual
      entities.
    - Allow batching at more levels than the lowest.

    @par Lights

    - Effects for volumetric and ambient lights and shadows
    - Synchronize Graphics/Spatial light parameters, using shared
      properties.
    - Improve light editor with names, detailed info on lights influencing
      objects, etc.
    - Make the light model clear. What happens when the limitation for
      number of lights is reached ?

    @par Graphics tools

    - Revise the low-level graphics server, benchmark different machines,
      tools to get closed budgets
    - Improve shader maintenance. Find a solution based in templates /
      fragments / shader metalanguage
    - Tools to control shader complexity

    @par Animation

    - fix the way skeletons are loaded and initialized, because right now
      all animation resources are fully loaded when the class is created- they
      should be loaded when required by an instanced character.
    - separate in two different loops the way animation is updated in
      characters: one to update the character collision (at the physics
      frame-rate) and another one to update skeleton for graphics (that right now
      is updated on demand during scene rendering)
    - Attachments. Decouple update of attached entities from animation and
      rendering processes, so that they don't interfere with light visibility.
    - Optimize animation step by updating only the required skeleton within
      camera range, as in physics object manager.
    - Split state info from actual animation for graphics-independent
      simulation
    - Interface for managing animation states- refactor the interface to set
      animation states and state modifiers: abstract client code from the fact
      that skeletons have several levels of detail, using a unified interface for
      setting states (for different joint groups), and their state modifiers
      (loop, reverse, velocity, etc.) Channel-based solution
    - Animation database
    - Trigger animation events. There is support for this in nebula2 but is
      not supported nor used in Zombie.
    - Optimize skeletal animation by interpolating precomputed matrices
    - Export joint animation for non-character meshes
    - Blend tree to abstract animation behavior and blending from logic
      animator, simple animation interface.
    - Remove skeleton tweaking from the character interface, maybe as an
      additional operation in the blend tree.
    - Morphing. Export morphing information from 3ds, synchronize with
      skeletal animation through blend tree.
    - Cutscenes.

    @par Navigation meshes

    - Optimize navmesh generation time- The navmesh generation time for the
      outdoor should be within an order of a few minutes at most since it's going
      to be very frequent for artists to change a level, implying that level
      designers needs to rebuild the navmesh frequently. Currenly, some small last
      moment changes on a level are just prohibitive due to the time it takes to
      regenerate the navmesh (4.5 hours for the portion of level3 required for the
      demo, and it grows exponentially).
    - The main problem is the huge initial set of points used to triangulate
      the navmesh due to the automatic slope and small obstacles detection. Ideas
      to reduce greatly the number of points to triangulate are letting the level
      designer define the slopes (eg. farcry's forbidden areas) and letting the
      steering behaviors handle the smallest obstacles (eg. pathengine).
    - take advantage of the spatial server, adding neighborhood information
      on navmesh polygons will reduce the navmesh generation time as well

    @par Pathfinding

    - Review A-star (currenly, sometimes it finds two different paths just
      by reversing the origin and target points)
    - Use edges as path subgoals, not the middle of the polygon (actually,
      A-star should return a path of nodes, not points at all, letting
      pathfollowing to choose the points according to deviations on the optimum
      path due to steering behaviors)
    - Distribute the process throughout frames, setting a max per frame for
      all the agents (not a max per agent)

    @par Pathfollowing

    - Keep information on which node the agent is in
    - Use neighborhood information to know when an agent is travelling out
      of a node
    - Smooth the path partially each time a new node is entered

    @par Navigation in 3D (2.5D?)

    - Robust way to find the navmesh point for a world point, and viceversa
    - Consider if agents should be affected by physics/collisions or
      continue simulating them
   
    @par Agent architecture
    
    - Agent's memory should be decoupled from events
    - Do not expose agent's memory directly, use a query interface
    - Enqueue events until "think" process is performed
    - Data driven game events + user game events
    - Consider ways to simplify current FSM/basic_action combo from
      authoring side.
    - Design for LOD

    @par Triggers

    - Decouple triggers from sounds
    - Classify triggers as client-only and server-only

    @par Sounds

    - Do not send "PlaySound" over network. Option: sounds are "placed" in
      the world, then the client "sees" the sounds (valid for permament sounds,
      short sounds may be directly triggered by the animation itself in the client
      side).

    @par Summoner

    - Create a map viewport to give better access to entities, cameras,
      lights, indoors, etc. Allow direct inspection of entities under mouse, zoom,
      go-to, bookmarks, etc.
    - Data drive all the colors used in authoring helpers
    - Allow picking waypoints at first click
    - Undo system works saving state of objects, not retaining them
    - Separate in a library

    @par Conjurer

    - Separate in a python application, access by network.
      - Conjurer -> Summoner. Commands.
      - Summoner -> Conjurer. Signals.
    - Object browser in folders (see Levels, below).
    - Have first person and third person mode in editor ?
    - Grimoire, one folder for assets, another for classes, another for
      prototypes.
    - Conjurer: add suport for subversion operations.
    - improve property editor for objects, lists, arrays, ... ?
    - Log system, make difference between error, warning, info levels.
      - Breakpoint on log

    @par Levels

    - Use folders instead of layers. Users can group their objects in
      folders and subfolders.
    - A whole folder can be exported, selected, ...
    - Folders can have other objects apart from entities, nobjects, classes
    - These folders can be used later to specify areas ...
    - There can be special folders, or properties for the folders
    - Levels can even have a folder for the gui, etc
    - This levels can be nroot ?

    @par Exporter

    - Make the exporter only export assets, not classes ?
*/
