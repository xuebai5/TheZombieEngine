/**
    @page ZombieCompiling Compiling and Running Zombie

    - @ref ZombieCompilingRequirements
    - @ref ZombieCompilingBuilding
    - @ref ZombieCompilingConfig
    - @ref ZombieCompilingRunning
    
    @section ZombieCompilingRequirements Requirements
    
    Zombie is built on the shoulder of giants. In order to be able to use it
    for your own projects you will need the following tools.
    
    @subsection ZombieCompilingRequirementsDev Development Environment
    
    The nebula2 build system support multiple development platforms. Zombie
    has been developed only for these Visual Studio versions:

    - Visual Studio .NET 2003 (vc71). This is the recommended development platform.
    - Visual Studio .NET 2005, Visual C++ 2005 Express (vc8) with SP1. It has been partially ported and it has not been fully tested, some problems might appear on building.
    
    @subsection ZombieCompilingRequirementsLibRequired Required Libraries

    The following external libraries are required to compile and use Zombie:
    
    - DirectX9. You need a DirectX9.0c SDK, downloadable from msdn.microsoft.com/directx.
      The Direct3D9 renderer code can work with any of the 9.0c versions.
      Be advised though if you use a version prior to December 2006, that older
      hlsl effect files might not compile under the new compiler.
	http://www.microsoft.com/downloads/details.aspx?familyid=05DA7623-F2F9-4F57-91AA-6DB27FB8305F&displaylang=en
	
	- Microsoft Platform SDK. Direct Show SDK.
	http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&displaylang=en
	
    - Python. Version 2.4. Downloadable from www.python.org. It should be possible to run with newer versions with minor changes.
	
	http://www.python.org/ftp/python/2.4.4/python-2.4.4.msi
	
    - wxPython. The Python version of wxWidgets, required by the Conjurer GUI. The version used is wxPython 2.6.3.3 Unicode for python 2.4. Downloadable from http://www.wxpython.org/.
	
	http://downloads.sourceforge.net/wxpython/wxPython2.6-win32-unicode-2.6.3.3-py24.exe
	
    - libXml2. The version used is 2.6.17. The Python Xml library used for Xml schema parsing. Available at:
      http://xmlsoft.org/python.html

	http://www.zlatkovic.com/pub/libxml/oldreleases/libxml2-2.6.17.win32.zip
  
	In the case you want to run and compile the 3D Studio MAX 9 plugins you will need 
	to install 3D Studio MAX 9 and 3D Studio MAX 9 SDK.
  
    @subsection ZombieCompilingRequirementsLibIncluded Included libraries
	
    Included external libraries:

    - DevIL. http://openil.sourceforge.net/. LGPL license. 
		- Binaries: devil.dll 1.6.6 and ilu.dll 1.6.6 located in bin/dll.
		- Libraries: DevIL.lib, ilu.lib and ILUT.lib in code\nebula2\lib\win32_vc_i386.
		- Headers are located in code/nebula2/inc/il.
		
    - Loki. http://loki-lib.sourceforge.net/. MIT license. A small subset of Loki is included to have easier C++ template development. 
		- Headers located in code/nebula2/inc/loki.
	 Copyright (c) 2001 by Andrei Alexandrescu
	 
    - Tcl. http://www.tcl.tk/. Tcl/Tk license is a BSD style license. Actually using microtcl, which is a Radon Labs custom stripped-down version of Tcl version 8.4.
		- Headers in code/nebula2/inc/microtcl 
		- Source in code/nebula2/src/microtcl. 
	
    - Lua. http://www.lua.org/. MIT license. 
		- Headers and source located in code/zombie/nluaserver.
	
    - Enet. http://enet.bespin.org/. MIT style license. 
		- Libraries: d_enet.lib, enet.lib in code\nebula2\lib\win32_vc_i386.
		- Code in /enet directory
		
    - ODE. http://www.ode.org/. BSD license.
		- Libraries: ode.lib and oded.lib in code\nebula2\lib\win32_vc_i386.
		- Code in /ode directory
	
    - Ogg/Vorbis. http://xiph.org/vorbis/. BSD license.
		- Libraries: ogg.lib, ogg-d.lib, vorbis.lib and vorbis-d.lib in code\nebula2\lib\win32_vc_i386.
	
    - Ogg/Theora. http://www.theora.org/. BSD style license.
		- Libraries: theora.lib, theora-d.lib in code\nebula2\lib\win32_vc_i386.
	
	- OPCODE. http://www.codercorner.com/Opcode.htm. Collision library developed by Pierre Terdiman and included into ODE. BSD style license.
	
    - TinyXml. http://www.grinninglizard.com/tinyxml. Zlib license.
	
    - wxPropertyGrid. A wxPython control used for object inspectors. Based on the one provided in http://wxpropgrid.sourceforge.net/, but slightly modified to suit better the needs of Conjurer editor. The modified source is provided in the repository. WxWindows license which is basically L-GPL license. WxWindows license (similar to L-GPL).
	
	- dbghelp.dll. Microsoft helper library for debugging. Redistributed in bin/dll directory.
	
	- msvcp71.dll, msvcr71.dll: visual c library for Visual Studio .NET 2003 (7.1).

    @subsection ZombieCompilingOptionalLibs Optional Libraries
	
    Optional external libraries:
	
	- Visual Leak Detector. L-GPL license. Usage of Visual Leak Detector can be enabled or disabled at compile-time, making it possible to use it just for development versions for example.
		- Libraries: vldmt.lib, vldmtll.lib and vldmtdll.lib in code\nebula2\lib\win32_vc_i386.

	- Detours. can be used for debugging optionally to merge the Direct X log into the Zombie log system. Get binaries and libraries if you want to use it.
		- Binaries: place detoured.dll
		- Libraries: place detoured.lib and detours.lib in code\nebula2\lib\win32_vc_i386
	
    @section ZombieCompilingBuilding Building
    
    Zombie uses the nebula2 build system for project setup. The update.py
    script is the main entry point for rebuilding the project files for your
    development enviroment of choice. The build system can be invoked using
    the following command line:
    
    @verbatim
    python update.py -nogui -build [platform] [workspace]
    @endverbatim
    
	There are three workspaces available in the project:
	
	- conjurer: editor and game application.
	- renaissance: game application.
	- 3dsplugin: 3D Studio MAX plugins.
	
    For example, building the Conjurer project files for Visual Studio 2005 would be:
    
    @verbatim
    python update.py -build vstudio8 -nogui conjurer
    @endverbatim
    
    Building the Renaissance solution for Visual Studio .NET 2003 would be:
    
    @verbatim
    python update.py -build vstudio71 -nogui renaissance
    @endverbatim
    
    In every case, the project files are generated in the build/ folder of the
    Zombie directory, with the name of the platform and workspace, eg. in the
    previous examples:
    
    - build/vstudio8/conjurer
    - build/vstudio71/renaissance

    @section ZombieCompilingConfig Configurations
    
    Zombie generates the following build configurations for its projects:

    - Debug. This build links with debug libraries, generates debugging symbols, 
      and checks all asserts. It is the worst in performance, and is intended for 
      programmers, or for remotely debugging user crashes. Binaries for this 
      configuration are generated in the bin/win32d folder of the Zombie directory.
    - Debug Optimized. This is an optimized version of the prior one. Binaries
      for this configuration are generated in the bin/win32do folder.
    - Release Asserts. Code is compiled with debugging symbols but linked with release      
      libraries, thus being much faster, but Asserts are still evaluated. This version is 
      suitable for users (artists, designers) during development, in order to track any
      failed assertions in the code. Binaries are generated in bin/win32a.
    - Release. This is the fastest of configurations, it is optimized of asserts. 
      It is intended for final release, and its binaries are generated in the bin/win32 folder.

    In order to compile the workspaces succesfully you will have to add includes and lib 
	directories to your Microsoft Visual Studio configuration. At least for Direct X, Python,
	Platform SDK and 3D Studio MAX 9 SDK (just for the exporter).
	  
    @section ZombieCompilingRunning Running

    Zombie provides workspaces for the two most useful projects you'll need, the
    editing framework and the game runtime, namely Conjurer and Renaissance.
    This sections is an overview of the most common options for running them.
    Please refer to their corresponding User manuals for detailed usage.
    
	In order to run the editor, apart of all the dependencies that have been
	mentioned previously you will need to copy manually the precompiled 
	binaries for the property widget located in trunk/wxWidgets to your
	wxWidgets installation (probably in C:\Python24\Lib\site-packages\wx-2.6-msw-unicode 
	or similar directory). Note that the source code for the property widget
	is also provided and you can compile it yourself (located in trunk/propertygrid).
	
    The Conjurer application is the editor framework. In order to run it all
    required components need to be installed (see above), and a Working Copy
    needs to have been set up. The following parameters can be used to run
    the Conjurer application (or setting Shortcuts):
    
    -wc [path_to_working_copy]  This must point to the root folder of the game
        repository. Alternatively, you can define the CONJURER_WC environment
        variable with the same effect. This variable is automatically set when 
        installing the binary distribution of the Zombie Engine.

    -gui    This opens the Conjurer GUI automatically at startup. If not
        specified, the GUI can be invoked at any time using the 'G' key.

    -level [level_name] This automatically loads the specified level at startup.
        If not specified, levels can be opened from conjurer using the Level >
        Open menu.

    -class [class_name] This automatically instances an entity of the selected
        class
    
    Basically, Renaissance is a stripped down version of Conjurer, removing
    all of the editing and debugging structures, editor components, debug
    visualizations, etc. The entire editing framework is stripped, and the
    application jumps automatically into the game menu. The following parameters
    can be used to run Renaissance:
    
    -wc [path_to_working_copy]  Just Works just like in Conjurer. The CONJURER_wC
        environment variable can be used just as well.

    -level [level_name] Works just like in Conjurer. Currently, there is no other
        way to load a level in Renaissance, so this parameter should be always
        provided unless the game menu is extended to select levels.
*/
