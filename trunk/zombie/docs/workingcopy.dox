/**
    @page ZombieConjurerWorkingCopy Working Copy

    - @ref ZombieConjurerWCIntro
    - @ref ZombieConjurerWCSetup. How to download the working copy in your PC.
    - @ref ZombieConjurerWCStructure. Know some details about where are the files
      located.
    - @ref ZombieConjurerWCTemporary. The temporary working copy, used in the exporter.
    - @ref ZombieConjurerWCOperation. How to work with the working copy.
    - @ref ZombieConjurerWCClean. Maintaining a clean game repository for startup.

    @section ZombieConjurerWCIntro Introduction

    The Conjurer Working Copy is the local copy of the repository of game
    data. It is your working directory, where everything you export or edit is
    stored. A working copy directory is required to work with Conjurer, although
    you can have any number of them on your local disk. Any change made to your
    local working copy can be commited to the server repository to share it with
    the rest of your team.

    In order to work properly with Conjurer, you should be familiar with the
    structure of a working copy, so that you know what's in there and how you
    should manage it.

    @section ZombieConjurerWCSetup Working Copy Setup

    @par Initial setup

    When installing Conjurer, the default directory where the working copy
    will be assumed to be found is:

    C:\\conjurer\\gamerns\\

    If you want to use some other directory, you need to update the
    CONJURER_WC environment variable in your system:

    - Go to Start > Control Panel > System > Advanced > Environment variables
    - Add a variable with New in "User variables"
    - Use CONJURER_WC as Variable Name, the path you want to use as Variable
      Value
    - Press OK, and restart your session to reload your environment variables

    Once your desired path is set up, you need to download the current
    working copy from the repository server, using a Subversion client.
    You can:

    - use a command-line client. Open the windows console (or Start > Run)
      and type (use apropriate path):
      svn checkout svn://svn2.tragnarion.com/repos/gamerns/trunk
      %CONJURER_WC%/gamerns
    - use a graphic client, like Tortoise SVN. Use the checkout option from
      the Tortoise menu, with the URL:
      svn://svn2.tragnarion.com/repos/gamerns/trunk. Create it in your
      %CONJURER_WC%/gamerns directory.

    Now you're ready to work with Conjurer.

    @par Faster operation

    - Please check your Tortoise SVN configuration, go to Settings, Look and
      feel, Icon overlays and disable all the
      options. With this you'll loose the icon status information shown about
      each file in windows explorer, but it will be faster.
    - Please check the configuration of your antivirus. Add the directories
      where you have the repositories (e.g. e:\\conjurer,
      e:\\renaissance\\ and any other you may have) to the list of non-scanned
      directories.

    This should make the system more responsive.

    @section ZombieConjurerWCStructure Working Copy Structure

    The working copy contains the following sections (folders):

    - wc:classes. This is where entity classes are exported or created. The
      .n2 files it contains are the set of entity classes currently in the game.
    - wc:edit. Editable content from conjurer tools, not needed for gold.
    - wc:export. This is where resources authored either using external
      tools (geometry, textures, animations, sounds, etc.) or the editor itself
      (terrains) are placed.
    - wc:levels. This is where game levels, with all of their entities and
      scripts, are stored. The .n2 files it contains are the
      set of levels in the game. Each level has a corresponding folder with
      its own name where level data is stored.
    - wc:libs/ This is where library information from the editor is stored,
      both the shared Grimoire and any local class libraries.

    - @ref ZombieConjurerWCStructureClasses
    - @ref ZombieConjurerWCStructureEdit
    - @ref ZombieConjurerWCStructureExport
      - @ref ZombieConjurerWCStructureExportAssets
      - @ref ZombieConjurerWCStructureExportGeneratedTextures Generated Textures
      - @ref ZombieConjurerWCStructureExportMusic
      - @ref ZombieConjurerWCStructureExportSound
      - @ref ZombieConjurerWCStructureExportTextures
      - @ref ZombieConjurerWCStructureExportVideo
    - @ref ZombieConjurerWCStructureLevels
    - @ref ZombieConjurerWCStructureLibraries

    @subsection ZombieConjurerWCStructureClasses Entity Classes

    In the classes/ folder you'll find different files, all with the .n2
    extension:

    - classindex.n2 there is only one such file, listing all classes in the folder
    - System classes: these are of internal use by the application, and should
      never change.
    - Exported classes: these are the ones generated from the 3ds max exporter.
    - Edited classes: these are generated from conjurer.

    @subsection ZombieConjurerWCStructureEdit Edit

    wc:edit/
    This does not exist yet, but planned to be implemented.
    This directory contains things that have to be editable from Conjurer
    tools but are not in the final game.

    - wc:edit/assets/Assetname: a directory for each asset. Used for
      example for terrains. It is one directory with the name of the asset
      (usually the same or at least based on the name of the class).
    - One directory per asset, with multiple files and dirs inside
    - Allowed editing from Conjurer tools
    - This can be exported too to wc:export/assets once finished (which is
      not under version control)
    - In final game this dir is not needed
    - This goes into repository
    - Only the people who needs to edit this, needs to download this dir
    - wc:edit/grimoire. Moved from wc:libs/grimoire.
    - wc:edit/levels. Directory of editable levels. People only need to
      download the level they need to edit One directory for each level.
      Exported from the tool.

    @subsection ZombieConjurerWCStructureExport Game Resources

    The export/ folder contains folders for:

    - wc:export/assets. These are the resources for classes created in 3DS
      and other tools. Under the assets/ folder
      there is one folder for every exported class, containing its exported or
      generated resources.
    - wc:export/textures. These are the textures shared across different
      art assets. The structure of this directory
      replicates the one in the artists' textures repository, namely,
      "e:\renaissance\trunk\texturas"
    - wc:export/generatedtexture.s Textures generated by the exporter
      (normal maps).
    - wc:export/music. Music files.
    - wc:export/sounds. Sound files.
    - wc:export/videos. Video files.

    @subsection ZombieConjurerWCStructureExportAssets Exported Assets

    Directory with exported resource assets: wc:export/assets
    - One or more assets for each class
    - Non-editable from the editor, read-only
    - Not in the repository, synchronized directory

    @par Asset types

    - NAME: asset for the indoor
    - NAME_indoor_brush: asset for the
    - NAME_indoor_facade: asset with facade of the indoor
    - NAME_indoor_facade_lod%d: each of the LOD levels of the indoor facade if any
    - NAME_indoor_portal:
    - NAME_impostor: an special asset for classes with impostors

    @par Dissection of an asset

    - /anims/: all animations for the asset (only in assets for skeletons)
    - /anims/dependencies/chunk.n2: set submissive leader states and follow
      joints
    - /anims/%s.nax2: animation in binary format
    - /autogen/: autogenerated files from other data (it can be deleted and
      regenerated)
    - /autogen/global.dds: global terrain texture
    - /autogen/horizon.n2: horizon culling information
    - /autogen/w_NaV> d.dds: weightmap files for terrain
    - /debug/: debug files not needed in gold, only info for editor
    - /debug/chunk.n2: who exported it, from what file, etc
    - /debug/thumb.jpg: preview image for this asset
    - /debug/terrain/growthmaterials.n2: material for vegetation
    - /debug/terrain/ncterrainvegetationclass.n2:
    - /debug/cell_NaVd_growth.tga: which vegetation has each terrain cell
    - /materials/: material files
    - /materials/Mat_%X.n2: nebula 2 materials persisted files
    - /materials/Sur_%X.n2: nebula 2 surfaces persisted files
    - /meshes/: mesh files
    - /meshes/mesh_NaV>d.nvx2: geometry files in binary format for a subobject
    - /meshes/mesh_%X_shadow.nvx2: geometry files in binary format for object shadow
    - /physics/: physic related files
    - /physics/objects.n2: object instancer with all the physical objects
    - /physics/spaces.n2: object instancer with all the physical spaces
    - /scene/: scene graph files
    - /scene/name_lod%d.n2: scene graph for lod %d
    - /scene/grass.n2
    - /source/l_%X_0_0.tga: info for terrain layers
    - /spatial/: spatial related files
    - /spatial/cellsstructure.n2: xml file with cell info, bbox, etc.
    - /spatial/IBInstancer_%d.n2: object instancer for the brushes of a cell
    - /spatial/PortalsInstancer_%d.n2: object instancer for portals
    - /spatial/wrapperMesh%d.n2: wrapper mesh for a cell
    - /textures/: textures needed
    - /textures/lightmapNaVd.dds: lightmap for terrain cells
    - /textures/lightmapglobal.dds: global lightmap for the whole terrain
    - /textures/shadowmapNaVd.dds: shadow map for terrain cells
    - /textures/shadowmapglobal.dds: shadow map for the whole terrain
    - /terrain/: things for terrains
    - /terrain/cell_NaVd_seeds.ngs: vegetation seeds
    - /terrain/heightmap.n2: properties for resource heightmap (out of date?)
    - /terrain/heightmap.t16: heightmap for terrain (text file)
    - /terrain/materials.n2: terrain materials
    - /terrain/weightmaptable.n2: which materials are used in which terrain cells
    - /terrain/modulation.dds: global modulation map for the terrain

    @subsection ZombieConjurerWCStructureExportGeneratedTextures Generated Textures

    wc:export/generatedtextures
    - Generated by exporter

    @subsection ZombieConjurerWCStructureExportMusic Music

    wc:export/music
    - One package with exported music
    - Only wavs, ogg, mp3

    @subsection ZombieConjurerWCStructureExportSound Sound

    wc:export/sounds
    - One package with exported sounds
    - Only wavs, ogg, mp3

    @subsection ZombieConjurerWCStructureExportTextures Textures

    wc:export/textures
    - Direct copy of textures from artist repository

    @subsection ZombieConjurerWCStructureExportVideo Video

    wc:export/video
    - One package with exported videos

    @subsection ZombieConjurerWCStructureLevels Levels

    wc:levels
    The levels/ folder contains a .n2 files and a folder for each game
    level. The folder containing the following subfolders:

    - ai/. For each indoor/outdoor entity, there is a navigation mesh stored
      (ai/%X/navmesh.rle), where %X is the
      hexadecimal id of the entity.
    - config/. This contains two types of files:
    - config/%X.n2. Configuration files, one for each user that has been
      working on the level, where %X is the id of the
      user. Contains the latest entity identifier used for a user in a level.
    - commonconfig.n2. Data version used for the storage of the entity
      object info.
    - gameplay/. Gameplay data.
    - gameplay/objectives.n2. Mission objectives for the level.
    - holes/. Terrain holes.
    - holes/holes.n2. Script having all the info about the terrain holes.
    - objects/. There are two versions of this.
    - Version 0. This contains a set of folders, one for each user that has
      been working on the level. One such folder contains files for the entities
      added to the level.
    - Version 1. There are two files for each user working on the level,
      named %X.n2 and ncEditor_%X.n2. The firsrt one
      holds all the entity information for entities created by the user owning
      the file, the second file holds only edit info which
      can be discarded for gold version of the game.
    - spatial/ This contains a set of folders, one for each space (an entity
      describing a terrain, building, or any other
      construct where you can place entities) that contains game entities.
      Each contains one .n2 files, which specifies which
      entities are contained in each cell.
    - waypoints/waypoints.n2. All the waypoints in the level.

    @par Gold version

    - One level packaged in one file
    - Non editable

    @subsection ZombieConjurerWCStructureLibraries Libraries

    wc:libs/

    Finally, the libs/ folder holds the description of the Grimoire: the
    general entity class library, plus any other personal
    libraries that every user can define.
    - libs/classes/. Scripts for classes.
    - libs/classes/Classname/. There is one directory for each class
      scripted (Classname is the name of the class).
    - libs/classes/Classname/xxx.lua. In the directory there is one file for
      each scripted function, the name of the file
      represents the Nebula method signature, e.g. b_init_o.lua. All are lua
      files.
    - libs/fsm/. Information about finite state machines.
    - libs/fsm/init.lua. Script executed on initialization of the fsm
      library, can be customized.
    - libs/fsm/fsms/FSMName.n2. Persisted FSM named FSMName.
    - libs/fx/fx_general.n2. Defines the effects to be used in the game.
      This is being edited by programmers, depends on
      code distribution.
    - libs/gfxmaterials/. Definition of the materials used in the game. This
      materials are defined to avoid having too many
      shaders combinations created and used. This is being edited by artists.
    - libs/grimoire/. Organization of entity classes in folders. Only needed
      for edition, not for final game.
    - libs/materials/. Information about materials used in the game. Edited
      by users.
    - libs/materials/materialname.n2. Persisted material information. One
      file for material.
    - libs/materials/fx/materialname.n2. Information about special effects materials.
    - libs/materials/physics/materialname.n2. Information about physics materials.
    - libs/streams/. Information about streams.
    - libs/templates/. Templates for creation of scripts, only used in the
      editor.

    @section ZombieConjurerWCTemporary Temporary Working Copy

    To work with the exporter, there is another environment variable needed
    CONJURER_WCTMP, which normally points to c:\\conjurer\\gamernstemp\\. This is
    used for the storage of the temporary working copy.

    Sometimes, you need to perform a test operation that you don't want to
    mix with the already complete game data.

    Conjurer allows you to do that in two flavours:

    @par Export to temporary working copy

    If you need to test things without actually putting them into the
    working copy, the 3DS exporter allows you to export classes into a temporary
    working copy, and run Conjurer using it, so that you can preview your
    changes without actually mixing them with the already complete game data.
    This secondary (temporary) working copy is not a complete copy of the
    primary working copy: it only contains any classes that have been explicitly
    exported into it, for preview purposes only. If it needs any other data, it
    will retrieve it from the primary working copy.

    Conjurer can run in temporary mode (that is, using the temporary working
    copy) only if it is explicitly run from the 3ds exporter. No changes made
    in conjurer when in temporary mode will be effective, so you should proceed
    with caution.

    @par Edit to temporary working copy

    Conjurer can also work in temporary mode.

    @section ZombieConjurerWCOperation Version Control With the Game repository

    Operation with version control is done with TortoiseSVN application
    (which is integrated in Windows Explorer). Just go to your gamerns directory,
    eg. c:\\conjurer\\gamerns. And you can do the following operations:

    - Update often. This minimizes problems. The longer you leave between
      updates the more problems you will encounter. Always check the messages
      you get when updating, specially the conflicts. They must be solved as
      soon as possible.
    - Commit. At the moment if you want to add your changes to the
      repository, you can do the following.
    - Commit classes. You must commit all the new classes and changed
      classes, it is not possible to just commit a new class because there is an
      index file that list all the classes you have in your system. To commit
      the classes you must commit the following directories export, classes and libs.
    - Commit levels. Go to the levels directory and commit the whole
      contents of the directory with the name of the level
      and the n2 file with the name of the level. You have the possibility to
      just commit one level, and not all at the same time.
      But always include all the files in the level directory.
    - Revert. If you want discard all your changes. You can just delete all
      non-versioned files and revert all your changes.
      This is quite easy using the TortoiseSVN interface.
      In the case of new material (not present in the repository) remember to
      select the Show unversioned files option and Select all.

    @section ZombieConjurerWCClean Clean Working Copy
    
    The http://svn.tragnarion.com/repos/gamerns/branches/gamerns-cleanwc should always contain a "clean"
    working copy, meaning that everything required for a fresh Conjurer installation to run should be placed here.
    Care and feeding
    Ideally, every time you update the standard conjurer_wc to add any classes, levels, resources, scripts, libraries, etc.
    required by Conjurer, you should also update the data in the gamerns-cleanwc branch. The simplest way to do this is
    using the svn merge command on your local copy of the branch, like this:
    c:\gamerns\branches\gamerns-cleanwc>
    svn merge -r N:M http://svn.tragnarion.com/repos/nebula2rns/trunk/conjurer_wc .
    >
    At each release, a tag will be created from the current state of the cleanwc branch, named gamerns-(release number).
    Changes in this branch will then be merged into the working copy trunk, so that they are available for the Conjurer user
    when they update to the latest release.
*/
