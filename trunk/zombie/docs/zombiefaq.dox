/**
    @page ZombieFAQ Frequently Asked Questions

    - @ref ZombieFAQGeneral
    - @ref ZombieFAQBuilding
    - @ref ZombieFAQUsage

    @section ZombieFAQGeneral General Questions

    @par Where does the name Zombie come from?

    The Zombie Engine was named by Tragnarion developers after an interesting
    discussion on the way zombies chase their victims in horror movies. In
    such movies, zombies appear to walk slowly, until their victims run away.
    After running a while, the zombies appear to keep walking slowly, but they
    stay at about the same distance they were before. Therefore, we concluded,
    Zombies run when you're not looking. It is the same thing with our engine:
    despite its aparent performance, it actually runs incredibly faster, but
    alas, only if no one's looking. So much for optimization.

    @par What does Brush mean in the Zombie Engine?

    The term Brush is a legacy from earlier stages of the development of Zombie.
    Unlike other engines such as Unreal, where a Brush is a building block used
    for constructive level geometry, in Zombie the term refers to a type of
    entity that implements a graphic and collision models and a physics behavior.
    It is the most commonly used class of scenery object, it is usually static
    and so the name is also used for the building blocks of interior cells, or
    Indoor Brushes.

    @par What help and support does Zombie provide?

    Zombie is distributed along with an Editor and Exporter manuals, most
    classes are documented, and some architecture documents are included for
    some of the modules. Aside of that, using Zombie is mostly a heuristic
    process. Neither Tragnarion Studios or the Zombie development team provides
    user support to users or companies.

    @section ZombieFAQBuilding Building and Starting

    @par What platforms are supported by Zombie?

    nebula2 was intended to be multiplatform, including support for Linux and
    Mac OS, but support for graphics, input or audio, was never implemented.
    Zombie only extends nebula2 in its support for Windows and DirectX.

    @par How is a project created and setup?

    Zombie uses the nebula2 build system, which is a set of scripts that parse
    custom files describing the project settings in a platform-independent way.
    In order to generate Visual Studio solutions, these files need to be
    processed, which will also automatically generate package files required
    by the object and scripting systems. Refer to the Build system section for
    details on creating projects and modules.

    @par How is a game repository created?

    Zombie requires a game repository to work. A clean Working copy is provided
    with the Zombie distribution that includes all classes and resources
    required by the editor to begin working with. Structure of the Working copy
    has been defined to be friendly to a shared environment using a version
    control system such as Subversion. See the Working Copy section for details
    on using and maintaining the game data repository.

    @par How is a Zombie project released?

    Zombie provides a script that is able to generate a binary distribution
    that includes an installer for developers, artists and designers. No such
    script is provided for deploying commercial products, building game data,
    handling licenses, etc.

    @section ZombieFAQUsage Usage

    @par Why is the Zombie engine so slow?

    It isn't. Conjurer may look slow due to the amount of editor data it needs
    to manage, but all that overhead is removed when running it on a standalone
    Renaissance application. Unfortunately, Zombie doesn't provide enough
    tools for benchmarking or building resource budgets, so users are advised
    to plan ahead and test performance before setting project requirements.

    Still, one of the most compelling issues in Zombie is the large amount of
    files in the game repository, which can lead to the engine stalling while
    accessing files for on-demand resource loading during development. Also,
    when using large terrains, Zombie doesn't provide facilities for loading
    streamed resources asynchronously, which may be the cause of minor pauses.

    @par How is graphics content created for Zombie?

    The only authoring tool supported is 3DStudio Max 8. Zombie comes with a
    Exporter plugin that allows defining Zombie-specific structures such as
    materials, cells and portals, collision geometries, or character skeletons,
    along with models, textures and animations. Please refer to the 3DSplugin
    module documentation for details on authoring Zombie data assets.

    Unlike other engines, Zombie doesn't provide support for building geometry
    in the editor, other than terrains. No BSP or other types of brush-based
    constructive geometry exist in Conjurer, but users are welcome to add it.
    
    @par Which data formats are supported by Zombie?

    Zombie inherits from nebula2 the idea of using custom formats instead of
    supporting standards. Therefore, geometry and animation files use the custom
    n3d2/nvx2 and nanim2/nax2 formats (text and binary, respectively). Other
    graphics resources such as textures and shaders allow all formats supported
    by DirectX. Music and sound use wav, and video supports Ogg-Theora only.
    
    All other resource compounds such as collision assets or spatial cells
    use standard nebula2 object serialization for persistence. This format has
    the advantage of being text-based which is friendly to version control,
    and can be converted later to a compact binary format for data distribution,
    which is why most Zombie data assets use it, including persistence of
    entity classes, as well as game libraries and levels.

    @par What Scripting languages can be used?
    
    nebula2 included natively support for Tcl, as does Zombie. But most of the
    development has been done in Lua for game scripting, and Python for the
    editor toolset, making extensive use of the wxPython libraries. Although
    support for other languages is included in nebula2 contributed modules,
    Zombie added support for extending classes through scripting to Lua, which
    would be required in order to use this feature with other languages.

    @par How are shaders used in Zombie?

    As in nebula2, Zombie uses D3DX effect files as its shader definition format.
    The shader framework from nebula2 has been extended though to allow shader
    maintenance from a script, building shader code from an abstract material
    definition, which is just a list of attributes: texture maps, light and fog
    behavior, geometry transformations, etc. A builder script is provided to
    procedurally assemble pieces of shader code that implement these operations
    to avoid maintaining identical code scattered across many effect files.

    Unfortunately, the material script interface is rather primitive and has
    reached the critical mass. It is growingly painful to extend this script
    to support new features and hardware profiles. A reworking of this system
    could be attempted to create a template- or fragment-based approach to
    procedurally building shaders, still guaranteeing code maintainability.

    @par How is networked behavior defined?

    Painfully. One of the major areas where Zombie needed some serious revision
    was network components and communication. Currently, it is required to
    define network components that parallel the behavior of distributed gameplay
    components, and Remote procedure calls are difficult to define and manage
    from game code, which easily leads to network paradoxes. Also, the basic
    communication unit for agents are Basic Actions, which leads to some
    important constraints. Therefore, networking is quite unstable for agents,
    but reliable for purely multiplayer games, but it would benefit from a
    refactoring in both areas. Refer to Zombie Evolution for details.

    @par Can the Zombie Engine be used for commercial products?

    The Zombie License grants permission to use it for any kind of projects,
    commercial or otherwise, as long as the Zombie license agreement remains
    in place, as well as licenses for all other projects it depends upon, most
    notably nebula2. There is no obligation to release any derived products or
    changes, although public fixes and improvements are highly encouraged.
    Please check license agreements for details.
*/
