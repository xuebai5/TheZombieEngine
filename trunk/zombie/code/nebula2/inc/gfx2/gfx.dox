/**
    @defgroup NebulaGraphicsSystem Graphics System

    This section of the documentation covers Nebula graphics system and it's
    subsystems.
    
    - @ref NebulaGraphicsSystemCoordinates
    - @ref NebulaGraphicsSystemMesh
    - @ref NebulaGraphicsSystemTextures   
    - @ref NebulaGraphicsSystemShapes
    - @ref NebulaGraphicsSystemLines
    - @ref NebulaGraphicsSystemRenderState

    @section NebulaGraphicsSystemCoordinates Coordinate System
    
    The default coordinate system of Nebula is <b>right-handed</b> coordinate 
    system but Nebula can use a left-handed coordinate system either. 
    The defalt culling mode of Nebula is clockwise.

    @note The default coordinate system of Direct3D is left-handed and OpenGL
    uses a right-handed coordinate system.
    
    @section NebulaGraphicsSystemMesh Mesh Support

    nMesh2 encapsulates a vertex and index buffer.  A mesh is loaded from a mesh 
    resource file (@c .n3d2 for ASCII and @c .nvx2 for binary). A meshes vertex 
    and index buffers are accesible via nMesh2::Lock() and nMesh2::Unlock().
    
    It is possible to give hints to the gfx system as to how the mesh will be 
    used. The usage flags should be specified to nMesh2::SetUsage().
    
     - @c WriteOnce CPU only fills the vertex buffer once, and never touches it again.(default value)  
     - @c WriteOnly CPU writes frequently to vertex buffer, but never read data back. 
     - @c ReadOnly CPU reads from the vertex buffer, which can never be rendered.
     - @c NPatch Obsolete.
     - @c RTPatch Obsolete.
     - @c PointSprite Mesh is used to provide point sprite data
     - @c NeedsVertexShader Hints to the gfx system that this mesh will be used 
       with a vertex shader. The @ref NebulaD3D9GraphicsSystem uses this to 
       enable software vertex processing on systems that have no hardware vertex 
       shader support.
       
    There's some other vertex components for tangent, binormals which for 
    per-pixellighting and weights and joint indices for vertex skinning.
                                                         
    Another special helper class for mesh is nDynamicMesh for CPU 
    generated geometry. (i.e. @ref NebulaParticleSystem)

    @section NebulaGraphicsSystemTextures Texture support

    The default image format for textures is @b DDS. Other image formats 
    may be supported (see the docs for the actual graphics server used), but 
    should only be used in tools or during testing as the loading is slow 
    and the internal texture format can be inefficient. DDS files can be in many 
    formats and support cube and volume textures (volume textures aren't yet 
    supported in Nebula2), they can also contain mip map levels.

    @note When using DDS files any mip maps you need should be pre generated 
    as Nebula2 will assume the DDS file contains all needed mip maps. Nebula2 
    will generate mip maps for other file formats.

    For information on DDS, see:
    - <a href="http://msdn.microsoft.com/library/en-us/directx9_c/directx/graphics/reference/DDSFileReference/ddsfileformat.asp">DDS Files</a>

    @section NebulaGraphicsSystemShapes Shapes support
    
    nGfxServer2 exposes an interface for drawing primitive shapes, which is basically
    a wrapper for a simple mesh drawing process. This interface allows drawing some
    simple primitive shapes (box, sphere, cylinder, ...) using the nGfxServer2::DrawShape()
    method, as well as any other custom mesh, simply providing the mesh resource.
    
    Although this interface is intended for drawing simple shapes, it can be customized
    as much as required providing both a custom shader in nGfxServer2::BeginShapes(),
    and any custom shader parameters in nGfxServer2::GetShapeShaderOverrides()

    @section NebulaGraphicsSystemLines Lines support
    
    The nLineHandler class is provided to allow a number of custom debug visualizations
    using line primitives. This class encapsulates a dynamic mesh that it uses to batch
    line segments until a nLineHandler::EndLines() is called. This is when all batched
    lines are flushed into the graphics server, and drawn.
    
    As in the case of shapes, line drawing can be customized as much as needed
    through both shader and shader parameters.
    
    Some usage tips for nLineHandler:
    
    - A nLineHandler can be declared for every different place it will be used, or
      it can be shared, it's up to the client module. Even if a different handler
      is declared, the internal dynamic mesh will be shared in case it has the same
      vertex declaration.
    - The vertex components for the line handler must be declared before it is
      first used, ideally in the constructor or initialization function of the client
      class.
    - Although the line handler allows any primitive type, only nGfxServer2::LineStrip
      and nGfxServer2::LineList make sense to draw lines. Anyway, you could use the
      line handler interface as a general-purpose dynamic mesh builder if you like.
      That is, of course, in case performance is not an issue.
    - If you ask whether to call nLineHandler::BeginLines() and nLineHandler::EndLines()
      often or not. A simple heuristics can be applied in this case: when drawing isolate
      segments, batch as many of them as possible before calling nLineHandler::EndLines().
      When drawing strips, you should flush the line immediately.
    - For performance reasons, you may prefer batching segments in the line handler, 
      using a LineList, to reduce the number of drawing calls, although more vertices
      are generated in the internal dynamic mesh. This option is up to every client.
      
    @note unlike the shape interface, the line interface works differently from the one
    in nGfxServer2, where all lines, segments or strips, are immediately drawn, and so
    there is no real difference in calling nGfxServer2::EndLines() sooner than later.
    
    @section NebulaGraphicsSystemRenderState
    
    Some render options can be set to indicate draw modes. The full set of render options
    is known as the render state. The render state can be set by generic setters, which
    receive the render option plus its value. There's one setter/getter for each value
    type (for instance, nGfxServer2::SetBoolRenderOption() sets a boolean render options).
    Render states can be pushed and popped.
    
    The render state is effectively set by the low level graphics implementation when
    a call to a BeginX method is invoked. Any modification on the render state after
    a call to BeginX won't have any effect until the next call to BeginX, although getter
    methods will return the last set value.
    
    Currently only nGfxServer2::BeginLines() uses the render state.
*/
