/**
    @defgroup NebulaDependencyServer Dependency Server System
    @ingroup Kernel

    @brief The nDependencyServer objects allow to determine links of objects to
    other object in the save and in the load.

    @section DependencyCommands SetDependency and SetDependencyObject commads

    Instead of use commands to link objects, now the file can use 
    <i>setdependency</i> and <i>setdependencyobject</i>. These commands take 
    three parameters, the first is a file to load, the second is a dependency 
    server object that will load the file and the third is a command to execute 
    with the loaded object. The object never know where the object will be 
    loaded, the dependency server know it.

@code
    -- example
    setdependency( [[home:mat00.n2]], [[/sys/servers/dependency/basic]], [[setmaterial]] )
    setdependencyobject( [[home:mat01.n2]], [[/sys/servers/dependency/basic]], [[setmaterial]] )
@endcode

    The <i>setdependency</i> and <i>setdependencyobject</i> commands are the 
    same. Only differ in the first call <i>setmaterial</i> with the N.O.H path 
    and the second call <i>setmaterial</i> with the object pointer. 

    @section DependencySubclasses Subclasses of nDependencyServer

    The subclasses of <i>nDependencyServer</i> should redefine the methods 
    <b>Init</b>, <b>GetObject</b>, and <b>GetObjectPath</b>.

@code
    void Init();
    nObject * GetObject( const nString & filename, const nString & command );
    bool GetObjectPath( nObject * const object, const nString & command, nString & path );
@endcode

    <b>Init</b>, can be used to init the dependency server. <b>GetObject</b>, 
    is used in the load of a object to get the references. The dependency 
    server should check if referenced object is already loaded or load the 
    object and return a pointer to it. <b>GetObjectPath</b>, should return the 
    path in which an object will be saved. <b>GetObjectPath</b> can return 
    false if no need to save the object, but it usally will return true.

    In the methods can use the following variables to create the filename of 
    the object or to obtain where the object is saved. the methods can also use
    of the object, filename and commands parameters to create the path and 
    obtain the object.

     - <b>parentName</b> the name of the file that contains the dependencies
     - <b>parentPath</b> the path if the file that contains the dependencies

    The basic <i>nDependencyServer</i> use the <b>parentPath</b> variable to 
    save the objects in the same place. And in the load always put the objects 
    in the same N.O.H path.

    To save the same objects again is needed to call 
    <b>nDependencyServer::InitGlobal();</b>. This method allow to reset the 
    saved objects list. If this method isn't called, dependencies already saved
    won't be saved again.

    @section DependencyExample Example of use

    This is the code of SaveCmds of a teorical object. Instead of link with 
    another object saving "setmaterial" commands, it use <b>SetDependency</b>
    command. The object depServer can be a generic nDependencyServer or a 
    especific subclass. In the example, the object never know when the 
    referenced object will be saved, is the dependency server how know.

@code 
    // SaveCmds
    // depServer is an nDependencyServer object 
    nCmd* cmd( ps->GetCmd( this, 'SDCY') );

    nString path;
    depServer->SaveObject( this->object, "setmaterial", path );
    cmd->In()->SetS( path.Get() );
    cmd->In()->SetS( depServer->GetFullName().Get() );
    cmd->In()->SetS( "setmaterial" );

    ps->PutCmd( cmd );
@endcode

*/
