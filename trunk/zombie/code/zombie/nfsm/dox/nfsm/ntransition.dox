
//---------------------------------------------------------------------------------
/**
    @scriptclass ntransition
    @cppclass nTransition
    @superclass nRoot
    @classinfo
      Transition to one or more target states.
*/
//--------------------------------------------------------------------------------
/**
    @property Condition
    @format
      o(Condition) -- No info
    @attrs
    @info
      Set the condition that triggers this transition (replaces the previous one, but does NOT release it)
*/
//--------------------------------------------------------------------------------
/**
    @property TargetProbability
    @format
      o(Target state) -- No info
      i(Probability) -- Integer within the range [0,100]
    @attrs
    @info
      Change the probability to choose the given target state
*/
//--------------------------------------------------------------------------------
/**
    @property TargetStateByIndex
    @format
      i(Index) -- No info
      o(State) -- No info
    @attrs
    @info
      Change a target state by its index
*/
//--------------------------------------------------------------------------------
/**
    @property TargetProbabilityByIndex
    @format
      i(Index) -- No info
      i(Probability) -- Integer within the range [0,100]
    @attrs
    @info
      Change a target state probability by its index
*/
//--------------------------------------------------------------------------------
/**
    @property EventCondition
    @format
      s(Event condition) -- Event condition name
    @attrs
    @info
      Set an event condition to trigger this transition, loading it if needed (used for peristence)
*/
//--------------------------------------------------------------------------------
/**
    @property ScriptCondition
    @format
      s(Script condition) -- Script condition name
    @attrs
    @info
      Set a script condition to trigger this transition, loading it if needed (used for peristence)
*/
//--------------------------------------------------------------------------------
/**
    @property FilterCondition
    @format
      s(Filter condition) -- Filter condition name
    @attrs
    @info
      Set an event condition with a filter to trigger this transition (used for peristence)
*/
//--------------------------------------------------------------------------------
/**
    @cmd SetCondition
    @cmdtype setter
    @property Condition
    @info 
      Set the condition that triggers this transition (replaces the previous one, but does NOT release it)
*/
//--------------------------------------------------------------------------------
/**
    @cmd GetCondition
    @cmdtype getter
    @property Condition
    @info 
      Get the condition that triggers this transition, or NULL if no condition has beed set
*/
//--------------------------------------------------------------------------------
/**
    @cmd AddTarget
    @output
      v
    @input
      o(State) -- No info
      i(Probability) -- Integer within the range [0,100]
    @info 
      Add a target state to this transition
*/
//--------------------------------------------------------------------------------
/**
    @cmd RemoveTarget
    @output
      v
    @input
      o(State) -- No info
    @info 
      Remove a target state from this transition
*/
//--------------------------------------------------------------------------------
/**
    @cmd SetTargetProbability
    @cmdtype setter
    @property TargetProbability
    @info 
      Change the probability to choose the given target state
*/
//--------------------------------------------------------------------------------
/**
    @cmd GetTargetsNumber
    @cmdtype getter
    @property TargetsNumber
    @info 
      Get number of target states
*/
//--------------------------------------------------------------------------------
/**
    @cmd GetTargetStateByIndex
    @output
      o(State)
    @input
      i(Index) -- No info
    @info 
      Get a target state by its index
*/
//--------------------------------------------------------------------------------
/**
    @cmd SetTargetStateByIndex
    @cmdtype setter
    @property TargetStateByIndex
    @info 
      Change a target state by its index
*/
//--------------------------------------------------------------------------------
/**
    @cmd GetTargetProbabilityByIndex
    @output
      i(Probability) -- Integer within the range [0,100]
    @input
      i(Index) -- No info
    @info 
      Get a target state probability by its index
*/
//--------------------------------------------------------------------------------
/**
    @cmd SetTargetProbabilityByIndex
    @cmdtype setter
    @property TargetProbabilityByIndex
    @info 
      Change a target state probability by its index
*/
//--------------------------------------------------------------------------------
/**
    @cmd RemoveTargetByIndex
    @output
      v
    @input
      i(Index) -- No info
    @info 
      Remove a target state by its index
*/
//--------------------------------------------------------------------------------
/**
    @cmd SetEventCondition
    @cmdtype setter
    @property EventCondition
    @info 
      Set an event condition to trigger this transition, loading it if needed (used for peristence)
*/
//--------------------------------------------------------------------------------
/**
    @cmd SetScriptCondition
    @cmdtype setter
    @property ScriptCondition
    @info 
      Set a script condition to trigger this transition, loading it if needed (used for peristence)
*/
//--------------------------------------------------------------------------------
/**
    @cmd SetFilterCondition
    @cmdtype setter
    @property FilterCondition
    @info 
      Set an event condition with a filter to trigger this transition (used for peristence)
*/
//--------------------------------------------------------------------------------
/**
    @cmd AddTargetByName
    @output
      v
    @input
      s(FSM name) -- No info
      s(State name) -- No info
      i(State type) -- 0=Node, 1=Leaf, 2=End
      i(Probability) -- Integer within the range [0,100]
    @info 
      Add a target state to this transition, creating the state if needed (used for persistence)
*/
