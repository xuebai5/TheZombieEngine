/**
    @defgroup NebulaClassScriptServer nClassScriptServer : Server to Manage Class Scripts
    @ingroup NebulaTragnarionModules

  - @ref NebulaClassScriptServerDocumentation 
*/

/**

@page NebulaClassScriptServerDocumentation Class Server Documentation

The class script server is needed to manage all the scripts of the nClasses. The 
class script server can preload the scripts of a class, refresh them if needed 
and keep track of them.

@section NClassServerScriptMethods Class methods in scripting

There might be a need of scripting commands for object instances, but there are 
many script commands that are related to the class instead of the instance. To 
not spend time and space putting that script method in every instance created, 
we need something to put the scripts only once.

The scripts for a class will be written in separate files. One function for file 
and the name of the file is the signature of that function plus the extension 
for the script language.

For example in the <b>f_gethappyness_v.lua</b> file we get the following script 
in Lua. It's important that the function no need to be named. The name is take 
from the file name.

@code

function ( self )
    local count = 1
    
    for i = 1,10,1 do
      count = count * 0.5 + count * i
    end
    
    return count
end

@endcode

If we need to access to the caller ( the object instance ), we used the first 
parameter. This first parameter is not put in the signature.

A wizard could be implemented in the editor to create automatically the skeleton 
for these files, and give the proper name to the file. The wizard would ask for 
class name, input argument types, function name and output arguments. This way
level designers could easily add functions to existing classes.

These files could have also doxygen help, which would be included in the 
scripting command help.

@section NClassServerScriptSetup Setup of class script

The class server is in charge of getting all the files from the class. These 
files are in the same directory, one directory for class. For every file in that 
directory, the class server loads a script function.

The class server is also in charge of refreshing the script files. If the files 
are changed, the class server can reload them automatically. The notification 
will be provided by the directory watcher.

In Lua we have a lua table for every class, that will contain the references to 
all the script functions of that class.

@section NClassServerScriptCall Call of class script

The call of class scripting is very easy. The class server get all the data of 
the caller and execute the script.

>From C++ the call is similar that usual call to script code.

@code
    instance->Call( "name", ...params... );
@endcode

>From scripting code we can call another script code like usual code.

@code
    
function ( self )
    happy = self:getrandom()
    
    self:SetIntVariable( "happyness" , happy )
    
    return happy
end

@endcode

The nCmdProtoLua will have to be modified to access the class script server, or 
a new nCmdProtoClassLua will have to be implemented.

@section NClassServerLevels Levels of persistence

Its possible that the script functions are in differents locations. Per example 
one location for the basic scripting, one location for debug scripting and 
another one for the specific project scripting.

Its possible to put several search directories in the class server. The class 
Server load script for the class in all the search directories.

With the class <i>Weapon</i> and the directories <i>wc:libs/classes</i> and 
<i>wc:libs/project</i> will search in:

@code 
wc:libs/classes/Weapon/
wc:libs/project/Weapon/
@endcode

@section NClassScriptServerFuture In The Future

Some of these are just thoughts of interesting features that could be provided 
related with nClasses, but maybe not directly related with nClassScriptServer.

 - Using variables, think how to use lua object instance variables in the script 
 function and make them visible from C++ code. At the moment this is not so 
 important since it can be done through the component ncDictionary. There are 
 other issues like persistence of these variables, etc.

 - Ability to create new nClass dynamically (already possible with 
 nEntityClass).

 - Change nClass to be nRoot too (already done with nEntityClass).
  
*/