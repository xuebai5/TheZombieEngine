#include "precompiled/pchnnavmesh.h"
//------------------------------------------------------------------------------
//  navblockparser.cc
//------------------------------------------------------------------------------

#include "nnavmeshparser/navblockparser.h"
#include "nnavmeshparser/navtag.h"
#include "nnavmeshparser/navparserfactory.h"
#include "nnavmeshparser/nnavmeshfile.h"

//------------------------------------------------------------------------------
/**
    Constructor
*/
NavBlockParser::NavBlockParser(const NavTag& blockId, NavParserFactory* factory)
    : blockId(blockId), parserFactory(factory), file(NULL), mesh(NULL)
{
    // Empty
}

//------------------------------------------------------------------------------
/**
    Destructor
*/
NavBlockParser::~NavBlockParser()
{
    for ( int i = 0; i < this->parseMethods.Size(); ++i )
    {
        n_delete( this->parseMethods[i] );
    }
    this->parseMethods.Reset();
}

//------------------------------------------------------------------------------
/**
    Parse the block, returning true if block successfully parsed
*/
bool
NavBlockParser::Parse(nNavMeshFile* file, nNavMesh* mesh)
{
    this->file = file;
    this->mesh = mesh;

    // Parse block beginning
    if ( !this->BeginBlock() )
    {
        return false;
    }

    // Parse block version
    int version;
    if ( !this->Version(version) )
    {
        return false;
    }

    // Validate that there's a parse implementation for this block version
    if ( version < 1 || version > this->parseMethods.Size() )
    {
        return false;
    }

    // Parse block contents for the correct block version
    IParseMethod* method = this->parseMethods[version-1];
    if ( !(*method)() )
    {
        return false;
    }

    // Parse block ending
    return this->EndBlock();
}

//------------------------------------------------------------------------------
/**
    Register a method to be used to parse the next block version
*/
void
NavBlockParser::AddParseVersion( IParseMethod* method )
{
    parseMethods.PushBack(method);
}

//------------------------------------------------------------------------------
/**
    Parse the beginning of the block
*/
bool
NavBlockParser::BeginBlock()
{
    return this->file->ParseBlockStart(this->blockId);
}

//------------------------------------------------------------------------------
/**
    Parse the ending of the block
*/
bool
NavBlockParser::EndBlock()
{
    return this->file->ParseBlockEnd(this->blockId);
}

//------------------------------------------------------------------------------
/**
    Parse the version of the block
    
    If a loader, it will get the version from file, if a saver it will write the
    version to file.
*/
bool
NavBlockParser::Version(int& version)
{
    // The last version number is autogenerated by the number of parse methods registered.
    // Even if there's only a valid saver (for the last version), it's assumed that the
    // saver will register dummy implementations for other versions (they will never be
    // called if all works nicely anyway).
    version = parseMethods.Size();

    // Write the last block version or load the one found in the file.
    return this->file->ParseInt8(NavTag::Version, version);
}

//------------------------------------------------------------------------------
/**
    Parse a block within this block
*/
bool
NavBlockParser::ParseBlock(const NavTag& tag)
{
    // Get the parser for the block to parse
    NavBlockParser* parser = this->parserFactory->CreateBlockParser(tag);
    if ( !parser )
    {
        return false;
    }

    // Parse the block
    bool success = parser->Parse(this->file, this->mesh);
    this->parserFactory->DeleteBlockParser(parser);
    return success;
}

//------------------------------------------------------------------------------
//   EOF
//------------------------------------------------------------------------------
