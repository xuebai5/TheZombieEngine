/**
    @defgroup AppSingleInstance Single-instance Application
    @ingroup Application
    
        - @ref singleinst_intro
        - @ref singleinst_solution
        - @ref singleinst_how

    http://www.michaelmoser.org/instance.htm
    
    @section singleinst_intro Ultimate way to limit a program to one instance
    
    Some programs may not run as two instances at the same time. That means
    that the program has to check first if another instance is already
    running. If there is a previous instance, then the program has to exit
    and activate (set the input focus) the first instance of the process.
    
    There are several possibilities to do so. This article checks on them
    and tries to choose the optimal solution. The optimal solution should be
    as less intrusive as possible: meaning that one should not assume
    anything special to use it.
    
    One "solution" would be to find the top window of the application,
    (using the FindWindow function you know the caption), then just to make
    sure (you can't just try a caption!) it is the right top window, you can
    send a custom message (some WM_CHECK_MY_APP), expecting this message to
    return a unique constant 0xF3ABCD, so now you are happy!
    The problem is that for each process there is a time between startup and
    the appearance of the main window. So this is the unsafe spot, here the
    schema fails because it does not know yet that the first instance exists!
    
    The second solution is to enumerate all running processes and find the
    current one. Enumerating processes is an interesting task and worth
    another article:-) The code for this is very different for NT and
    Windows 95. On Windows 95 there is the TOOLHELP API that does the task,
    but this API was not ported to NT. So on NT you have the PSAPI.DLL, -
    very convenient interface, but you need to check that your product ships
    the PSAPI DLL ! It is not part of the default NT installation - rather
    an add on from the windows SDK. The alternative, on NT, is to read
    extremely weird registry settings from the HKEY_DYN_DATA key.
    Thank you very much!
    
    The third solution would be to use a named synchronisation object - for
    example a semaphore. Here you can check if the object already exists
    i.e. the application is running. Then you need to make sure that the
    semaphore exists for the whole run of the process - put it into a static
    object.
    This is better - but there remains a problem. How do we activate the
    previous application? We got no idea where it is!
    
    And that gets us to the last variant.
    
    @section singleinst_solution The neatest solution?
    
    The first instance creates a named shared memory object and puts it's
    Process ID (PID) into it. The second instance checks: If the shared
    memory object exists it gets the PID of the first instance.
    Later it can find the window handle of the top window from the process
    ID. (Details on this later). This window handle is then set to be the
    foreground application.
    
    Now, how do we name the shared memory object? The path of the process is
    given in the command line and can be extracted. You can either get if
    through the GetCommandLine function, or you can take it from a global
    variable declared in stdlib.h - ___argv[0] (parsed courtesy of the MSVC
    runtime library).
    Now remove the drive component (can be different due drive substitution
    - SUBST).
    This schema will work for NT4.0, but I don't know if it will work with
    Windows 2000 :-) There you can have soft links - so the path of the
    process may be different if you run it from different directories:-)
    
    Now, how do we find the top app window based on the process ID?
    I am enumerating all the top app windows with the EnumWindows function.
    Now a callback function gets called with the window handle of the top
    app window. The GetWindowThreadProcessId returns the PID that this
    window belongs to.

@verbatim    
    class FindWindowStruct
    {
    public:
      FindWindowStruct(DWORD Pid) : dwPID(Pid), hwndRet(0)
      {
      }
      DWORD dwPID;
      HWND  hwndRet;
    };
    
    // input: The process ID
    // return: HWND of top app window with the argument PID
    HWND FindProcessWindow(DWORD Pid)
    {
      FindWindowStruct str(Pid);
      EnumWindows(EnumWindowsProc,(LPARAM)&str);
      return str.hwndRet;
    }
    
    // callback function (called by EnumWindows)
    // used to find the mapping between PID and application top app window.
    BOOL CALLBACK EnumWindowsProc(HWND hwnd,LPARAM lParam)
    {
      FindWindowStruct *pParam = (FindWindowStruct *) lParam;  
      DWORD dwPID;
      
      GetWindowThreadProcessId(hwnd,&dwPID);
      if (dwPID == pParam->dwPID)
      {
        pParam->hwndRet = hwnd;
        return FALSE;
      }
      return TRUE;
    }
@endverbatim
    
    @section singleinst_how How to use it in you app
    
    I have written a class SingleInstance: Declare a static object of this
    type and you have done it. The second instance does not get past the
    static object constructor.
    
    If you are already paranoid about Windows 2000, then you can give the
    object a string argument - the name of the shared memory object.
*/
